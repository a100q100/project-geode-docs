<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="weblogic_setting_up_the_module">
	<title>Setting Up the HTTP Module for AppServers </title>
	<shortdesc>To use the module, you need to modify your application's <codeph>web.xml</codeph>
		files. Configuration is slightly different depending on the topology you are setting up. </shortdesc>
	<conbody>
		<p>Refer to <xref href="common_gemfire_topologies.xml#common_gemfire_topologies" type="concept"
				format="dita" scope="local"/> for more information. Modifying the war file can be
			done manually or with the <codeph>modify_war</codeph> script. To see the command line
			options for the <codeph>modify_war</codeph> script,
			invoke:<codeblock>$ modify_war -h</codeblock></p>
		<section id="section_9D330F0A9E934B209D77C5A5D79B741C">
			<title>Manual Configuration</title>
			<p>To modify your war or ear file manually, make the following updates: </p>
			<p>
				<ul id="ul_pxj_ozt_wg">
					<li id="li_116ED361927E42A4BA5B03CAA78B7C74"><b>web.xml</b> needs a filter and listener added
						as follows. If you have your own filters, the <keyword keyref="product_name"
						/> Module filter <b>must</b> be the first one.
						<codeblock>&lt;filter&gt;
    &lt;filter-name&gt;gemfire-session-filter&lt;/filter-name&gt;
    &lt;filter-class&gt;
      com.gemstone.gemfire.modules.session.filter.SessionCachingFilter
    &lt;/filter-class&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;cache-type&lt;/param-name&gt;
        &lt;param-value&gt;peer-to-peer&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param>
        &lt;param-name>gemfire.property.locators&lt;/param-name>
        &lt;param-value>localhost[10334]&lt;/param-value>
    &lt;/init-param>
&lt;/filter&gt;
&lt;filter-mapping&gt;
    &lt;filter-name&gt;gemfire-session-filter&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;dispatcher&gt;FORWARD&lt;/dispatcher&gt;
    &lt;dispatcher&gt;INCLUDE&lt;/dispatcher&gt;
    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;
    &lt;dispatcher&gt;ERROR&lt;/dispatcher&gt;
&lt;/filter-mapping&gt;
&lt;listener&gt;
    &lt;listener-class&gt;com.gemstone.gemfire.modules.session.filter.SessionListener&lt;/listener-class&gt;
&lt;/listener&gt;
</codeblock>
					</li>
					<li id="li_D07F66CFBC5147ACA120F34BCDC9444D">Add the following jar files from the AppServer.zip
						to the <codeph>WEB-INF/lib</codeph> directory of the war:<ul
							id="ul_x5m_vd2_5v">
							<li>geode-modules jar</li>
							<li>geode-modules-session-internal jar</li>
							<li>geode-modules-session jar</li>
							<li>slf4j-api jar</li>
							<li>slf4j-jdk14 jar</li>
						</ul>
					</li>
					<li>Add the following jar files from the <codeph>$GEODE/lib</codeph> directory to the
							<codeph>WEB-INF/lib</codeph> directory of the war, where
							<codeph>$GEODE</codeph> is set to the Geode product installation:<ul
							id="ul_ekc_g22_5v">
							<li>antlr jar</li>
							<li>fastutil jar</li>
							<li>geode-core jar</li>
							<li>geode-json jar</li>
							<li>javax.transaction-api jar</li>
							<li>jgroups jar</li>
							<li>log4j-api jar</li>
							<li>log4j-core jar</li>
							<li>log4j-jul jar</li>
						</ul></li>
				</ul>
			</p>
			<p/>
			<p>If you are deploying an ear file: </p>
			<p>
				<ul id="ul_sca_abu_wg">
					<li id="li_B7885246FB3045628DAFB6CF42A82531">Copy all the dependent files, given above, to the
							<codeph>lib</codeph> directory of the ear. </li>
					<li id="li_D9451226FF2643B5AC07D612A6A90CCF">Modify each embedded war file's manifest by adding
						a Class-Path entry which references the shared jars added in the previous
						step. For example:
						<codeblock>Manifest-Version: 1.0
Built-By: joe
Build-Jdk: 1.8.0_77
Created-By: Apache Maven
Archiver-Version: Plexus Archiver
<b>Class-Path: lib/geode-modules-1.0.0-incubating.M3-SNAPSHOT.jar</b>
lib/geode-modules-session-internal-1.0.0-incubating.M3-SNAPSHOT.jar
lib/geode-modules-session-1.0.0-incubating.M3-SNAPSHOT.jar
lib/slf4j-api-1.7.7.jar
lib/slf4j-jdk14-1.7.7.jar
lib/antlr-2.7.7.jar
lib/fastutil-7.0.2.jar
lib/geode-core-1.0.0-incubating.M3-SNAPSHOT.jar
lib/geode-json-1.0.0-incubating.M3-SNAPSHOT.jar
lib/javax.transaction-api-1.2.jar
lib/jgroups-3.6.8.Final.jar
lib/log4j-api-2.5.jar
lib/log4j-core-2.5.jar
lib/log4j-jul-2.5.jar
</codeblock>
					</li>
				</ul>
			</p>
		</section>
		<section id="section_20294A39368D4402AEFB3D074E8D5887">
			<title>Peer-to-Peer Setup</title>
			<image href="../../images_svg/http_module_p2p_with_locator.svg" placement="break"
				id="image_86E949E0F1AD4E9EB67605EFA4E97E13"/>
			<p> To run <keyword keyref="product_name"/> in a peer-to-peer configuration, use the
					<codeph>modify_war</codeph> script with
				options<codeblock>-t peer-to-peer  -p gemfire.property.locators=localhost[10334]
    -p gemfire.propery.cache-xml-file=&lt;moduleDir>/conf/cache-peer.xml</codeblock>
				to result in the following <codeph>web.xml</codeph> content: </p>
			<codeblock>&lt;filter>
    &lt;filter-name>gemfire-session-filter&lt;/filter-name>
    &lt;filter-class>
        com.gemstone.gemfire.modules.session.filter.SessionCachingFilter
    &lt;/filter-class>
    &lt;init-param>
        &lt;param-name>cache-type&lt;/param-name>
        &lt;param-value>peer-to-peer&lt;/param-value>
    &lt;/init-param>
    &lt;init-param&gt;
        &lt;param-name&gt;gemfire.property.locators&lt;/param-name&gt;
        &lt;param-value&gt;localhost[10334]&lt;/param-value&gt;
    &lt;/init-param>
&lt;/filter&gt;
</codeblock>
		</section>
		<section id="section_B0CEBE93564540DBA165E0F7A10FDC0B">
			<title>Client/Server Setup</title>
			<image href="../../images_svg/http_module_cs_with_locator.svg" placement="break"
				id="image_BDF2273487EA4FEB9895D02A6F6FD445"/>
			<p> To run <keyword keyref="product_name"/> in a client/server configuration, you make the
				application server operate as a <keyword keyref="product_name"/> client. Use the
					<codeph>-t client-server</codeph> option to the <codeph>modify_war</codeph>
				script. This adds the following filter to application server's
					<codeph>web.xml</codeph> file: </p>
			<p> To run <keyword keyref="product_name"/> in a client/server configuration, you make the
				application server operate as a <keyword keyref="product_name"/> client. Use the
					<codeph>modify_war</codeph> script with
				options<codeblock>-t client-server -p gemfire.property.cache-xml-file=&lt;module dir>/conf/cache-client.xml</codeblock>
				to result in the following <codeph>web.xml</codeph> content:
				<codeblock>&lt;filter>
    &lt;filter-name>gemfire-session-filter&lt;/filter-name>
    &lt;filter-class>
        com.gemstone.gemfire.modules.session.filter.SessionCachingFileter
    &lt;/filter-class>
    &lt;init-param>
        &lt;param-name>cache-type&lt;/param-name>
        &lt;param-value>client-server&lt;/param-value>
    &lt;/init-param>
    &lt;init-param&gt;
        &lt;param-name&gt;gemfire.property.cache-xml-file&lt;/param-name&gt;
        &lt;param-value&gt;<i>module dir</i>/conf/cache-client.xml&lt;/param-value&gt;
    &lt;/init-param>
&lt;/filter&gt;
</codeblock></p>
			<p>The <codeph>cache-client.xml</codeph> file contains a &lt;pool> element pointing at the
				locator. Its default value is localhost[10334].</p>
		</section>
		<section id="section_2B97047AB30A4C549D91AD258657FBA6">
			<title>Starting the Application Server</title>
			<p> After you update the configuration, you are now ready to start your application server
				instance. Instantiate the locator
				first:<codeblock>$ gfsh start locator --name=locator1</codeblock>Then start the
				server:<codeblock>$ gfsh start server \
    --name=server1 \
    --server-port=0 \
    --locators=localhost[10334] \
    --classpath=&lt;moduleDir>/lib/geode-modules-1.0.0-incubating.M3-SNAPSHOT.jar:\
&lt;moduleDir>/lib/geode-modules-session-internal-1.0.0-incubating.M3-SNAPSHOT.jar</codeblock>Once
				the application server is started, the <keyword keyref="product_name"/> client will
				automatically launch within the application server process. </p>
		</section>
		<section id="section_3E186713737E4D5383E23B41CDFED59B">
			<title>Verifying that <keyword keyref="product_name"/> Started</title>
			<p>You can verify that <keyword keyref="product_name"/> has successfully started by
				inspecting the application server log file. For example: </p>
			<codeblock>info 2016/04/18 10:04:18.685 PDT &lt;localhost-startStop-2> tid=0x1a] 
Initializing Geode Modules
Java version:   1.0.0-incubating.M3-SNAPSHOT user1 041816 2016-04-18 08:46:17 -0700
javac 1.8.0_77
Native version: native code unavailable
Source revision: 19dd8eb1907e0beb2aa3e0a17d5f12c6cbec6968
Source repository: develop
Running on: /10.118.33.250, 8 cpu(s), x86_64 Mac OS X 10.11.4</codeblock>
			<p>Information is also logged within the <keyword keyref="product_name"/> log file, which by
				default is named <codeph>gemfire_modules.&lt;date&gt;.log</codeph>. </p>
		</section>
		<section id="section_E0E0E5A1C9484D4AA13878273F16A920">
			<title>Configuring Non-Sticky Session Replication</title>
			<p>Some situations require sessions to be 'non-sticky', which means that client requests
				can be directed to any server in a cluster of application servers instead of the
				same server each time. To achieve this, you must configure your deployment as
				described for the following topologies. </p>
			<p>
				<b>Peer-to-Peer</b>
			</p>
			<p>No additional configuration is required. </p>
			<p>
				<b>Client-Server</b>
			</p>
			<p>For client-server topologies, the local client cache must be empty. Ensure that the
				filter property <codeph>gemfire.cache.enable_local_cache=false</codeph> is set. This
				effectively sets the local client cache to be a <b>PROXY</b> cache. </p>
			<p>
				<note>Non-sticky sessions affect performance because sessions need to be re-created
					every time a request hits a different server. This may not be noticeable when
					the session attributes are small, but may become more evident as the session
					attributes increase in size and/or number. </note>
			</p>
		</section>
	</conbody>
</concept>
