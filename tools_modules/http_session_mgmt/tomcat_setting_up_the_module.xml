<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="tomcat_setting_up_the_module">
	<title>Setting Up the HTTP Module for Tomcat</title>
	<shortdesc>To use the <keyword keyref="product_name"/> HTTP module with Tomcat application
		servers, you will need to modify Tomcat's <codeph>server.xml</codeph> and
			<codeph>context.xml</codeph> files.</shortdesc>
	<conbody>
		<p>Configuration is slightly different depending on the topology you are setting up. Refer
			to <xref href="common_gemfire_topologies.xml#common_gemfire_topologies" type="concept"
				format="dita" scope="local"/> for more information. </p>
		<section id="section_20294A39368D4402AEFB3D074E8D5887"><title>Peer-to-Peer Setup</title><image
				id="image_bsm_2gf_sv" href="../../images_svg/http_module_p2p_with_locator.svg"
				/><p>To run <keyword keyref="product_name"/> in a peer-to-peer configuration, add
				the following line to Tomcat's <codeph>$CATALINA_HOME$/conf/server.xml</codeph>
				within the <codeph>&lt;Server&gt;</codeph> tag:
				</p><codeblock>&lt;Listener className="com.gemstone.gemfire.modules.session.catalina.
                         PeerToPeerCacheLifecycleListener"
		locators="localhost[10334]" /></codeblock><p>Depending
				on the version of Tomcat you are using, add one of the following lines to
					<codeph>$CATALINA_HOME$/conf/context.xml</codeph> within the
					<codeph>&lt;Context&gt;</codeph> tag: </p><p>For Tomcat 6.0:
				</p><codeblock>&lt;Manager className="com.gemstone.gemfire.modules.session.catalina.
                         Tomcat6DeltaSessionManager"/&gt; </codeblock><p>For
				Tomcat 7.0 and above:
			</p><codeblock>&lt;Manager className="com.gemstone.gemfire.modules.session.catalina.
                         Tomcat7DeltaSessionManager"/&gt; </codeblock></section>
		<section id="section_B0CEBE93564540DBA165E0F7A10FDC0B"><title>Client/Server Setup</title><image
				id="image_aqn_jjf_sv" href="../../images_svg/http_module_cs_with_locator.svg"/><p>To
				run <keyword keyref="product_name"/> in a client/server configuration, the
				application server will operate as a <keyword keyref="product_name"/> client. To do
				this, add the following line to <codeph>$CATALINA_HOME$/conf/server.xml</codeph>
				within the <codeph>&lt;Server&gt;</codeph> tag:
				</p><codeblock>&lt;Listener className="com.gemstone.gemfire.modules.session.catalina.
                         ClientServerCacheLifecycleListener"/&gt;</codeblock><p>Depending
				on the version of Tomcat you are using, add one of the following lines to
					<codeph>$CATALINA_HOME$/conf/context.xml</codeph> within the
					<codeph>&lt;Context&gt;</codeph> tag: </p><p>For Tomcat 6.0:
				</p><codeblock>&lt;Manager className="com.gemstone.gemfire.modules.session.catalina.
                         Tomcat6DeltaSessionManager"/&gt; </codeblock><p>For
				Tomcat 7.0 and above:
				</p><codeblock>&lt;Manager className="com.gemstone.gemfire.modules.session.catalina.
                         Tomcat7DeltaSessionManager"/&gt; </codeblock><p>The
				application server operates as a <keyword keyref="product_name"/> client in this
				configuration. With a similar environment to this example that is for a
				client/server set
				up,</p><codeblock>TC_VER=tomcat-8.0.30.C.RELEASE
INSTANCE=geode-cs
CLASSPATH=$PWD/$INSTANCE/lib/geode-modules-1.0.0-incubating.M2-SNAPSHOT.jar:\
$PWD/$INSTANCE/lib/geode-modules-tomcat7-1.0.0-incubating.M2-SNAPSHOT.jar:\
$PWD/$TC_VER/lib/servlet-api.jar:\
$PWD/$TC_VER/lib/catalina.jar:\
$PWD/$TC_VER/lib/tomcat-util.jar:\
$PWD/$TC_VER/bin/tomcat-juli.jar</codeblock><p>start
				the server using
			<codeph>gfsh</codeph>:</p><codeblock>$ gfsh start server --name=server1 --locators=localhost[10334] --server-port=0 \
  --classpath=$CLASSPATH</codeblock></section>
		<section id="section_2B97047AB30A4C549D91AD258657FBA6">
			<title>Starting the Application Server</title>
			<p>Once you've updated the configuration, you are now ready to start your tc Server or
				Tomcat instance. Refer to your application server documentation for starting the
				application server. Once started, <keyword keyref="product_name"/> will
				automatically launch within the application server process. </p>
			<note><keyword keyref="product_name"/> session state management provides its own
				clustering functionality. If you are using <keyword keyref="product_name"/>, you
				should NOT turn on Tomcat clustering as well. </note>
		</section>
		<section id="section_3E186713737E4D5383E23B41CDFED59B">
			<title>Verifying that <keyword keyref="product_name"/> Started</title>
			<p>You can verify that <keyword keyref="product_name"/> has successfully started by
				inspecting the Tomcat log file. For example: </p>
			<codeblock>Nov 8, 2010 12:12:12 PM
com.gemstone.gemfire.modules.session.catalina.ClientServerCacheLifecycleListener
createOrRetrieveCache
INFO: Created GemFireCache[id = 2066231378; isClosing = false; 
   created = Mon Nov 08 12:12:12 PDT 2010; server = false; 
   copyOnRead = false; lockLease = 120; lockTimeout = 60]</codeblock>
			<p>Information is also logged within the <keyword keyref="product_name"/> log file, which by
				default is named <codeph>gemfire_modules.log</codeph>. </p>
		</section>
	</conbody>
</concept>
