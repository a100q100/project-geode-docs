<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/dtd/concept.dtd">
<concept id="changing_gemfire_default_cfg">
	<title>Changing Default Configuration of the Hibernate Cache Module</title>
	<shortdesc>To edit <keyword keyref="product_name"/> configuration information (such as how
		members locate each other), you can add <keyword keyref="product_name"/> properties to
		Hibernate's <codeph>hibernate.cfg.xml</codeph> file. </shortdesc>
	<conbody>
		<p>When adding properties, use the following syntax: </p>
		<codeblock>&lt;property name="gemfire.PROPERTY_NAME"&gt;PROPERTY_VALUE&lt;/property&gt;</codeblock>
		<p>In the preceding code snippet, <codeph>PROPERTY_NAME</codeph> is the property name and
				<codeph>PROPERTY_VALUE</codeph> is the property value. The list of configurable
			system properties include any of the properties that can be specified in <keyword
				keyref="product_name"/>'s <codeph>gemfire.properties</codeph> file. The property
			changes associated with the most common configurations are described below. </p>
		<section id="changing_gemfire_topology">
			<title>Changing the <keyword keyref="product_name"/> Topology</title>
			<p>By default, the topology is set for a peer-to-peer configuration rather than a
				client/server configuration. To use the peer-to-peer configuration, you don't have
				to make any changes. If you want to change the configuration to a client/server
				topology, alter this line of the Hibernate configuration file to be: </p>
			<codeblock>&lt;property name="gemfire.cache-topology"&gt;client-server&lt;/property&gt;</codeblock>
			<p>Since the Hibernate process operates as a <keyword keyref="product_name"/> client in
				this configuration, you must manually launch a <keyword keyref="product_name"/>
				cache server. Do this after starting the locator. Make sure the Hibernate jar and
				the <keyword keyref="product_name"/> modules jar are in the classpath, along with
				any dependencies. This command to start the server assumes that gfsh is in your path
				and sets the classpath on the command line needs to be altered to fill in the path
				to the directory in which contains the Hibernate jar files and correct the names of
				the jar files: </p>
			<codeblock>$ gfsh start server \
--name=server1 \
--locators=localhost[10334] \
--server-port=0 \
--classpath=<i>path/to/hibernate-jars</i>/geode-modules-1.0.0.jar:\
<i>path/to/hibernate-jars</i>/geode-modules-hibernate-1.0.0.jar</codeblock>
		</section>
		<section id="changing_p2p_region_atts">
			<title>Changing Peer-to-Peer Region Attributes</title>
			<p>You can change the region attributes from within the <codeph>hibernate.cfg.xml</codeph> file
				using the same region shortcuts specified in <xref
					href="../../basic_config/data_regions/region_shortcuts.xml" type="concept"
					format="dita" scope="local"/>.  </p>
			<codeblock>&lt;property name="gemfire.default-region-attributes-id"&gt;
  REGION_ATTRIBUTE
&lt;/property&gt; </codeblock>
			<p>In this example, <codeph>REGION_ATTRIBUTE</codeph> can be any of the pre-defined
				region shortcuts. By default, this is REPLICATE_HEAP_LRU. Other available region
				shortcuts include: REPLICATE, REPLICATE_PERSISTENT, PARTITION, PARTITION_PERSISTENT,
				PARTITION_REDUNDANT, PARTITION_REDUNDANT_PERSISTENT. If you plan to configure a
				region for persistence, refer to <xref format="dita"
					href="changing_gemfire_default_cfg.xml#changing_gemfire_default_cfg/turning_on_persistence"
					scope="local">Turning On Persistence</xref>. </p>
			<p>You can also control the region type on a per-entity basis using the following code: </p>
			<codeblock>&lt;property name="gemfire.region-attributes-for: com.foo.Bar"&gt;
  REGION_ATTRIBUTE
&lt;/property&gt; </codeblock>
			<p>In this example, com.foo.Bar is the name of your class and REGION_ATTRIBUTE can be
				one of the region shortcuts. </p>
		</section>
		<section id="section_1AB292DC8D0B420DABFD2120A38FEDB4">
			<title> Changing Region Names </title>
			<p> By default, the <keyword keyref="product_name"/> Hibernate module puts entities in a
				region whose name is the fully qualified path of the entity. The module uses these
				region names to eagerly prefetch related entities. Therefore, we recommend that you
				do not change the default names of the regions that are created by Hibernate. </p>
		</section>
		<section id="changing_cs_region_atts">
			<title>Changing Client/Server Region Attributes</title>
			<p>When using a client/server configuration, the default region attribute for the
					<keyword keyref="product_name"/> servers is a PARTITION region. This means that
				the data is partitioned across the pool of <keyword keyref="product_name"/> servers.
				You can modify this behavior using the same instructions specified in <xref
					format="dita"
					href="changing_gemfire_default_cfg.xml#changing_gemfire_default_cfg/changing_p2p_region_atts"
					scope="local">Changing Peer-to-Peer Region Attributes</xref>. </p>
			<p>In addition to the region attribute of the servers, you can also modify the region
				attributes for the <keyword keyref="product_name"/> client, which is the process
				running Hibernate. By default this region is set to PROXY. This means that the
				client will not cache data. </p>
			<p>You can change the client region attributes from within the hibernate.cfg.xml file
				using the same client region shortcuts specified in <xref
					href="../../basic_config/data_regions/region_shortcuts.xml"
					type="concept" format="dita" scope="local"
					><?xm-replace_text Region Shortcuts and Custom Named Region Attributes?></xref>. </p>
			<codeblock>&lt;property name="gemfire.default-client-region-attributes-id"&gt;
  CLIENT_REGION_ATTRIBUTE
&lt;/property&gt; </codeblock>
			<p>In this example, CLIENT_REGION_ATTRIBUTE can be any of the pre-defined region
				shortcuts. By default, this is PROXY. If you would like the client to keep a local
				cache of recently used data, change the region to CACHING_PROXY. </p>
			<p>You can also control the client region type on a per-entity basis using the following
				code: </p>
			<codeblock>&lt;property name="gemfire.client-region-attributes-for: com.foo.Bar"&gt;
  CLIENT_REGION_ATTRIBUTE
&lt;/property&gt; </codeblock>
			<p>In this example, com.foo.Bar is the name of your class and CLIENT_REGION_ATTRIBUTE
				can be one of the client region shortcuts. </p>
		</section>
		<section id="turning_on_persistence">
			<title>Turning On Persistence</title>
			<p>If you change the region type to any one of the persistent modes (such as
				PARTITION_PERSISTENT and REPLICATE_PERSISTENT), cache data will get stored into the
				current working directory. To change this location, supply disk storage information
				in <keyword keyref="product_name"/>'s <codeph>cache.xml</codeph> configuration file.
				For example: </p>
			<codeblock>&lt;cache&gt;
  &lt;!-- define a disk store with a couple of directories. --&gt;
  &lt;!-- All data logs are stored here --&gt;
 &lt;disk-store name="CacheDataRepository"&gt;
  &lt;disk-dirs&gt;
    &lt;disk-dir&gt;c:\cache_data&lt;/disk-dir&gt;
    &lt;disk-dir dir-size="20480"&gt;d:\cache_data&lt;/disk-dir&gt;
  &lt;/disk-dirs&gt;
 &lt;/disk-store&gt;

 &lt;!-- now change the predefined region attributes to use this disk store --&gt; 
 &lt;region-attributes id="MYAPP_PARTITION_PERSISTENT" 
      ref-id="PARTITION_PERSISTENT"&gt;
   &lt;disk-store&gt;CacheDataRepository&lt;/disk-store&gt;
 &lt;/region-attributes&gt;
&lt;/cache&gt; 
</codeblock>
			<p>This example creates a 20480 MB data repository in the <codeph>d:\cache_data</codeph>
				subdirectory. It also defines a region attribute called MYAPP_PARTITION_PERSISTENT,
				which is derived from the PARTITION_PERSISTENT region definition. </p>
			<p>You must also change Hibernate's <codeph>hibernate.cfg.xml</codeph> file to point to
				this xml file and to reference this particular region definition: </p>
			<codeblock>&lt;property name="gemfire.default-region-attributes-id"&gt;  
  MYAPP_PARTITION_PERSISTENT
&lt;/property&gt; 
&lt;property name="gemfire.cache-xml-file"&gt;
  c:\gemfire_cache.xml
&lt;/property&gt; </codeblock>
		</section>
		<section id="section_6F67CECB091948129081FDD34B892F91">
			<title>
				<b>Caching Query Results</b>
			</title>
			<p> In a Hibernate application, the caching of query results is recommended for queries
				that are run frequently with the same parameters. However, most applications using
				Hibernate do not benefit from query results caching because Hibernate will
				invalidate cached results when even a single entity involved in the query is
				updated. For example, suppose that a query on the Person entity is cached. As soon
				as any instance of Person is updated, created or deleted, Hibernate will invalidate
				this query because it cannot predict the impact of the change on the cached query
				results. Therefore, the <keyword keyref="product_name"/> Hibernate Cache Module does
				not distribute query results to other <keyword keyref="product_name"/> member
				caches. The query results are always cached only in the <keyword
					keyref="product_name"/> cache local to the Hibernate session. </p>
		</section>
		<section id="section_E884BF4251D6494695408B30D1F350B1">
			<title>Remapping the Hibernate EnumType with the <keyword keyref="product_name"/>
				EnumType</title>
			<p> Due to an issue with Hibernate in a client-server topology, application classes must
				be present on the <keyword keyref="product_name"/> cache server when a Hibernate
				application uses annotations. If you do not want to place the application classes on
				the <keyword keyref="product_name"/> cache server, you can modify the Hibernate
				configuration to use the
					<codeph>com.gemstone.gemfire.modules.hibernate.EnumType</codeph> in place of
					<codeph>org.hibernate.type.EnumType</codeph>. </p>
			<p>To configure Hibernate to use the <keyword keyref="product_name"/> EnumType, modify
					<codeph>hibernate.cfg.xml</codeph> to add a property for the mapping. For
				example:  </p>
			<codeblock>&lt;property name="myEnum"&gt;
    &lt;type name="<b>com.gemstone.gemfire.modules.hibernate.EnumType</b>"&gt;
    &lt;param name="enumClass"&gt;com.mycompany.MyEnum&lt;/param&gt;
   &lt;/type&gt;
&lt;/property&gt;
</codeblock>
		</section>
	</conbody>
</concept>
