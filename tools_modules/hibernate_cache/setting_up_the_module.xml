<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/dtd/concept.dtd">
<concept id="settup_up_the_module">
	<title>Setting Up the <keyword keyref="product_name"/> Hibernate Cache Module</title>
	<shortdesc>Edit the <codeph>hibernate.cfg.xml</codeph> file to use the Hibernate Cache module. </shortdesc>
	<conbody>
		<ol id="ol_1F2ED24E071E44A68B23AC9EDEDD3391">
			<li id="li_4F25C5224D0244389F9132357F82101F">
				<p><b>Turn on L2 Cache</b>
				</p>
				<p>In the <codeph>hibernate.cfg.xml</codeph> file, turn on the L2 cache and identify the
						<keyword keyref="product_name"/> locator(s): </p>
				<codeblock>&lt;property name="hibernate.cache.use_second_level_cache"&gt;true&lt;/property&gt;
&lt;property name="gemfire.locators"&gt;host1[port1],host2[port2]&lt;/property&gt;</codeblock>
				<p>Change <codeph>host1</codeph> and <codeph>host2 </codeph> to the hostnames (or IP
					addresses) for each of the locators; <codeph>port1</codeph> and <codeph>port2
					</codeph>are the ports for each of the locators.</p>
			</li>
			<li id="li_315E9E0DAB474DB5827AE21FBDF3E16F">
				<p><b>Set Region Factory or Cache Provider</b>
				</p>
				<p>Associate the region factory class with GemFireRegionFactory: </p>
				<codeblock>&lt;property name="hibernate.cache.region.factory_class"&gt;
  com.gemstone.gemfire.modules.hibernate.GemFireRegionFactory
&lt;/property&gt; 
</codeblock>
			</li>
			<li id="li_determine_cache_usage_mode"><b>Determine Cache Usage Mode</b>
				<p>Determine the cache usage mode for the entities in each region. There are four
					types of usage modes: </p>
				<simpletable relcolwidth="1* 5*" id="simpletable_7D38EEF1A476471CB9B26FD9B18B109E">
					<sthead>
						<stentry>Mode</stentry>
						<stentry>Description</stentry>
					</sthead>
					<strow>
						<stentry><codeph>read-only</codeph></stentry>
						<stentry>This mode is used when you do not plan on modifying the data
							already stored in your persistent storage.</stentry>
					</strow>
					<strow>
						<stentry><codeph>read-write</codeph></stentry>
						<stentry>This mode is used when you plan to both read from and write to your
							data.</stentry>
					</strow>
					<strow>
						<stentry><codeph>nonstrict-read-write</codeph></stentry>
						<stentry>This mode is a special read/write mode that has faster write
							performance; however, only use this mode if no more than one client will
							update content at a time.</stentry>
					</strow>
					<strow>
						<stentry><codeph>transactional</codeph></stentry>
						<stentry>This mode allows for transaction-based data access.</stentry>
					</strow>
				</simpletable>
			</li>
			<li id="li_306E830932E7481196FA0B60EB6CB4A6">
				<p><b>Set Cache Usage Mode</b>
				</p>
				<p>The usage mode can either be set using the hibernate-mapping file or through Java
					annotations.  </p>
				<ul id="ul_tlq_drz_dw">
					<li>
						<p>To set the mode with the hibernate-mapping file, refer to this example: </p>
						<codeblock>    
    &lt;hibernate-mapping package="PACKAGE"&gt;
      &lt;class name="ENTITY_NAME" ...&gt;
        &lt;cache usage="USAGE_MODE"/&gt;
        ...
      &lt;/class&gt;
    &lt;/hibernate-mapping&gt;
 </codeblock>
						<p>In this example, <codeph>PACKAGE</codeph> is the name of the entity
							package, <codeph>ENTITY_NAME</codeph> is the name of your entity, and
								<codeph>USAGE_MODE</codeph> is the chosen usage mode from the table
							given above. Refer to the <xref href="http://hibernate.org/docs"
								scope="external" format="html">Hibernate documentation</xref> for
							further information. </p>
					</li>
					<li>
						<p>To set the mode using annotations, your class definition should look
							something like this example which specifies the
								<codeph>read-only</codeph> usage mode: </p>
						<codeblock>
import org.hibernate.annotations.Cache; 
import org.hibernate.annotations.CacheConcurrencyStrategy; 

@Entity 
@Cacheable
@Cache(
   region = 'REGION_NAME',
   usage = CacheConcurrencyStrategy.READ_ONLY
)

public class MyClass implements Serializable { ... }</codeblock>
					</li>
				</ul>
			</li>
			<li><b>Start a
				Locator</b><codeblock>$ gfsh start locator â€“-name=locator1</codeblock></li>
			<li id="li_C4D07349E34942419BD525189D1B1B14">
				<p><b>Start Hibernate</b>
				</p>
				<p>You are now ready to build, deploy, and run your Hibernate application, which
					will also launch <keyword keyref="product_name"/>. See the <xref
						href="http://hibernate.org/docs" scope="external" format="html">Hibernate
						website documentation</xref> for further information about performing these
					actions. </p>
			</li>
			<li id="li_D9003EAD2ADA42ADA8C50357CAEFBD91">
				<p><b>Verify that <keyword keyref="product_name"/> Started Successfully</b>
				</p>
				<p>Similar to Hibernate, <keyword keyref="product_name"/> uses Simple Logging Facade
					for Java (SLF4J) to log messages. Upon successful startup, <keyword
						keyref="product_name"/> will log the following message: </p>
				<codeblock>2010-11-15 INFO [com.gemstone.gemfire.modules.hibernate.GemFireRegionFactory] - 
    &lt;Initializing Apache Geode Modules Version 1.1&gt;

</codeblock>
				<p>SLF4J can send this and other <keyword keyref="product_name"/> log messages to
					several logging frameworks. Refer to the <xref format="html"
						href="http://www.slf4j.org/" scope="external">SLF4J</xref> website for
					additional information. </p>
			</li>
		</ol>
	</conbody>
</concept>
