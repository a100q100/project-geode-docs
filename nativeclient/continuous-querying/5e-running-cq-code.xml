<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept
	id="security">
	<title
		id="title_9717E51087B346988389138843E158C4">Running the Continuous Query
		Code</title>
	<shortdesc>Create your CQ from an instance of the QueryService . Once
		created, the CQ is maintained primarily through the CqQuery interface.
		The following two C++ and C# examples show the basic calls in the CQ
		life cycle. </shortdesc>
	<conbody>
		<example
			id="example_867B4DDAB1044B18B941968FCEA8253B">
			<title>CQ Creation, Execution, and Close (C++)</title>
				<codeblock>// Get cache and qrySvcPtr - refs to local cache and QueryService
// Create client /tradeOrder region configured to talk to the server
// Create CqAttribute using CqAttributeFactory
CqAttributesFactory cqf;
// Create a listener and add it to the CQ attributes
// callback defined below
CqListenerPtr tradeEventListener (new TradeEventListener());
QueryServicePtr qrySvcPtr = cachePtr-&gt;getQueryService();" cqf.addCqListener(tradeEventListener);
CqAttributesPtr cqa = cqf.create();
// Name of the CQ and its query
char* cqName = "priceTracker";
char* queryStr = "SELECT * FROM /tradeOrder t where t.price &gt; 100.00";
// Create the CqQuery
CqQueryPtr priceTracker = qrySvcPtr-&gt;newCq(cqName, queryStr, cqa); try {
  // Execute CQ
  priceTracker-&gt;execute();
} catch (Exception&amp; ex){
  ex.printStackTrace();
}
  // Now the CQ is running on the server, sending CqEvents to the listener
  . . .
}
// End of life for the CQ - clear up resources by closing
priceTracker-&gt;close()</codeblock>
		</example>
		<example
			id="example_D5BBA3F741D14365AF2911D533BDF710">
			<title>CQ Creation, Execution, and Close (C# .NET)</title>
				<codeblock>// Get cache and queryService - refs to local cache and QueryService
// Create client /tradeOrder region configured to talk to the server
// Create CqAttribute using CqAttributeFactory
CqAttributesFactory cqf = new CqAttributesFactory();
// Create a listener and add it to the CQ attributes
//callback defined below
ICqListener tradeEventListener = new TradeEventListener();
cqf.addCqListener(tradeEventListener);
CqAttributes cqa = cqf.create();
// Name of the CQ and its query
String cqName = "priceTracker ";
String queryStr = "SELECT * FROM /tradeOrder t where t.price &gt;100.00 ";
QueryService queryService = cache.GetQueryService();
// Create the CqQuery
CqQuery priceTracker = queryService.newCq(cqName, queryStr, cqa, true);
try {
  // Execute CQ
  priceTracker.execute();
  }catch (Exception ex){
  //handle exception
  }
// Now the CQ is running on the server, sending CqEvents to the listener
// . . .
}
// End of life for the CQ - clear up resources by closing
priceTracker.close();</codeblock>
		</example>
	</conbody>
</concept>
