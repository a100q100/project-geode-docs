<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept
	id="security">
	<title
		id="title_9717E51087B346988389138843E158C4">Importing and Using Object Classes</title>
	<conbody>
		<p>To facilitate the specification of type in variable type declarations and in typecasting
			expressions, a query string can have <codeph>IMPORT</codeph> statements preceding the
			declarations. By using <codeph>IMPORT</codeph> in the query string, the client can tell
			the cache server about the class definition of the serialized object that is present in
			the cache server region. </p>
		<p>The only place you can have a package name in a query is in an import statement. These
			are valid: </p>
		<codeblock>IMPORT com.myFolder.Portfolio;
IMPORT com.myFolder.Portfolio AS MyPortfolio;</codeblock>
		<p>The first form of the import statement allows Portfolio to be used as the name of the
			class, <codeph>com.myFolder.Portfolio</codeph>. The second form provides an alternative
			class name, MyPortfolio, to be used. This is useful when a class name is not unique
			across packages and classes in a single query. </p>
		<example
			id="example_296CF5CCB5254C41ADD353B159DF8964">
			<title>Using Imported Classes</title>The following example uses imported classes:
			<codeblock>IMPORT com.commonFolder.Portfolio;
IMPORT com.myFolder.Portfolio AS MyPortfolio;
SELECT DISTINCT mpflo.status
FROM /portfolios pflo TYPE Portfolio,
/myPortfolios mpflo TYPE MyPortfolio,
WHERE pflo.status = 'active' and mpflo.id = pflo.id</codeblock>This
			entire query string must be passed to the query engine, including the
				<codeph>IMPORT</codeph> statements. <p>Common type names do not require an
					<codeph>IMPORT</codeph> statement. The following table lists the types that are
				defined by the system and the Java types they represent. </p>
		</example>
	</conbody>
</concept>
