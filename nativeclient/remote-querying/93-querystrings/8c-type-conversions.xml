<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept
	id="security">
	<title
		id="title_9717E51087B346988389138843E158C4">Type Conversions</title>
	<shortdesc>Java rules within a query string require the query processor to perform implicit
		conversions and promotions under certain cases in order to evaluate expressions that contain
		different types. </shortdesc>
	<conbody>
		<p>The query processor performs binary numeric promotion, method invocation conversion, and
			temporal type conversion. </p>
		<section
			id="section_A445225717A646478C656DA8AB8334CD">
			<title>Binary numeric promotion</title>
			<p> Binary numeric promotion widens all operands in a numeric expression to the widest
				representation used by any of the operands. In each expression, the query processor
				applies the following rules in order: </p>
			<ul
				id="ul_98B7A67A60A44A52BABE7DE5564A52C9">
				<li id="li_BF14F4DD8C7743AB8E3EE5BF0D0AB708"> If either operand is of type double, the other is
					converted to double. </li>
				<li id="li_9AD27B1B8D1E4D5CA03EDC85C1BB89D4"> If either operand is of type float, the other is
					converted to float. </li>
				<li id="li_F8375B290E0641A695503FB27617EF19"> If either operand is of type long, the other is
					converted to long. </li>
				<li id="li_0790E60686F84BB887295C0535E52F92"> Both operands are converted to type int. </li>
			</ul>
			<p>The query processor performs binary numeric promotion on the operands of the
				following operators:  </p>
			<ul
				id="ul_40DA099A2EDC4D1BA12CB227A9C987ED">
				<li
					id="li_243D569EF0BF498E832AF8B3C92EE245">comparison operators &lt;, &lt;=, &gt;,
					and &gt;= </li>
				<li
					id="li_7EE64DF2D1BB4B53BCB48A30712A6818">equality operators = and &lt;&gt; </li>
			</ul>
			<p>This is essentially the same behavior as in Java, except that chars are not
				considered to be numeric in the native client query language. </p>
		</section>
		<section
			id="section_ED0CF17A3119452D8A6FCB95FEEBF3B3">
			<title>Method invocation conversion </title>
			<p>Method invocation conversion in the query language follows the same rules as Java method
				invocation conversion, except that the query language uses runtime types instead of
				compile time types, and handles null arguments differently than in Java. One aspect
				of using runtime types is that an argument with a null value has no typing
				information, and so can be matched with any type parameter. When a null argument is
				used, if the query processor cannot determine the proper method to invoke based on
				the non-null arguments, it throws an <codeph>AmbiguousNameException</codeph>. For
				more information on method invocation in query strings, see <xref
					href="8a-method-invocation.xml#security" type="concept" format="dita"
					scope="local"> Method Invocation</xref>. </p>
		</section>
		<section
			id="section_940BA11A53204B3985B955102CB52681">
			<title>Temporal type conversion </title>
			<p>The temporal types that the query language supports on the cache server include the Java types
					<codeph>java.util.Date</codeph> and <codeph>java.sql.Date</codeph>, which are
				treated the same and can be freely compared and used in indexes. When compared with
				each other, these types are all treated as nanosecond quantities. </p>
		</section>
	</conbody>
</concept>
