<?xml version="1.0"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<!-- Created with XMetaL (http://www.xmetal.com) -->
<concept id="concept_3DE42CA33684403D8C3730E99C882B55"> 
  <title>Implementing User-Defined Objects in Java Clients</title> 
  <shortdesc>There are two methods currently available for implementing a
	 user-defined object: in a Java client that works with C++ clients: 
	 <codeph>Instantiator.register</codeph> and 
	 <codeph>DataSerializable</codeph> .
  </shortdesc> 
  <conbody>
	 <section id="section_8AC81EE12D8F406DB7602AEAFFD33F2B">
		<title>Instantiator.register</title>
		<p>With the 
		  <codeph>Instantiator.register</codeph> method, a client sends a 
		  <codeph>RegistrationMessage</codeph> to every Java VM in its
		  distributed system. The message announces the mapping between a user-defined
		  classId and class name. The other JVMs can deserialize the byte array with the
		  correct class. 
		</p>
		<p>If two clients are in different distributed systems, then a 
		  <codeph>RegistrationMessage</codeph> cannot be sent between them. For
		  example: a 
		  <codeph>put</codeph> made by a client in one distributed system will
		  hang when a client in another distributed system performs a get in pure Java
		  mode. Similarly, a 
		  <codeph>put</codeph> made by a C++ client will cause a Java client to
		  hang.
		</p>
	 </section>
	 <section id="section_3F42D06A70644030869D381D03D45CC8">
		<title>DataSerializable</title>
		<p>Using the 
		  <codeph>DataSerializable</codeph> method, the user-defined object is
		  serialized into the following byte array:
		  <codeblock>45 &lt;2-byte-length&gt; &lt;class-name&gt;</codeblock>
		</p>
		<p>A Java client can deserialize the byte array, but a C++ client cannot
		  convert the Java class name to a C++ class name.
		</p>
	 </section>
	 <section id="section_F3F13E1732EB4995B2C78B0BB1ED18BB">
		<title>Implementation</title>
		<p>The 
		  <codeph>DataSerializable</codeph> method does not support using a
		  nested object, while 
		  <codeph>Instantiator.register</codeph> does support the use of nested
		  objects. A workaround is to let each Java client manually initiate an object
		  for each possible user object class a C++ client provides, using the following
		  code:
		  <codeblock>User u = new User("", 0);</codeblock> 
		</p>
		<p>See XREF See Implementing an Embedded Object (Java). for a code sample
		  that shows how to set up user object classes in a Java client.
		</p>
	 </section>
  </conbody> 
</concept>
