<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="examples">
  <title id="title_AAEC7ADA19D141A0BBE4DCB5E8B0EA09">Examples of Delta Propagation</title>

  <conbody id="conbody_7E72339B46084F58B3C4135A21B767D8">
    <p id="p_082E672719224D05BC4DFDB21464A1E5">In this example, the feeder client is connected to the first server,
    and the receiver client is connected to the second. The servers are peers
    to each other.</p>

    <fig id="fig_09CF542F4AB2471FB67287A05305DAA2">
      <title id="title_3D6B86D16E2E4FB095CDFC6C7049B4FE">Example of Delta Propagation in the Client/Server</title>

      <image href="../common/images/delta-propagation-in-client-server.gif" id="image_6A18D7CE07C243D6B03C5EE82786C36C"/>

      <p id="p_9370AB01678E4F9A94314F7D2A57343E">These are the main operations shown in the example:</p>

      <ol>
        <li id="li_6EA1CCE1715E4C32A710D1DB75D5AC44">In the Feeder client, the application updates the entry object and
        puts the entry. In response to the <codeph>put</codeph>, GemFire calls
        <codeph>hasDelta</codeph>, which returns true, so GemFire calls
        toDelta and forwards the extracted delta to the server. If
        <codeph>hasDelta</codeph> returned false, GemFire would distribute the
        full entry value.</li>

        <li id="li_A026B147B9254DBBA34676FEBADAE0FB">In Server1, GemFire applies the delta to the cache, distributes
        the received delta to the serverâ€™s peers, and forwards it to any other
        clients with interest in the entry (there are no other clients to
        Server1 in this example).</li>

        <li id="li_4EDFA265A68B4E39AC232F539807ADD8">In Server2, GemFire applies the delta to the cache and forwards it
        to its interested clients, which in this case is just Receiver client.
        </li>
      </ol>
    </fig>

    <section id="section_C6CB9DB1EB684CD48A38002EF59E54F0"><title id="title_9464BA08420B4998955721C07CF8E61A">Client Example Files</title><p id="p_026EE1C24D1F4A31B90377F9440CC856">These example files, from
    the product <codeph>quickstart</codeph> examples, show the basic approach
    to programming a delta propagation implementation for an entry value
    object, named <codeph>DeltaExample</codeph> in this example. </p><fig id="fig_5DECD30863014DD78C9A24CB66615D75">
        <title>XML file used for the examples</title>

        <codeblock id="codeblock_8EB7DC61248042CA940D2F4DE0BB439D">&lt;cache&gt;
  &lt;region name="root" refid="CACHING_PROXY"&gt;
    &lt;region-attributes cloning-enabled="true" pool-name="examplePool"/&gt;
  &lt;/region&gt;
  &lt;pool name="examplePool" subscription-enabled="true" server-group="ServerGroup1"&gt;
    &lt;locator host="localhost" port="34756"/&gt;
  &lt;/pool&gt;
&lt;/cache&gt;</codeblock>
      </fig><fig id="fig_CD91CEA711254985B75BDEBD85A328DC">
        <title id="title_29897AF45F4B41529F73FE1A71DE57F5">Delta Example Implementation (C# .NET)</title>

        <codeblock id="codeblock_8854AAE25B134AD398D4DEDF703E82B0">using System;
using GemStone.GemFire.Cache;

namespace GemStone.GemFire.Cache.QuickStart
{
  public class DeltaExample : IGFDelta, IGFSerializable, ICloneable
    {
      // data members
      private Int32 m_field1;
      private Int32 m_field2;
      private Int32 m_field3;
 
      // delta indicators
      private bool m_f1set;
      private bool m_f2set;
      private bool m_f3set;
 
      public DeltaExample(Int32 field1, Int32 field2, Int32 field3)
      {
        m_field1 = field1;
        m_field2 = field2;
        m_field3 = field3;
        reset();
      }

      public DeltaExample()
      {
        reset();
      }

      public DeltaExample(DeltaExample copy)
      {
        m_field1 = copy.m_field1;
        m_field2 = copy.m_field2;
        m_field3 = copy.m_field3;
        reset();
      }
 
      private void reset()
      {
        m_f1set = false;
        m_f2set = false;
        m_f3set = false;
      }

      public Int32 getField1()
      {
        return m_field1;
      }
      // REPEAT FOR OTHER FIELDS
 
      public void setField1(Int32 val)
      {
        lock(this)
        {
          m_field1 = val;
          m_f1set = true;
        }
      }
      // REPEAT FOR OTHER FIELDS
 
      public bool HasDelta()
      {
        return m_f1set || m_f2set || m_f3set;
      }

      public void ToDelta(DataOutput DataOut)
      {
        lock(this)
        {
          DataOut.WriteBoolean(m_f1set);
          if (m_f1set)
            {
              DataOut.WriteInt32(m_field1);
            }
          // REPEAT FOR OTHER FIELDS
 
          reset();
        }
      }

      public void FromDelta(DataInput DataIn)
      {
        lock(this)
        {
          m_f1set = DataIn.ReadBoolean();
          if (m_f1set)
            {
              m_field1 = DataIn.ReadInt32();
            }
          // REPEAT FOR OTHER FIELDS
 
        }
      }

      public void ToData(DataOutput DataOut)
      {
        DataOut.WriteInt32(m_field1);
        DataOut.WriteInt32(m_field2);
        DataOut.WriteInt32(m_field3);
      }

      public IGFSerializable FromData(DataInput DataIn)
      {
        m_field1 = DataIn.ReadInt32();
        m_field2 = DataIn.ReadInt32();
        m_field3 = DataIn.ReadInt32();
        return this;
      }

      public UInt32 ClassId
      {
        get
          {
            return 0x02;
          }
      }
      public UInt32 ObjectSize
      {
        get
          {
            UInt32 objectSize = 0;
            return objectSize;
          }
      }
 
      public static IGFSerializable create()
      {
        return new DeltaExample();
      }

      public Object Clone()
      {
        return new DeltaExample(this);
      }
    }
}</codeblock>
      </fig><fig id="fig_860387EBF88A48DA8BA5E4E4E1829968">
        <title id="title_E68C3D67F59441B48E8B6872C2B0761C">Delta Example Implementation (C++)</title>

        <codeblock id="codeblock_42968BE0A712499781C386D635A64D35">#ifndef __Delta_Example__
#define __Delta_Example__

#include &lt;gfcpp/GemfireCppCache.hpp&gt;

using namespace gemfire;

class DeltaExample: public Cacheable, public Delta
{

private:

  // data members
  int32_t m_field1;
  int32_t m_field2;
  int32_t m_field3;

  // delta indicators
  mutable bool m_f1set;
  mutable bool m_f2set;
  mutable bool m_f3set;

public:

  DeltaExample(int32_t field1, int32_t field2, int32_t field3) :
    m_field1(field1), m_field2(field2), m_field3(field3)
  {
    reset();
  }

  DeltaExample()
  {
    reset();
  }

  DeltaExample(DeltaExample * copy)
  {
    m_field1 = copy-&gt;m_field1;
    m_field2 = copy-&gt;m_field2;
    m_field3 = copy-&gt;m_field3;
    reset();
  }

  void reset() const
  {
    m_f1set = false;
    m_f2set = false;
    m_f3set = false;
  }

  int getField1()
  {
    return m_field1;
  }
  // REPEAT FOR OTHER FIELDS

  void setField1(int val)
  {
    lock();
    m_field1 = val;
    m_f1set = true;
    unlock();
  }
  // REPEAT FOR OTHER FIELDS

  virtual bool hasDelta()
  {
    return m_f1set || m_f2set || m_f3set;
  }

  virtual void toDelta(DataOutput&amp; out) const
  {
    lock();

    out.writeBoolean(m_f1set);
    if (m_f1set)
      {
        out.writeInt(m_field1);
      }
    // REPEAT FOR OTHER FIELDS

    reset();

    unlock();
  }

  virtual void fromDelta(DataInput&amp; in)
  {
    lock();

    in.readBoolean(&amp;m_f1set);
    if (m_f1set)
      {
        in.readInt(&amp;m_field1);
      }
    // REPEAT FOR OTHER FIELDS

    reset();

    unlock();
  }

  virtual void toData(DataOutput&amp; output) const
  {
    lock();
    output.writeInt(m_field1);
    output.writeInt(m_field2);
    output.writeInt(m_field3);
    unlock();
  }

  virtual Serializable* fromData(DataInput&amp; input)
  {
    lock();
    input.readInt(&amp;m_field1);
    input.readInt(&amp;m_field2);
    input.readInt(&amp;m_field3);
    unlock();
    return this;
  }

  virtual int32_t classId() const
  {
    return 2;
  }

  virtual uint32_t objectSize() const
  {
    return 0;
  }

  DeltaPtr clone()
  {
    return DeltaPtr(new DeltaExample(this));
  }

  virtual ~DeltaExample()
  {
  }

  static Serializable* create()
  {
    return new DeltaExample();
  }

  void lock() const { /* add your platform dependent syncronization code here */ }

  void unlock() const { /* add your platform dependent syncronization code here */ }
};
#endif</codeblock>
      </fig></section>
  </conbody>
</concept>
