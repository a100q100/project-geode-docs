<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept
	id="how-delta-propagation-works">
	<title
		id="title_193FB8B28E3F45658F6EA72EAAFE52A7">How Delta Propagation Works</title>
	<shortdesc><keyword keyref="product_name"/> propagates object deltas using methods that you program
		on the client side. The methods are in the delta interface, which you implement in your
		cached objects’ classes. </shortdesc>
	<conbody
		id="conbody_6CCA0FBD916C401DBD97EB617E4E7D3F">
		<p
			id="p_B344CECF6F3D404F96CCFE865923C29B">
			
		</p>
		<p>This figure shows delta propagation for a change to an entry with key,
			<codeph>k</codeph>, and value object, <codeph>v</codeph>. </p>
		<fig
			id="fig_C4846E7C4C0E4D6097736B5BFBBF93A7">
			<title
				id="title_297AACFAB8864685AD37910CBC3E4B98">Delta Propagation</title>
			<image
				alt="Delta Propagation"
				href="../common/images/delta-propagation.gif"
				placement="break"
				id="image_69D664D2A4344785A52AC2D492E4B557"/>
		</fig>
		<ol
			id="ol_54B48D0D010649E5BEB3CA7BE8143566">
			<li
				id="li_A6045C9BBA3E445197A4902A4F7FD2CA"><b>get operation</b>. The
					<codeph>get</codeph> works as usual; the cache returns the full entry object
				from the local cache or, if it is unavailable there, from a server cache or from a
				loader. </li>
			<li
				id="li_23140D529EB842A78A38AE307415C41F"><b>update methods</b>. You need to add code
				to the object’s update methods so that they save delta information for object
				updates, in addition to the work they were already doing. </li>
			<li
				id="li_C3A14A8CC38F4995A57DCE2337928B6F"><b>put operation</b>. The
					<codeph>put</codeph> works as usual in the local cache, using the full value,
				then calls <codeph>hasDelta</codeph> to check for deltas and
					<codeph>toDelta</codeph> to serialize the information. </li>
			<li
				id="li_00F8B6280DED4D71A005E4F143A907F7"><b>receipt of delta</b>.
					<codeph>fromDelta</codeph> extracts the delta information that was serialized by
					<codeph>toDelta</codeph> and applies it to the object in the local cache. The
				delta is applied directly to the existing value or to a clone, depending on how you
				configure it for the region. </li>
			<li
				id="li_C716F4911C4040508D30AA080620B9E2"><b>additional distributions</b>. As with
				full distributions, receiving members forward the delta according to their
				configurations and connections to other members. In the example, the server would
				forward the delta to its peers and its other clients as needed. Receiving members do
				not recreate the delta; <codeph>toDelta</codeph> is only called in the originating
				member. </li>
		</ol>
	</conbody>
</concept>
