<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="developing-linux">
	<title id="title_AC29CC3E829142CA807BD6D17A1D745E">Developing C++ Programs on Linux</title>
	<shortdesc>This section describes how to build and run a native client application on Linux. </shortdesc>
	<conbody id="conbody_CBDB21155DA54799AC64D7F75680BD16">
		<note> When compiling external projects or applications that are used or referenced by the
				<keyword keyref="product_name"/> native client, make sure that you compile them for
			the same target architecture as your native client installation. For example, if you
			installed the 64-bit (x86) version of the native client, compile your external projects
			for 64-bit (x86) architecture. </note>
		<section id="section_4AD6E18611AE42E9942C77DF91347768">
			<title>Step 1. Set Environment Variables</title>
			<p id="p_EF45D7A431CE4FED8C2E02CAA3D70FB1"> Set the native client environment variables
				on each Linux host. For each case, <varname>&lt;productDir></varname> is the path to
				the native client product directory. </p>
			<b>For Bourne and Korn shells (sh, ksh, bash)</b>
			<codeblock id="codeblock_F7D12678C7394CD2A31DB2CE3D973889">GFCPP=&lt;<i>productDir</i>&gt;;export GFCPP
PATH=$GFCPP/bin:$PATH;export PATH
LD_LIBRARY_PATH=$GFCPP/lib:$LD_LIBRARY_PATH;export LD_LIBRARY_PATH</codeblock>
		</section>
		<section id="section_EFE9D42B05B44F2F958054224BCC5F76">
			<title>Step 2. Compile C++ Clients and Dynamically Link Them to the GemFire
				Library</title>
			<p id="p_66CD7D1D9E3249F9AEE8E7626BE40AE5"> On Linux, the <codeph>g++</codeph> compiler
				is supported. To build and link a C++ client to GemFire on Linux, the compilation
				command line must include the arguments listed in the following table.</p>
			<table
					id="compiler-arguments-linux">
					<title id="title_82B429A4B3BF4C118DD672799DAB1071">Compiler Arguments
						(Linux)</title>
					<tgroup cols="2">
						<thead>
							<row>
								<entry>Argument </entry>
								<entry>Explanation </entry>
							</row>
						</thead>
						<tbody>
							<row id="row_321508A7FE6E450980B04D0E9AECBD65">
								<entry><codeph>-D_REENTRANT</codeph>
								</entry>
								<entry>Required to compile Linux programs in a thread-safe way.
								</entry>
							</row>
							<row id="row_F9DF546595F549B39D3A5442A7AA21ED">
								<entry><codeph>-m32</codeph> or <codeph>-m64</codeph></entry>
								<entry>Enables 32-bit or 64-bit compilation. </entry>
							</row>
							<row>
								<entry><codeph>-I$GFCPP/include</codeph>
								</entry>
								<entry>Specifies the native client <codeph>include</codeph>
									directory. </entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			<p id="p_9866CB3507E14907851CF95C7DBE15AD">The following table lists the linker switches
				that must be present on the command line when dynamically linking to the GemFire
				library.</p>
			<table id="table_216E9E87FBB44E39BE26388317F3ACE4">
					<title id="title_D0768692276147F3A3ADFE55289392FB">Linker Switches (Dynamically
						Linking on Linux)</title>
					<tgroup cols="2">
						<thead>
							<row id="row_127D77F0B9ED47A3AAD2A9129A8DAA53">
								<entry>Argument </entry>
								<entry>Explanation </entry>
							</row>
						</thead>
						<tbody>
							<row id="row_9477A3A6E7D14C4784FE497F1409EC5B">
								<entry><codeph>-rpath $GFCPP/lib</codeph>
								</entry>
								<entry>Tells the linker to look in <codeph>$GFCPP/lib</codeph> for
									libraries on which the native client library depends. </entry>
							</row>
							<row>
								<entry><codeph>-L$GFCPP/lib</codeph>
								</entry>
								<entry>Tells the linker where to find the named libraries. </entry>
							</row>
							<row>
								<entry><codeph>-o durableclient</codeph>
								</entry>
								<entry>Tells the linker to output an object file named
									'durableclient'. </entry>
							</row>
							<row id="row_C8F32775F5A24B268C514F8FF54050F7">
								<entry><codeph>-lgfcppcache</codeph>
								</entry>
								<entry>Links the native client C++ cache library to the compiled
									executable. </entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			<p id="p_591176B500934A2A9FBB521DDED50625">The following examples compile and link the
					<codeph>$GFCPP/SampleCode/quickstart/cpp/DurableClient.cpp</codeph> client to
				the <codeph>durableclient</codeph> output file. </p>
			<p>
				<b>Compiling and Dynamically Linking on Linux for 32-bit</b></p>
				<codeblock id="codeblock_5B5253E728B54BF39A199EA8BAC92C96">g++ \
-D_REENTRANT \
-03 \
-Wall \
-m32 \
-I$GFCPP/include \
cpp/DurableClient.cpp \
cpp/plugins/DurableCacheListener.cpp \
-o cpp/DurableClient \
-L$GFCPP/lib \
-Wl,-rpath,$GFCPP/lib \
-lgfcppcache</codeblock>
			<p>
				<b>Compiling and Dynamically Linking on Linux for 64-bit</b></p>
				<codeblock>g++ \
-D_REENTRANT \
-03 \
-Wall \
-m64 \
-I$GFCPP/include \
cpp/DurableClient.cpp \
cpp/plugins/DurableCacheListener.cpp \
-o cpp/DurableClient \
-L$GFCPP/lib \
-Wl,-rpath,$GFCPP/lib \
-lgfcppcache</codeblock>
		</section>
		<section id="section_60711FB51F0546D48C0BE84C1EB1D379">
			<title id="title_53BF1ACEC1DC416F9D9361EC9946D530">Step 3. Make Sure the Native Client Library
				Can Be Loaded</title>
			<p id="p_275AB71C257342D690B7B1FC52C2A240">When the C++ application is dynamically linked to the
				native client library, the library must be dynamically loadable. </p>
			<p>To ensure that the native client library is available for loading, make sure you have added
				the path <varname>productDir</varname><codeph>/lib</codeph> to the
					<varname>LD_LIBRARY_PATH</varname> environment variable, where
					<varname>productDir</varname> is the path to the <keyword keyref="product_name"
				/> product directory. </p>
		</section>
	</conbody>
</concept>
