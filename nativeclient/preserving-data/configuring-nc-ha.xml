<?xml version="1.0"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept
	id="concept_7CEFF513CED14397A385ED88F3287AF1">
	<title>Configuring Native Clients for High Availability</title>
	<shortdesc> Configure high availability by setting the pool attribute
			<codeph>subscription-redundancy</codeph> to the number of copies you want maintained. </shortdesc>
	<conbody>
		<p>A client maintains its queue redundancy level at the time of a primary server failure by
			connecting to additional secondary servers. </p>
		<section
			id="section_BC1693F33FA1448296C00220962EDDEE">
			<p>Native clients can specify the number of secondary servers where the client registers
				interest and maintains subscription channels, in addition to the subscription
				channel with the primary server. The secondary servers maintain redundant update
				queues for the client. If the primary server fails, a secondary becomes a primary to
				provide uninterrupted messaging to the client. If possible, another secondary is
				then initialized so the total number of secondaries is not reduced by the failover.
			</p>
		</section>
		<example
			id="example_D99DA49D1A3D48CA88FE5344DBC15DEB">
			<title> Setting the Server Redundancy Level in cache.xml</title>
			<p> This example sets one redundant server as failover backup to the primary server:</p>
				<codeblock>&lt;cache&gt;
   &lt;pool name="examplePool"
      subscription-enabled="true" subscription-redundancy="1"&gt;
      &lt;server host="java_servername1" port="java_port1" /&gt;
      &lt;server host="java_servername2" port="java_port2" /&gt;
   &lt;/pool&gt;
   &lt;region name = "ThinClientRegion1" &gt;
      &lt;region-attributes refid="CACHING_PROXY" pool-name="examplePool"/&gt;
   &lt;/region&gt;
&lt;/cache&gt;</codeblock>
		</example>
		<example
			id="example_FF8A8A2CBC294FDE88D0866D95918416">
			<title>Setting the Server Redundancy Level Programmatically</title>
			<p>You can set the redundancy level programmatically. This example creates a client
				cache with two redundant cache servers configured in addition to the primary server. </p>
			<p>The server redundancy level can be configured using the pool API. For more
				information about the pool API, see <xref
					href="../connection-pools/connection-pools.xml#using-connection-pools"
					type="concept"
					format="dita"
					scope="local">Using Connection Pools</xref>. </p>
			<codeblock>PropertiesPtr pp = Properties::create( );
systemPtr = CacheFactory::createCacheFactory(pp);
// Create a cache.
cachePtr = systemPtr-&gt;setSubscriptionEnabled(true)
   -&gt;addServer("localhost", 24680)
   -&gt;addServer("localhost", 24681)
   -&gt;addServer("localhost", 24682)
   -&gt;setSubscriptionRedundancy(2)
   -&gt;create();</codeblock>
			<p>When failover to a secondary server occurs, a new secondary is added to the
				redundancy set. If no new secondary server is found, the redundancy level is not
				satisfied but the failover procedure completes successfully. Any new live server is
				added as a secondary and interest is registered on it. </p>
		</example>
	</conbody>
</concept>
