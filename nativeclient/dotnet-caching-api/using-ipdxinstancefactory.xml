<?xml version="1.0"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept
  id="concept_8FA31D0D022146CE8DE2197006507AFF">
  <title>Use the IPdxInstanceFactory to Create IPdxInstances</title>
  <shortdesc>You can use the <codeph>IPdxInstanceFactory</codeph> to create an
      <codeph>IPdxInstance</codeph> from raw data when the domain class is not
    available on the server. </shortdesc>
  <conbody>
    <p>This option can be useful when you need an instance of a domain class for
      plug-in code such as a function or a loader. If you have the raw data for
      the domain object (the class name and each field's type and data), then
      you can explicitly create a <codeph>IPdxInstance</codeph>. The
        <codeph>IPdxInstanceFactory</codeph> is very similar to the
        <codeph>IPdxWriter</codeph> except that after writing each field, you
      need to call the create method which returns the created
        <codeph>IPdxInstance.</codeph>
    </p>
    <example
      id="example_89B7EDD2BE27423BA0CAB9B0270348B5">
      <title> Creating an IPdxInstance with IPdxInstanceFactory</title>
      <codeblock>/*
         * The PdxInstance QuickStart Example.
         * This example takes the following steps:
         *
         * This example shows IPdxInstanceFactory and IPdxInstance usage.
         *
         * 1. Create a Cache.
         * 2. Creates the PdxInstanceFactory for Person class.
         * 3. Then creates instance of PdxInstance
         * 4. It does put.
         * 5. Then it does get and access it fields.
         * 6. Close the Cache.
         *
         */
        // Use standard namespaces
        using System;
        using System.Reflection;
        // Use the GemFire namespace
        using GemStone.GemFire.Cache.Generic;
        namespace GemStone.GemFire.Cache.Generic.QuickStart
        {
          public class Person
          {
            private string name;
            //this is the only field used on server to create hashcode and use in equals method
            [PdxIdentityField]
            private int id;
            private int age;
            public Person() { }
            public Person(string name, int id, int age)
            {
              this.name = name;
              this.id = id;
              this.age = age;
            }
            #region Public Properties
            public string Name
            {
              get { return name; }
            }
            public int ID
            {
              get { return id; }
            }
            public int Age
            {
              get { return age; }
            }
            #endregion  
          }
        // The PdxRemoteQuery QuickStart example.
class PdxInstance
  {
    static void Main(string[] args)
    {
      try {
        CacheFactory cacheFactory = CacheFactory.CreateCacheFactory(null);
        Console.WriteLine("Connected to the Distributed System");
        // Create a Cache with the "clientPdxRemoteQuery.xml" Cache XML file.
        // Set SetPdxReadSerialized to true to access PdxInstance
        Cache cache = cacheFactory.Set("cache-xml-file",
"XMLs/clientPdxInstance.xml").Create();
        Console.WriteLine("Created the Cache");
        // Get the example Region from the Cache which is declared in the
Cache XML file.
        IRegion&lt;string, IPdxInstance&gt; region = cache.GetRegion&lt;string,
IPdxInstance&gt;("Person");
        Console.WriteLine("Obtained the Region from the Cache");
        Person p = new Person("Jack", 7, 21);
        //PdxInstanceFactory for Person class
        IPdxInstanceFactory pif = cache.CreatePdxInstanceFactory("Person");
        pif.WriteString("name", p.Name);
        pif.WriteInt("id", p.ID);
        pif.MarkIdentityField("id");
        pif.WriteInt("age", p.Age);
        IPdxInstance pdxInstance = pif.Create();
        Console.WriteLine("Created PdxInstance for Person class");
        region["Key1"] = pdxInstance;
        Console.WriteLine("Populated PdxInstance Object");
        IPdxInstance retPdxInstance = region["Key1"];
        if((int)retPdxInstance.GetField("id") == p.ID
             &amp;&amp; (int)retPdxInstance.GetField("age") == p.Age
               &amp;&amp; (string)retPdxInstance.GetField("name") == p.Name
                 &amp;&amp; retPdxInstance.IsIdentityField("id") == true)
           Console.WriteLine("PdxInstance returns all fields value
expected");
        else
           Console.WriteLine("PdxInstance doesn't returns all fields value
expected");
        // Close the Cache.
        cache.Close();
        Console.WriteLine("Closed the Cache");
        }
        // An exception should not occur
        catch (GemFireException gfex)
        {
          Console.WriteLine("PdxSerializer Exception: {0}",
          gfex.Message);
        }
     }
  } 
}</codeblock>
    </example>
  </conbody>
</concept>
