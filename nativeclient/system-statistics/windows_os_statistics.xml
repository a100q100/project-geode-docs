<?xml version="1.0"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<!-- Created with XMetaL (http://www.xmetal.com) -->
<concept
	id="concept_235CCC6392DC45CC8771CF5E14DFCE71">
	<title>Windows Process Statistics</title>
	<shortdesc>Use these methods to get information about a Windows operating system process that is
		using a GemFire system. </shortdesc>
	<conbody>
		<table
			id="table_4F120C131B294DACB926C3B6726E9868">
			<tgroup
				cols="2">
				<colspec
					colnum="1"
					colname="col1"
					colwidth="1.06*"/>
				<colspec
					colnum="2"
					colname="col2"
					colwidth="1.00*"/>
				<tbody>
					<row>
						<entry
							colname="col1">
							<codeph>handles</codeph>
						</entry>
						<entry
							colname="col2">Total number of handles currently open by this process.
							This number is the sum of the handles currently open by each thread in
							this process. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>priorityBase</codeph>
						</entry>
						<entry
							colname="col2">Current base priority of the process. Threads within a
							process can raise and lower their own base priority relative to the
							process's base priority. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>threads</codeph>
						</entry>
						<entry
							colname="col2">Number of threads currently active in this process. An
							instruction is the basic unit of execution in a processor, and a thread
							is the object that executes instructions. Every running process has at
							least one thread. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>activeTime</codeph>
						</entry>
						<entry
							colname="col2">Elapsed time in milliseconds that all threads of this
							process used the processor to execute instructions. An instruction is
							the basic unit of execution in a computer, a thread is the object that
							executes instructions, and a process is the object created when a
							program is run. Code executed to handle some hardware interrupts and
							trap conditions are included in this count. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>pageFaults</codeph>
						</entry>
						<entry
							colname="col2">Total number of Page Faults by the threads executing in
							this process. A page fault occurs when a thread refers to a virtual
							memory page that is not in its working set in main memory. This will not
							cause the page to be fetched from disk if it is on the standby list and
							hence already in main memory, or if it is in use by another process with
							whom the page is shared. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>pageFileSize</codeph>
						</entry>
						<entry
							colname="col2">Current number of bytes this process has used in the
							paging file(s). Paging files are used to store pages of memory used by
							the process that are not contained in other files. Paging files are
							shared by all processes, and lack of space in paging files can prevent
							other processes from allocating memory. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>pageFileSizePeak</codeph>
						</entry>
						<entry
							colname="col2">Maximum number of bytes this process has used in the
							paging file(s). Paging files are used to store pages of memory used by
							the process that are not contained in other files. Paging files are
							shared by all processes, and lack of space in paging files can prevent
							other processes from allocating memory. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>privateSize</codeph>
						</entry>
						<entry
							colname="col2">Current number of bytes this process has allocated that
							cannot be shared with other processes. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>systemTime</codeph>
						</entry>
						<entry
							colname="col2">Elapsed time in milliseconds that the threads of the
							process have spent executing code in privileged mode. When a Windows
							system service is called, the service often runs in Privileged Mode to
							gain access to system-private data. Such data is protected from access
							by threads executing in user mode. Calls to the system can be explicit
							or implicit, such as page faults or interrupts. Unlike some early
							operating systems, Windows uses process boundaries for subsystem
							protection in addition to the traditional protection of user and
							privileged modes. These subsystem processes provide additional
							protection. Therefore, some work done by Windows on behalf of your
							application might appear in other subsystem processes in addition to the
							privileged time in your process. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>userTime</codeph>
						</entry>
						<entry
							colname="col2">Elapsed time in milliseconds that this process's threads
							have spent executing code in user mode. Applications, environment
							subsystems, and integral subsystems execute in user mode. Code executing
							in User Mode cannot damage the integrity of the Windows Executive,
							Kernel, and device drivers. Unlike some early operating systems, Windows
							uses process boundaries for subsystem protection in addition to the
							traditional protection of user and privileged modes. These subsystem
							processes provide additional protection. Therefore, some work done by
							Windows on behalf of your application might appear in other subsystem
							processes in addition to the privileged time in your process. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>activeTime</codeph>
						</entry>
						<entry
							colname="col2">Elapsed time in milliseconds that all threads of this
							process used the processor to execute instructions. An instruction is
							the basic unit of execution in a computer, a thread is the object that
							executes instructions, and a process is the object created when a
							program is run. Code executed to handle some hardware interrupts and
							trap conditions are included in this count. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>pageFaults</codeph>
						</entry>
						<entry
							colname="col2">Total number of page faults by the threads executing in
							this process. A page fault occurs when a thread refers to a virtual
							memory page that is not in its working set in main memory. This will not
							cause the page to be fetched from disk if it is on the standby list and
							hence already in main memory, or if it is in use by another process with
							whom the page is shared. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>pageFileSize</codeph>
						</entry>
						<entry
							colname="col2">Current number of bytes this process has used in the
							paging file(s). Paging files are used to store pages of memory used by
							the process that are not contained in other files. Paging files are
							shared by all processes, and lack of space in paging files can prevent
							other processes from allocating memory. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>pageFileSizePeak</codeph>
						</entry>
						<entry
							colname="col2">Maximum number of bytes this process has used in the
							paging file(s). Paging files are used to store pages of memory used by
							the process that are not contained in other files. Paging files are
							shared by all processes, and lack of space in paging files can prevent
							other processes from allocating memory. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>privateSize</codeph>
						</entry>
						<entry
							colname="col2">Current number of bytes this process has allocated that
							cannot be shared with other processes. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>systemTime</codeph>
						</entry>
						<entry
							colname="col2">Elapsed time in milliseconds that the threads of the
							process have spent executing code in privileged mode. When a Windows
							system service is called, the service often runs in privileged mode to
							gain access to system-private data. Such data is protected from access
							by threads executing in user mode. Calls to the system can be explicit
							or implicit, such as page faults or interrupts. Unlike some early
							operating systems, Windows uses process boundaries for subsystem
							protection in addition to the traditional protection of user and
							privileged modes. These subsystem processes provide additional
							protection. Therefore, some work done by Windows on behalf of your
							application might appear in other subsystem processes in addition to the
							privileged time in your process. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>userTime</codeph>
						</entry>
						<entry
							colname="col2">Elapsed time in milliseconds that this process's threads
							have spent executing code in user mode. Applications, environment
							subsystems, and integral subsystems execute in user mode. Code executing
							in User Mode cannot damage the integrity of the Windows Executive,
							Kernel, and device drivers. Unlike some early operating systems, Windows
							uses process boundaries for subsystem protection in addition to the
							traditional protection of user and privileged modes. These subsystem
							processes provide additional protection. Therefore, some work done by
							Windows on behalf of your application might appear in other subsystem
							processes in addition to the privileged time in your process. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>virtualSize</codeph>
						</entry>
						<entry
							colname="col2">Current size in bytes of the virtual address space the
							process is using. Use of virtual address space does not necessarily
							imply corresponding use of either disk or main memory pages. Virtual
							space is finite, and by using too much, the process can limit its
							ability to load libraries. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>virtualSizePeak</codeph>
						</entry>
						<entry
							colname="col2">Maximum number of bytes of virtual address space the
							process has used at any one time. Use of virtual address space does not
							necessarily imply corresponding use of either disk or main memory pages.
							Virtual space is however finite, and by using too much, the process
							might limit its ability to load libraries. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>workingSetSize</codeph>
						</entry>
						<entry
							colname="col2">Current number of bytes in the Working Set of this
							process. The Working Set is the set of memory pages touched recently by
							the threads in the process. If free memory in the computer is above a
							threshold, pages are left in the Working Set of a process even if they
							are not in use. When free memory falls below a threshold, pages are
							trimmed from Working Sets. If pages are needed, they are then
							soft-faulted back into the Working Set before they are paged out to
							disk. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>workingSetSizePeak</codeph>
						</entry>
						<entry
							colname="col2">Maximum number of bytes in the Working Set of this
							process at any point in time. The Working Set is the set of memory pages
							touched recently by the threads in the process. If free memory in the
							computer is above a threshold, pages are left in the Working Set of a
							process even if they are not in use. When free memory falls below a
							threshold, pages are trimmed from Working Sets. If they are needed they
							will then be soft faulted back into the Working Set before they leave
							main memory. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>cpuUsage</codeph>
						</entry>
						<entry
							colname="col2">Percentage CPU used by this process. </entry>
					</row>
					<row>
						<entry
							colname="col1">
							<codeph>WindowsProcessStats</codeph>
						</entry>
						<entry
							colname="col2">Statistics for a Microsoft Windows process. </entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	</conbody>
</concept>
