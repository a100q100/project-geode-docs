<?xml version="1.0"?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<dita>
	<topic id="topic_70045702D3994BC692E75102CE01BD7C">
		<title> Overview of Multi-site Caching</title>
		<shortdesc>A multi-site installation consists of two or more distributed systems that are
			loosely coupled. Each site manages its own distributed system, but region data is
			distributed to remote sites using one or more logical connections. </shortdesc>
		<body>
			<p>The logical connections consist of a gateway sender in the sending site, and a
				gateway receiver in the receiving site. In a client/server installation, gateway
				senders and gateway receivers are configured in the server layer. </p>
			<p>Gateway senders and receivers are defined at startup in the distributed system member
				caches. A site can use <i>serial</i> and/or <i>parallel</i> gateway sender
				configurations, as described in <xref scope="local"
					href="multisite_overview.xml#topic_9AA37B43642D4DE19072CA3367C849BA"
					type="topic" format="dita"/>. </p>
			<p>
				<image placement="break" id="image_BCD6320F34A645A7911AA25EDEA6D971"
					href="../../images/consistent_multisite.png"/>
			</p>
		</body>
	</topic>
	<topic id="topic_C74A0961937640B199396DC925D8D782">
		<title>Consistency for WAN Updates</title>
		<shortdesc><keyword keyref="product_name"/> ensures that all copies of a region eventually reach a
			consistent state on all members and clients that host the region, including <keyword
				keyref="product_name"/> members that distribute region events across a WAN. </shortdesc>
		<body>
			<p>By default, potential WAN conflicts are resolved using a timestamp mechanism. You can
				optionally install a custom conflict resolver to apply custom logic when determining
				whether to apply a potentially conflicting update received over a WAN. </p>
			<p><xref
					href="../../developing/distributed_regions/region_entry_versions.xml#topic_CF2798D3E12647F182C2CEC4A46E2045"
					type="topic" format="dita" scope="local"/> describes how <keyword
					keyref="product_name"/> ensures consistency within a cluster, in client caches,
				and when applying updates over a WAN. <xref
					href="../../developing/events/resolving_multisite_conflicts.xml#topic_E97BB68748F14987916CD1A50E4B4542"
					type="topic" format="dita" scope="local"/> provides more details about
				implementing a custom conflict resolver for WAN updates. </p>
		</body>
	</topic>
	<topic id="topic_1742957C8D4B4F7590847EB8DB6CD4F7">
		<title>Discovery for Multi-Site Systems</title>
		<shortdesc>Each <keyword keyref="product_name"/> cluster in a WAN configuration uses locators to
			discover remote clusters as well as local members. </shortdesc>
		<body>
			<p>Each locator in a WAN configuration defines a unique <codeph>distributed-system-id</codeph>
				property that identifies the local cluster to which it belongs. A locator uses the
					<codeph>remote-locators</codeph> property to define the addresses of one or more
				locators in remote clusters to use for WAN distribution. </p>
			<p>When a locator starts up, it contacts each locator that is configured in the
					<codeph>remote-locators</codeph> property to exchange information about the
				available locators and gateway receivers in the cluster. The locator also shares
				information about locators and gateway receivers in any other <keyword
					keyref="product_name"/> clusters that have connected to the cluster. Connected
				clusters can then use the shared gateway receiver information to distribute region
				events according to their configured gateway senders. </p>
			<p>Each time a new locator starts up or an existing locator shuts down, the changed information
				is broadcast to other connected <keyword keyref="product_name"/> clusters. </p>
		</body>
	</topic>
	<topic id="topic_9AA37B43642D4DE19072CA3367C849BA">
		<title>Gateway Senders</title>
		<shortdesc>A <keyword keyref="product_name"/> cluster uses a <i>gateway sender</i> to distribute
			region events to another, remote <keyword keyref="product_name"/> cluster. You can
			create multiple gateway sender configurations to distribute region events to multiple
			remote clusters, and/or to distribute region events concurrently to another remote
			cluster. </shortdesc>
		<body>
			<p>A gateway sender always communicates with a gateway receiver in a remote cluster.
				Gateway senders do not communicate directly with other cache server instances. See
					<xref scope="local"
					href="multisite_overview.xml#topic_4DB3D9CF01AD4F4899457D1250468D00"
					type="topic" format="dita"/>. </p>
			<p><keyword keyref="product_name"/> provides two types of gateway sender configurations:
					<i>serial</i> gateway senders and <i>parallel</i> gateway senders. </p>
			<section id="section_F7B3A17597B344F19A9E3546097AC5DB">
				<title>Serial Gateway Senders</title>
				<p>A <i>serial gateway sender</i> distributes region events from a single <keyword
						keyref="product_name"/> server in the local cluster to a remote <keyword
						keyref="product_name"/> cluster. Although multiple regions can use the same
					serial gateway for distribution, a serial gateway uses a single logical event
					queue to dispatch events for all regions that use the gateway sender. <fig
						id="fig_07C402FC855047F5AAAB2D3E8E3953E3">
						<image id="image_CEF888583FAC4CCBB0445F2BF8F15F20"
							href="../../images/serial_sender.png" placement="break" width="6.5in"/>
					</fig>
				</p>
				<p> Because a serial gateway sender distributes all of a region's events from a single  member,
					it provides the most control over ordering region events as they are distributed
					across the WAN. However, a serial gateway sender provides only a finite amount
					of throughput for distributing events. As you add more regions and servers to
					the local cluster, you may need to configure additional serial gateway senders
					manually and isolate individual regions on specific serial gateway senders to
					handle the increased distribution traffic. </p>
			</section>
			<section id="section_5E989CEDC4F147788B393588CFF17106">
				<title>Parallel Gateway Senders</title>
				<p>A <i>parallel gateway sender</i> distributes region events simultaneously from each <keyword
						keyref="product_name"/> server that hosts the region. For a partitioned
					region, this means that each server that hosts buckets for the region uses its
					own logical queue to distribute events for those buckets. As you add new servers
					to scale the partitioned region, WAN distribution throughput scales
					automatically with each new instance of the parallel gateway sender. </p>
				<fig id="fig_C57DD858D55F48CD9A04F88CEA179CC8">
					<image id="image_D3BEABE6269543758DD0FAF4FFCD713A" href="../../images/parallel_sender.png"
						placement="break" width="6.5in"/>
				</fig>
				<p>A parallel gateway sender uses multiple queues on multiple <keyword keyref="product_name"/>
					members to simultaneously distribute region events to a remote <keyword
						keyref="product_name"/> cluster. Each queue distributes only part of the
					events for a configured region. For example, for a partitioned region, each
					queue distributes only those events for the local partition. </p>
				<p>Distributed, non-replicated regions can also use a parallel gateway sender for distribution.
					With a distributed region, <keyword keyref="product_name"/> creates a separate
					gateway sender and queue on each member that hosts the region, and then hashes
					region events to place them into a distinct queue. This provides a level of
					scalability for distributed regions that is similar to that provided for
					partitioned regions. </p>
				<note>Replicated regions cannot use a parallel gateway sender. </note>
				<p>Although parallel gateway senders provide the best throughput for WAN distribution, they
					provide less control for ordering events. With a parallel gateway sender, you
					cannot preserve event ordering for the region as a whole because multiple
						<keyword keyref="product_name"/> servers distribute the regions events at
					the same time. However, the ordering of events for a given partition (or in a
					given queue of a distributed region) can be preserved. See <xref
						href="../../developing/events/configure_multisite_event_messaging.xml#configure_multisite_event_messaging"
						type="concept" format="dita" scope="local"/>. </p>
			</section>
			<section id="section_75F4588FEA404712963CE83FACB8ED1B">
				<title>Gateway Sender Queues</title>
				<p> The queue that a gateway sender uses to distribute events to a remote site overflows to disk
					as needed, in order to prevent the <keyword keyref="product_name"/> member from
					running out of memory. You can configure the maximum amount of memory that each
					queue uses, as well as the batch size and frequency for processing batches in
					the queue. You can also configure these queues to persist to disk, so that a
					gateway sender can pick up where it left off when its member shuts down and is
					later restarted. </p>
				<p>By default gateway sender queues use 5 threads to dispatch queued events. With a serial
					gateway sender, the single, logical queue that is hosted on a  member is divided
					into multiple physical queues (5 by default) each with a dedicated dispatcher
					thread. You can configure whether the threads dispatch queued events by key, by
					thread, or in the same order in which events were added to the queue. For a
					parallel gateway sender, each logical queue that is hosted on a  member is
					processed simultaneously by multiple threads. </p>
				<p>See <xref
						href="../../developing/events/configure_multisite_event_messaging.xml#configure_multisite_event_messaging"
						type="concept" format="dita" scope="local"/>. </p>
			</section>
			<section id="section_70A4D850A5404429AD5CB483D2053F1A">
				<title>High Availability for Gateway Senders</title>
				<p> When a serial gateway sender configuration is deployed to multiple <keyword
						keyref="product_name"/> members, only one "primary" sender is active at a
					given time. All other serial gateway sender instances are inactive "secondaries"
					that are available as backups if the primary sender shuts down. <keyword
						keyref="product_name"/> designates the first gateway sender to start up as
					the primary sender, and all other senders become secondaries. As gateway senders
					start and shut down in the distributed system, <keyword keyref="product_name"/>
					ensures that the oldest running gateway sender operates as the primary.</p>
				<p>A parallel gateway sender is deployed to multiple <keyword keyref="product_name"/> members by
					default, and each member that hosts primary buckets for a partitioned region
					actively distributes data to the remote <keyword keyref="product_name"/> site.
					When you use parallel gateway senders, high availability for WAN distribution is
					provided if you configure the partitioned region for redundancy. With a
					redundant partitioned region, if a member that hosts primary buckets fails or is
					shut down, then a <keyword keyref="product_name"/> member that hosts a redundant
					copy of those buckets takes over WAN distribution for those buckets. </p>
			</section>
			<section id="section_aqm_2js_bq">
				<title>Stopping Gateway Senders</title>
				<p>The scope of the gateway sender stop operation is the VM on which it is invoked. When you
					stop a parallel gateway sender using the <codeph>GatewaySender.stop()</codeph>
					or <codeph>gfsh stop gateway-sender</codeph>, the gateway sender is stopped on
					the individual node where this API is called. If the gateway sender is not
					parallel (serial), then the gateway sender will stop on the local VM, and the
					secondary gateway sender will become primary and start dispatching events. The
					gateway sender will wait for
						<codeph>GatewaySender.MAXIMUM_SHUTDOWN_WAIT_TIME</codeph> seconds before
					stopping itself (by default, this value is set to 0). You can set this Java
					system property when starting the server member in <codeph>gfsh</codeph>. If the
					Java system property is set to -1, then the gateway sender process will wait
					until all events are dispatched from the queue before stopping.</p>
				<p>
					<note>Use extreme caution when stopping parallel gateway senders by using the
							<codeph>GatewaySender.stop()</codeph> API or <codeph>gfsh stop
							gateway-sender</codeph> command. </note>
				</p>
				<p>The API and gfsh command stops the parallel gateway sender in one member, which
					causes data loss because events to buckets in that member will be dropped by the
					stopped sender. The partitioned region does not failover in this scenario since
					the member is still running. Instead, to ensure that the remaining events are
					sent, shut down the entire member to ensure proper failover of partition region
					events. When a member with the stopped parallel sender is shut down, the other
					parallel gateway sender members hosting the partition region become primary and
					deliver the remaining events. In addition, if the whole cluster is brought down
					after stopping an individual parallel gateway sender, then events queued on that
					gateway sender can be lost. </p>
			</section>
			<section id="section_hdt_2js_bq">
				<title>Pausing Gateway Senders</title>
				<p>Similar to stopping a gateway sender, the scope of pausing a gateway sender is
					the VM on which it is invoked. Pausing a gateway sender temporarily stops the
					dispatching of events from the underlying queue. Note that events are still
					queued into the queue. In case where the gateway sender is parallel, the gateway
					sender is paused on the individual node where the
						<codeph>GatewaySender.pause()</codeph> API is called or the <codeph>gfsh
						pause gateway-sender</codeph> command is invoked. The parallel gateway
					senders on other members can still dispatch events. In case where the paused
					gateway sender is not parallel (serial) and is not primary, then the primary
					gateway sender will still continue dispatching events. The batch of events that
					are in the process of being dispatched are dispatched regardless of the state of
					the pause operation. We can expect a maximum of one batch of events being
					received at the gateway receiver even after the gateway senders have been
					paused.</p>
			</section>
		</body>
	</topic>
	<topic id="topic_4DB3D9CF01AD4F4899457D1250468D00">
		<title>Gateway Receivers</title>
		<shortdesc>A gateway receiver configures a physical connection for receiving region events from
			gateway senders in one or more remote <keyword keyref="product_name"/> clusters. </shortdesc>
		<body>
			<p>A gateway receiver applies each region event to the same region or partition that is hosted in
				the local <keyword keyref="product_name"/> member. (An exception is thrown if the
				receiver receives an event for a region that it does not define.) </p>
			<p>Gateway senders use any available gateway receiver in the target cluster to send region
				events. You can deploy gateway receiver configurations to multiple <keyword
					keyref="product_name"/> members as needed for high availability and load
				balancing, however you can only host one gateway receiver per member. </p>
			<p>After you create a gateway receiver, you can configure the gateway receiver to start
				automatically or to require a manual start. The current default is to require a
				manual start for the gateway receiver (<codeph>manual-start</codeph> is set to
				true).</p>
			<p>After you create and start a new gateway receiver at one WAN site, you can execute
				the <xref
					href="../../tools_modules/gfsh/command-pages/load-balance.xml#concept_fn2_qls_5q"
				/> command in <codeph>gfsh</codeph> for existing remote gateway senders so that the
				new receiver can pick up connections to gateway senders at different sites. You
				invoke this command on the gateway senders to redistribute connections more evenly
				among all the gateway receivers. Another option is to use the
					<codeph>GatewaySender.rebalance</codeph> Java API. </p>
			<p>See <xref
					href="../multi_site_configuration/setting_up_a_multisite_system.xml#setting_up_a_multisite_system/section_E3A44F85359046C7ADD12861D261637B"
					type="section" format="dita" scope="local"/>. </p>
		</body>
	</topic>
</dita>
