<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="how_the_pool_manages_connections">
	<title>How Client/Server Connections Work</title>
	<shortdesc id="shortdesc_B7AE546B932B48A88BE8533BB8A65F32">The server pools in your <keyword
			keyref="product_name_long"/> client processes manage all client connection requests to
		the server tier. To make the best use of the pool functionality, you should understand how
		the pool manages the server connections. </shortdesc>
	<conbody>
		<section id="section_2C419926908B4A3599FF0B8EAB7E69A1">Client/server communication is done
			in two distinct ways. Each kind of communication uses a different type of connection for
			maximum performance and availability. <ul id="ul_58ae2958-761a-4eef-8d6c-f127ef0b209d">
				<li id="li_0A083132CC2749A1853A6352C27B7ADA"><b>Pool connections</b>. The pool
					connection is used to send individual operations to the server to update cached
					data, to satisfy a local cache miss, or to run an ad hoc query. Each pool
					connection goes to a host/port location where a server is listening. The server
					responds to the request on the same connection. Generally, client threads use a
					pool connection for an individual operation and then return the connection to
					the pool for reuse, but you can configure to have connections owned by threads.
					This figure shows pool connections for one client and one server. At any time, a
					pool may have from zero to many pool connections to any of the servers. </li>
			</ul>
			<p>
				<image placement="break" id="image_95B89D7587A94611826DB4FEF56AC4FE"
					href="../../images_svg/cs_connection_pool.svg"/></p>
				<ul id="ul_59be2958-761a-4eef-8d6c-f127ef0b209d">
					<li id="li_E81F10278E0B4B488E124455E7C74559"><b>Subscription connections</b>.
						The subscription connection is used to stream cache events from the server
						to the client. To use this, set the client attribute
							<codeph>subscription-enabled</codeph> to true. The server establishes a
						queue to asynchronously send subscription events and the pool establishes a
						subscription connection to handle the incoming messages. The events sent
						depend on how the client subscribes. <p>
							<image placement="break" id="image_5AB5718413AD4E7EBEDD357335D14C48"
								href="../../images_svg/cs_subscriptions.svg"/>
						</p>
					</li>
				</ul>
		</section>
		<section id="section_9EB09CBF19034C3A92FEFDBC28A6BBCC">
			<title>How the Pool Chooses a Server Connection</title>
			<p>The pool gets server connection information from the server locators or, alternately,
				from the static server list.</p>
				<ul id="ul_7d76014f-9fc1-4c26-bded-c3aacb41cec1">
					<li id="li_9BDD1C45C89A4C8BA61122493D7DFCCD"><b>Server Locators</b>. Server
						locators maintain information about which servers are available and which
						has the least load. New connections are sent to the least loaded servers.
						The pool requests server information from a locator when it needs a new
						connection. The pool randomly chooses the locator to use and the pool sticks
						with a locator until the connection fails. </li>
					<li id="li_DBD6D7E318E84F959891ABE86A663236"><b>Static Server List</b>. If you
						use a static server list, the pool shuffles it once at startup, to provide
						randomness between clients with the same list configuration, and then runs
						through the list round robin connecting as needed to the next server in the
						list. There is no load balancing or dynamic server discovery with the static
						server list. </li>
				</ul>
		</section>
		<section id="section_8BE1FD1D602048978C4DE870134EC648">
			<title>How the Pool Connects to a Server</title>
			<p>When a pool needs a new connection, it goes through these steps until either it
				successfully establishes a connection, it has exhausted all available servers, or
				the <codeph>free-connection-timeout</codeph> is reached. </p>
				<ol
					id="ol_375B19ADAE4F435CB7098F4978CF72CA">
					<li id="li_BAC8A6811DDE4226948761E299C3514C">Requests server connection
						information from the locator or retrieves the next server from the static
						server list. </li>
					<li id="li_7D9ACFCC446448FA88ADB22774E844E2">Sends a connection request to the
						server. </li>
				</ol>
			<p>If the pool fails to connect while creating a subscription connection or provisioning
				the pool to reach the <codeph>min-connections</codeph> setting, it logs a fine level
				message and retries after the time indicated by <codeph>ping-interval</codeph>. </p>
			<p>If an application thread calls an operation that needs a connection and the pool
				can’t create it, the operation returns a
					<codeph>NoAvailableServersException</codeph>. </p>
		</section>
		<section id="section_B3A7B441939040E39324343A77EED6EE">
			<title>How the Pool Manages Pool Connections</title>
			<p>Each <codeph>Pool</codeph> instance in your client maintains its own connection pool.
				The pool responds as efficiently as possible to connection loss and requests for new
				connections, opening new connections as needed. When you use a pool with the server
				locator, the pool can quickly respond to changes in server availability, adding new
				servers and disconnecting from unhealthy or dead servers with little or no impact on
				your client threads. Static server lists require more close attention as the client
				pool is only able to connect to servers at the locations specified in the list. </p>
			<p>The pool adds a new pool connection when one of the following happens: </p>
				<ul
					id="ul_3cb758e2-8198-4e74-b83a-9f7d8cff3344">
					<li id="li_C75C2A862F6845C6BFFDDC7EFC397CB9">The number of open connections is
						less than the <codeph>Pool</codeph>’s <codeph>min-connections</codeph>
						setting. </li>
					<li id="li_EC3B110A26D04CF784317232F1034EA8">A thread needs a connection, all
						open connections are in use, and adding another connection would not take
						the open connection count over the pool’s <codeph>max-connections</codeph>
						setting. If the max-connections setting has been reached, the thread blocks
						until a connection becomes available. </li>
				</ul>
			<p>The pool closes a pool connection when one of the following occurs: </p>
				<ul
					id="ul_9326bb5e-cdd8-4d51-bce6-489fc00b08cb">
					<li id="li_B46497152F7F420E80959993BFAE5D92">The client receives a connectivity
						exception from the server. </li>
					<li id="li_C394AF35465D49BB99B1C62E4B531051">The server doesn’t respond to a
						direct request or ping within the client's configured
							<codeph>read-timeout</codeph> period. In this case, the pool removes all
						connections to that server. </li>
					<li id="li_C478AAFA57D34D6DB7B0D36B435FFFF2">The number of pool connections
						exceeds the pool’s <codeph>min-connections</codeph> setting and the client
						doesn’t send any requests over the connection for the
							<codeph>idle-timeout</codeph> period. </li>
				</ul>
			<p>When it closes a connection that a thread is using, the pool switches the thread to
				another server connection, opening a new one if needed. </p>
		</section>
		<section id="section_FFC261DF179843D8BE06B35964B80D69">
			<title>How the Pool Manages Subscription Connections</title>
			<p>The pool’s subscription connection is established in the same way as the pool
				connections, by requesting server information from the locator and then sending a
				request to the server, or, if you are using a static server list, by connecting to
				the next server in the list. </p>
			<p>Subscription connections remain open for as long as needed and are not subject to the
				timeouts that apply to pool connections. </p>
		</section>
		<section id="section_6286FB8DC6564F0AA082004B447F1FC4">
			<title>How the Pool Conditions Server Load</title>
			<p>When locators are used, the pool periodically conditions its pool connections. Each
				connection has an internal lifetime counter. When the counter reaches the configured
					<codeph>load-conditioning-interval</codeph>, the pool checks with the locator to
				see if the connection is using the least loaded server. If not, the pool establishes
				a new connection to the least loaded server, silently puts it in place of the old
				connection, and closes the old connection. In either case, when the operation
				completes, the counter starts at zero. Conditioning happens behind the scenes and
				does not affect your application’s connection use. This automatic conditioning
				allows very efficient upscaling of your server pool. It is also useful following
				planned and unplanned server outages, during which time the entire client load will
				have been placed on a subset of the normal set of servers. </p>
		</section>
	</conbody>
</concept>
