<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="ssl_example">
	<title>SSL Sample Implementation</title>
	<shortdesc>A simple example demonstrates the configuration and startup of <keyword
			keyref="product_name"/> system components with SSL. </shortdesc>
	<conbody>
		<section id="section_A8817FA8EF654CFB862F2375C0DD6770">
			<title>Provider-Specific Configuration File</title>
			<p>This example uses a keystore created by the Java <codeph>keytool</codeph> application
				to provide the proper credentials to the provider. To create the keystore, we ran
				the following:</p>
				<codeblock>keytool -genkey \ 
-alias self \ 
-dname "CN=trusted" \ 
-validity 3650 \ 
-keypass password \ 
-keystore ./trusted.keystore \ 
-storepass password \ 
-storetype JKS </codeblock>
			<p>This
				creates a <codeph>./trusted.keystore</codeph> file to be used later. </p>
		</section>
		<section id="section_4D54B2E9045C4E34AE6DFFBECDED9271">
			<title>gemfire.properties File</title>
			<p>You can enable SSL in the <codeph>gemfire.properties</codeph> file. In this example,
				SSL is enabled for all peer-to-peer, client/server, and HTTP connections. However,
				the <codeph>jmx-manager-ssl=false</codeph> override is added to disable SSL For JMX
				conenctiosn: </p>
			<codeblock>cluster-ssl-enabled=true
mcast-port=0
locators=&lt;hostaddress&gt;[&lt;port&gt;]
jmx-manager-ssl-enabled=false</codeblock>
		</section>
		<section id="section_7B8E0BBF4A4C4B9FB9BC34AC1CDD4D3E">
			<title>gfsecurity.properties File</title>
			<p> You can specify the provider-specific settings in
					<codeph>gfsecurity.properties</codeph> file, which can then be secured by
				restricting access to this file. The following example configures the default JSSE
				provider settings included with the JDK.</p>
				<codeblock>cluster-ssl-keystore-type=jks
cluster-ssl-keystore=/path/to/trusted.keystore
cluster-ssl-keystore-password=password
cluster-ssl-truststore=/path/to/trusted.keystore
cluster-ssl-truststore-password=
security-username=xxxx
security-userPassword=yyyy 
</codeblock>
			<p>Note that individual provider settings can also be overriden for client/server, JMX,
				or HTTP connections by setting the appropriate property here. See <xref
					href="implementing_ssl.xml"/>.</p>
		</section>
		<section id="section_32E55F2088804667BB448DB577AC2940">
			<title>Locator Startup</title>
			<p>Before starting other system members, we started the locator with the SSL and
				provider-specific configuration settings. After properly configuring
					<codeph>gemfire.properties</codeph> and <codeph>gfsecurity.properties</codeph>,
				start the locator and provide the location of the properties files. If any of the
				password fields are left empty, you will be prompted to enter a password.</p>
				<codeblock>
gfsh&gt;start locator --name=my_locator --port=12345 \
--properties-file=/path/to/your/gemfire.properties \
--security-properties-file=/path/to/your/gfsecurity.properties</codeblock>
		</section>
		<section id="section_8FCC32091E97422BA45AA76C82D8294D">
			<title>Other Member Startup</title>
			<p>Applications and cache servers can be started similarly to the locator startup, with
				the appropriate <codeph>gemfire.properties</codeph> file and
					<codeph>gfsecurity.properties</codeph> files placed in the current working
				directory. You can also pass in the location of both files as system properties on
				the command line. For example:</p>
				<codeblock>gfsh&gt;start server --name=my_server \
--properties-file=/path/to/your/gemfire.properties \
--security-properties-file=/path/to/your/gfsecurity.properties</codeblock>
		</section>
	</conbody>
</concept>
