<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<dita>
  <topic id="topic_r43_wgc_gl">
    <title>Region Compression</title>
    <shortdesc>This section describes region compression, its benefits and usage.</shortdesc>
    <body>
      <p>One way to reduce memory consumption by <keyword keyref="product_name"/> is to enable
        compression in your regions. <keyword keyref="product_name"/> allows you to compress
        in-memory region values using pluggable compressors (compression codecs). <keyword
          keyref="product_name"/> includes the <xref href="https://code.google.com/p/snappy/"
          format="html" scope="external">Snappy</xref> compressor as the built-in compression codec;
        however, you can implement and specify a different compressor for each compressed
        region.</p>
      <section>
        <title>What Gets Compressed</title>
        <p>When you enable compression in a region, all values stored in the region are compressed
          while in memory. Keys and indexes are not compressed. New values are compressed when put
          into the in-memory cache and all values are decompressed when being read from the cache.
          Values are not compressed when persisted to disk. Values are decompressed before being
          sent over the wire to other peer members or clients.</p>
        <p>When compression is enabled, each value in the region is compressed, and each region
          entry is compressed as a single unit. It is not possible to compress individual fields of
          an entry.</p>
        <p>You can have a mix of compressed and non-compressed regions in the same cache.</p>
      </section>
    </body>
  </topic>
  <concept id="concept_a2c_rhc_gl">
    <title>Guidelines on Using Compression</title>
    <shortdesc>This topic describes factors to consider when deciding on whether to use compression. </shortdesc>
    <conbody>
      <p>Review the following guidelines when deciding on whether or not to enable compression in
        your region:</p>
      <ul id="ul_ylh_y3p_34">
        <li><b>Use compression when JVM memory usage is too high.</b> Compression allows you to
          store more region data in-memory and to reduce the number of expensive garbage collection
          cycles that prevent JVMs from running out of memory when memory usage is high.<p>To
            determine if JVM memory usage is high, examine the the following statistics:</p>
            <ul
              id="ul_r15_vrk_g4">
              <li>vmStats>freeMemory</li>
              <li>vmStats->maxMemory</li>
              <li>ConcurrentMarkSweep->collectionTime</li>
            </ul>
          <p>If the amount of free memory regularly drops below 20% - 25% or the duration
            of the garbage collection cycles is generally on the high side, then the regions hosted
            on that JVM are good candidates for having compression enabled.</p></li>
        <li><b>Consider the types and lengths of the fields in the region's entries.</b> Since
          compression is performed on each entry separately (and not on the region as a whole),
          consider the potential for duplicate data across a single entry. Duplicate bytes are
          compressed more easily. Also, since region entries are first serialized into a byte area
          before being compressed, how well the data might compress is determined by the number and
          length of duplicate bytes across the entire entry and not just a single field. Finally,
          the larger the entry the more likely compression will achieve good results as the
          potential for duplicate bytes, and a series of duplicate bytes, increases.</li>
        <li><b>Consider the type of data you wish to compress.</b> The type of data stored has a
          significant impact on how well the data may compress. String data will generally compress
          better than numeric data simply because string bytes are far more likely to repeat;
          however, that may not always be the case. For example, a region entry that holds a couple
          of short, unique strings may not provide as much memory savings when compressed as another
          region entry that holds a large number of integer values. In short, when evaluating the
          potential gains of compressing a region, consider the likelihood of having duplicate
          bytes, and more importantly the length of a series of duplicate bytes, for a single,
          serialized region entry. In addition, data that has already been compressed, such as JPEG
          format files, can actually cause more memory to be used.</li>
        <li><b>Compress if you are storing large text values.</b> Compression is beneficial if you
          are storing large text values (such as JSON or XML) or blobs in <keyword
            keyref="product_name"/> that would benefit from compression. </li>
        <li><b>Consider whether fields being queried against are indexed.</b> You can query against
          compressed regions; however, if the fields you are querying against have not been indexed,
          then the fields must be decompressed before they can be used for comparison. In short, you
          may incur some query performance costs when querying against non-indexed fields.</li>
        <li>
          <p><b>Objects stored in the compression region must be serializable.</b> Compression only
            operates on byte arrays, therefore objects being stored in a compressed region must be
            serializable and deserializable. The objects can either implement the Serializable
            interface or use one of the other <keyword keyref="product_name"/> serialization
            mechanisms (such as PdxSerializable). Implementers should always be aware that when
            compression is enabled the instance of an object put into a region will not be the same
            instance when taken out. Therefore, transient attributes will lose their value when the
            containing object is put into and then taken out of a region.</p>
        </li>
        <li><b>Compressed regions will enable cloning by default.</b> Setting a compressor and then
          disabling cloning results in an exception. The options are incompatible because the
          process of compressing/serializing and then decompressing/deserializing will result in a
          different instance of the object being created and that may be interpreted as cloning the
          object.</li>
      </ul>
    </conbody>
  </concept>
  <topic id="topic_inm_whc_gl">
    <title>How to Enable Compression in a Region</title>
    <shortdesc>This topic describes how to enable compression on your region.</shortdesc>
    <body>
      <p>To enable compression on your region, set the following region attribute in your
        cache.xml:</p>
      <codeblock outputclass="language-xml">&lt;?xml version="1.0" encoding= "UTF-8"?&gt;
&lt;cache xmlns="<keyword keyref="xsd_namespace"/>"
    xmlns:xsi="<xref href="http://www.w3.org/2001/XMLSchema-instance" format="html" scope="external">http://www.w3.org/2001/XMLSchema-instance</xref>"
    xsi:schemaLocation="<keyword keyref="xsd_namespace"/> <keyword keyref="xsd_namespace"/>/<keyword keyref="xsd_filename"/>"
    version="<keyword keyref="xsd_version"/>” lock-lease="120"  lock-timeout= "60" search-timeout= "300"  is-server= "true"  copy-on-read= "false" &gt; 
   &lt;region name="compressedRegion" &gt; 
      &lt;region-attributes data-policy="replicate" ... /&gt; 
         &lt;Compressor>
             &lt;class-name><b>com.gemstone.gemfire.compression.SnappyCompressor</b>&lt;/class-name>
         &lt;/Compressor>
        ...
      &lt;/region-attributes>
   &lt;/region&gt; 
&lt;/cache&gt;</codeblock>
      <p>In
        the Compressor element, specify the class-name for your compressor implementation. This
        example specifies the Snappy compressor, which is bundled with <keyword
          keyref="product_name"/> . You can also specify a custom compressor. See <xref
          href="#topic_hqf_syj_g4" format="dita"/> for an example.</p>
      <p>Compression can be enabled during region creation using gfsh or programmatically as
        well.</p>
      <p>Using
        gfsh:</p>
      <codeblock outputclass="language-bourne">gfsh>create-region --name=”CompressedRegion” --compressor=”com.gemstone.gemfire.compression.SnappyCompressor”;</codeblock>
      <p>API:</p>
      <codeblock outputclass="language-java">regionFactory.setCompressor(new SnappyCompressor());
</codeblock>
      <p>or</p>
        <codeblock>regionFactory.setCompressor(SnappyCompressor.getDefaultInstance());
</codeblock>
      <section>
        <title>How to Check Whether Compression is Enabled</title>
      </section>
      <p>You can also check whether a region has compression enabled by querying which codec is
        being used. A null codec indicates that no compression is enabled for the
        region.</p>
      <codeblock>Region myRegion = cache.getRegion("myRegion");
 Compressor compressor = myRegion.getAttributes().getCompressor();</codeblock>
    </body>
  </topic>
  <topic id="topic_hqf_syj_g4">
    <title>Working with Compressors </title>
    <shortdesc>When using region compression, you can use the default Snappy compressor included
      with <keyword keyref="product_name"/> or you can specify your own compressor.</shortdesc>
    <body>
      <p>The compression API consists of a single interface that compression providers must
        implement. The default compressor (SnappyCompressor) is the single compression
        implementation that comes bundled with the product. Note that since the Compressor is
        stateless, there only needs to be a single instance in any JVM; however, multiple instances
        may be used without issue. The single, default instance of the SnappyCompressor may be
        retrieved with the <codeph>SnappyCompressor.getDefaultInstance()</codeph> static method.</p>
      <p>
        <note> The Snappy codec included with <keyword keyref="product_name"/> cannot be used with
          Solaris deployments. Snappy is only supported on Linux, Windows, and OSX deployments of
            <keyword keyref="product_name"/> .</note>
      </p>
      <p>This example provides a custom Compressor
        implementation:</p>
      <codeblock outputclass="language-java">package com.mybiz.myproduct.compression;

import com.gemstone.gemfire.compression.Compressor;

public class LZWCompressor implements Compressor {
  private final LZWCodec lzwCodec = new LZWCodec(); 
  
  @Override
  public byte[] compress(byte[] input) {
         return lzwCodec.compress(input);
  }

  @Override
  public byte[] decompress(byte[] input) {
         return lzwCodec.decompress(input);
  }
}</codeblock>
      <p>To
        use the new custom compressor on a region:</p>
      <ol id="ol_s4f_dzz_j4">
        <li>Make sure that the new compressor package is available in the classpath of all JVMs that
          will host the region.</li>
        <li>Configure the custom compressor for the region using any of the following
            mechanisms:<p>Using gfsh:</p>
          
            <codeblock>gfsh>create-region --name=”CompressedRegion” \
--compressor=”com.mybiz.myproduct.compression.LZWCompressor”</codeblock>
          <p>Using API:</p><p>For
            example:</p>
          <codeblock>regionFactory.setCompressor(new LZWCompressor());</codeblock>
          <p>cache.xml:</p>
          <codeblock outputclass="language-xml">
&lt;region-attributes>
 &lt;Compressor>
     &lt;class-name>com.mybiz.myproduct.compression.LZWCompressor&lt;/class-name>
  &lt;/Compressor>
&lt;/region-attributes></codeblock>
        </li>
      </ol>
      <section>
        <title>Changing the Compressor for an Already Compressed Region</title>
        <p>You typically enable compression on a region at the time of region creation. You cannot
          modify the Compressor or disable compression for the region while the region is
          online.</p>
        <p>However, if you need to change the compressor or disable compression, you can do so by
          performing the following steps:</p>
        <ol id="ol_wbn_c2q_34">
          <li>Shut down the members hosting the region you wish to modify.</li>
          <li>Modify the cache.xml file for the member either specifying a new compressor or
            removing the compressor attribute from the region.</li>
          <li>Restart the member.</li>
        </ol>
      </section>
    </body>
  </topic>
  <topic id="topic_omw_j3c_gl">
    <title>Comparing Performance of Compressed and Non-Compressed Regions</title>
    <shortdesc>The comparative performance of compressed regions versus non-compressed regions can
      vary depending on how the region is being used and whether the region is hosted in a
      memory-bound JVM.</shortdesc>
    <body>
      <p>When considering the cost of enabling compression, you should consider the relative cost of
        reading and writing compressed data as well as the cost of compression as a percentage of
        the total time spent managing entries in a region. As a general rule, enabling compression
        on a region will add 30% - 60% more overhead for region create and update operations than
        for region get operations. Because of this, enabling compression will create more overhead
        on regions that are write heavy than on regions that are read heavy. </p>
      <p>However, when attempting to evaluate the performance cost of enabling compression you
        should also consider the cost of compression relative to the overall cost of managing
        entries in a region. A region may be tuned in such a way that it is highly optimized for
        read and/or write performance. For example, a replicated region that does not save to disk
        will have much better read and write performance than a partitioned region that does save to
        disk. Enabling compression on a region that has been optimized for read and write
        performance will provide more noticeable results than using compression on regions that have
        not been optimized this way. More concretely, performance may degrade by several hundred
        percent on a read/write optimized region whereas it may only degrade by 5 to 10 percent on a
        non-optimized region.</p>
      <p>A final note on performance relates to the cost when enabling compression on regions in a
        memory bound JVM. Enabling compression generally assumes that the enclosing JVM is memory
        bound and therefore spends a lot of time for garbage collection. In that case performance
        may improve by as much as several hundred percent as the JVM will be running far fewer
        garbage collection cycles and spending less time when running a cycle.</p>
      <section>
        <title>Monitoring Compression Performance</title>
        <p>The following statistics provide monitoring for cache compression:</p>
        <ul id="ul_j14_gb5_t4">
          <li>
            <codeph>compressTime</codeph>
          </li>
          <li>
            <codeph>decompressTime</codeph>
          </li>
          <li>
            <codeph>compressions</codeph>
          </li>
          <li>
            <codeph>decompressions</codeph>
          </li>
          <li>
            <codeph>preCompressedBytes</codeph>
          </li>
          <li>
            <codeph>postCompressedBytes</codeph>
          </li>
        </ul>
        <p>See <xref
            href="../../reference/statistics/statistics_list.xml#section_DEF8D3644D3246AB8F06FE09A37DC5C8"
          /> for statistic descriptions.</p>
      </section>
    </body>
  </topic>
</dita>
