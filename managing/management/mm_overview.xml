<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_z1d_n2q_bl">
  <title>Overview of <keyword keyref="product_name"/> Management and Monitoring Tools</title>
  <shortdesc><keyword keyref="product_name"/> provides a variety of management tools you can use to
    manage a <keyword keyref="product_name"/> distributed system. </shortdesc>
  <conbody>
    <p>The <keyword keyref="product_name"/> management and monitoring tools allow you to configure
      all members and processes of a distributed system, monitor operations in the system, and start
      and stop the members. Internally, <keyword keyref="product_name"/> uses Java MBeans,
      specifically MXBeans, to expose management controls and monitoring features. You can monitor
      and control <keyword keyref="product_name"/> by writing Java programs that use these MXBeans,
      or you can use one of several tools provided with <keyword keyref="product_name"/> to monitor
      and manage your distributed system. The primary tool for these tasks is the gfsh command-line
      tool, as described in this section. </p>
    <p><keyword keyref="product_name"/> provides the following tools to manage a <keyword
        keyref="product_name"/> installation: </p>
    <section>
      <title>gfsh Command-line tool</title>
      <p>The gfsh command line tool provides a set of commands you use to configure, manage, and
        monitor a <keyword keyref="product_name"/> distributed system. gfsh is the recommended tool
        for managing your distributed system. </p>
      <p>Use gfsh to:</p>
      <ul id="ul_mkt_2kl_cl">
        <li>Start and stop <keyword keyref="product_name"/> processes, such as locators and cache
          servers</li>
        <li>Deploy applications</li>
        <li>Create and destroy regions</li>
        <li>Execute functions</li>
        <li>Manage disk stores</li>
        <li>Import and export data</li>
        <li>Monitor <keyword keyref="product_name"/> processes</li>
        <li>Launch <keyword keyref="product_name"/> monitoring tools</li>
        <li>Shut down a distributed system</li>
        <li>Script various operations involving <keyword keyref="product_name"/> members </li>
        <li>Save the configuration for all members of a distributed system</li>
      </ul>
      <p>gfsh runs in its own shell, or you can <xref
          href="../../tools_modules/gfsh/os_command_line_execution.xml#topic_fpf_y1g_tp">execute
          gfsh commands directly from the OS command line</xref>. gfsh can interact with remote
        systems <xref href="../../configuring/cluster_config/gfsh_remote.xml">using the http
          protocol</xref>. You can also <xref
          href="../../tools_modules/gfsh/command_scripting.xml#concept_9B2F7550F16C4717831AD40A56922259"
          >write scripts that run in a gfsh shell</xref> to automate system startup. </p>
      <p>You can use gfsh to create shared cluster configurations for your distributed system. You
        can define configurations that apply to the entire cluster, or that apply only to groups of
        similar members that all share a common configuration. <keyword keyref="product_name"/>
        locators maintain these configurations as a hidden region and distribute the configuration
        to all locators in the distributed system. The locator also persists the shared
        configurations on disk as <codeph>cluster.xml</codeph> and
          <codeph>cluster.properties</codeph> files. You can use those shared cluster
        configuration files to re-start your system, migrate the system to a new environment, add
        new members to a distributed system, or to restore existing members after a failure. </p>
      <p>A basic cluster configuration consists of: </p>
      <ul id="ul_fjg_pml_cl">
        <li><codeph>cluster.xml</codeph> file shared by the cluster </li>
        <li><codeph>cluster.properties</codeph> file shared by the cluster</li>
        <li>Deployed jar files containing application Java classes. </li>
      </ul>
      <p>See <xref href="../../configuring/cluster_config/gfsh_persist.xml"/> and
          <xref
          href="../../configuring/cluster_config/gfsh_config_troubleshooting.xml#concept_ylt_2cb_y4"
        /> for additional details on gfsh cluster configuration files.</p>
      <p>Using the gfsh tool, you can easily migrate a <keyword keyref="product_name"/>-based
        application from a development environment into a testing or production environment. </p>
    </section>
    <section>
      <title>Executing gfsh commands with the management API</title>
      <p>You can also use <keyword keyref="product_name"/>'s management APIs to execute gfsh
        commands in a Java class. See <xref
          href="gfsh_and_management_api.xml#concept_451F0978285245E69C3E8DE795BD8635"/>.</p>
    </section>
    <section>
      <title>Member Configuration Management</title>
      <p>When you issue gfsh commands and have the cluster configuration service enabled (on a
        locator), <keyword keyref="product_name"/> saves the configurations created within gfsh by
        building a <codeph>cluster.xml</codeph> and <codeph>cluster.properties</codeph>
        files for the entire cluster, or group of members.</p>
      <p>You can also directly create configurations using <codeph>cache.xml</codeph> and
          <codeph>gemfire.properties</codeph> files and manage the members individually.</p>
    </section>
    <section>
      <title>Java Management Extension (JMX) MBeans</title>
      <p><keyword keyref="product_name"/> uses a federated Open MBean strategy to manage and monitor
        all members of the distributed system. Your Java classes interact with a single MBeanServer
        that aggregates MBeans from other local and remote members. Using this strategy gives you a
        consolidated, single-agent view of the distributed system.</p>
      <p><keyword keyref="product_name"/>'s implementation of JMX is industry-standard and friendly
        to generic JMX clients. You can monitor or manage the distributed system by using any
        third-party tool that is compliant with JMX. For example, JConsole.</p>
      <p>See <xref href="management_and_monitoring.xml"
        /></p>
    </section>
    <section>
      <title><keyword keyref="product_name"/> Java API </title>
      <p>The <keyword keyref="product_name"/> API provides a set of Java classes you can use to
        manage and monitor a distributed system. See the
          <apiname>com.gemstone.gemfire.management</apiname> package in the <keyword
          keyref="product_name"/> JavaDocs .</p>
    </section>
    <section>
      <title><keyword keyref="product_name"/> Pulse</title>
      <p><keyword keyref="product_name"/> Pulse is a Web Application that provides a graphical
        dashboard for monitoring vital, real-time health and performance of <keyword
          keyref="product_name"/> clusters, members, and regions.</p>
      <p>Use Pulse to examine total memory, CPU, and disk space used by members, uptime statistics,
        client connections, and critical notifications. Pulse communicates with a
          <keyword keyref="product_name"/> JMX manager to provide a complete view of your <keyword
          keyref="product_name"/> deployment. </p>
      <p>See <xref
          href="../../tools_modules/pulse/chapter_overview.xml"
        />.</p>
    </section>
    <section>
      <title>JConsole</title>
      <p>JConsole is a JMX monitoring utility provided with a Java Development Kit (JDK). You use
        gfsh to connect to <keyword keyref="product_name"/>, and then launch JConsole with a gfsh
        command. The JConsole application allows you to browse MBeans, attributes, operations, and
        notifications. See <xref
          href="mbeans_jconsole.xml"/>. </p>
    </section>
  </conbody>
</concept>
