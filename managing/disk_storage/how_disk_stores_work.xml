<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="how_disk_stores_work">
	<title>How Disk Stores Work</title>
	<shortdesc>Overflow and persistence use disk stores individually or together to store data. </shortdesc>
	<conbody>
		<section id="section_1A93EFBE3E514918833592C17CFC4C40">
			<p>Disk storage is available for these items:</p>
				<ul id="ul_1888717500314F6682ADBADC27EAFEF6">
					<li id="li_AB1DCF110A3C4AC89293472E658C7EA2"><b>Regions</b>. Persist and/or
						overflow data from regions. </li>
					<li id="li_6D8F271E533649C5B63D718F9D6FC243"><b>Server’s client subscription
							queues</b>. Overflow the messaging queues to control memory use. </li>
					<li id="li_E2B1610F6B9E4E72BB5CCB0F7B4EF60D"><b>Gateway sender queues</b>.
						Persist these for high availability. These queues always overflow. </li>
					<li id="li_1C4F16D5988D401DB4C07A8A52F4692D"><b>PDX serialization metadata</b>.
						Persist metadata about objects you serialize using <keyword
							keyref="product_name"/> PDX serialization. </li>
				</ul>
			<p>Each member has its own set of disk stores, and they are completely separate from the disk
				stores of any other member. For each disk store, define where and how the data is
				stored to disk. You can store data from multiple regions and queues in a single disk
				store. </p>
			<p>This figure shows a member with disk stores D through R defined. The member has two
				persistent regions using disk store D and an overflow region and an overflow queue
				using disk store R. </p>
			<p>
				<image href="../../images/diskStores-1.gif"
					id="image_CB7972998C4A40B2A02550B97A723536" placement="break"/>
			</p>
		</section>
		<section id="section_433EEEA1560D40DD9842200181EB1D0A">
			<title>What <keyword keyref="product_name"/> Writes to the Disk Store </title>
			<p>This list describes the items that <keyword keyref="product_name"/> comprise the disk store:</p>
					<ul id="ul_45A4713610114CC5BBB9D722EF1FE83C">
					<li id="li_FCA43E7782B6424E95C1BEEC676D4E00">The members that host the store,
						and information on their status, such as which members are online and which
						members are offline and time stamps. </li>
					<li>A disk store identifier.</li>
					<li>Which regions are in the disk store, specified by region name.  </li>
					<li>Colocated regions that the regions in the disk store are dependent upon.</li>
					<li id="li_AF16EC2AA87C43BD9CBA9C929B19527E">A set of files that specify all
						keys for the regions, as well as all operations on the regions. Given both
						keys and operations, a region can be recreated when a member is restarted.
					</li>
				</ul>
			<p><keyword keyref="product_name"/> does not write indexes to disk. </p>
		</section>
		<section id="section_C1A047CD5518499D94A0E9A0328F6DB8">
			<title>Disk Store State</title>
			<p>The files for a disk store are used by <keyword keyref="product_name"/> as a group.
				Treat them as a single entity. If you copy them, copy them all together. Do not
				change the file names. </p>
			<p>Disk store access and management differs according to whether the member is online or offline. </p>
			<p>While a member is running, its disk stores are online. When the member exits and is not
				running, its disk stores are offline.</p>
				<ul id="ul_A53D87A420384BEFA71F566690FC9B89">
					<li id="li_8C4877ABA6CB43A08461785C45ADB0FA">Online, a disk store is owned and
						managed by its member process. To run operations on an online disk store,
						use API calls in the member process, or use the <codeph>gfsh</codeph>
						command-line interface.</li>
					<li id="li_AC8AD15AC37548F49132774E29BF660D">Offline, the disk store is just a
						collection of files in the host file system. The files are accessible based
						on file system permissions. You can copy the files for backup or to move the
						member’s disk store location. You can also run some maintenance operations,
						such as file compaction and validation, by using the <codeph>gfsh</codeph>
						command-line interface. When offline, the disk store's information is
						unavailable to the distributed system. For partitioned regions, region data
						is split between multiple members, and therefore the start up of a member is
						dependent on and must wait for all members to be online. An attempt to
						access an entry that is stored on disk by an offline member results in a
							<codeph>PartitionOfflineException</codeph>. </li>
				</ul>
		</section>
	</conbody>
</concept>
