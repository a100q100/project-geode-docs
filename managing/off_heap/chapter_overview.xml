<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="off-heap">
	<title>Using Off-Heap Memory</title>
	<shortdesc>Large quantities of memory outside the control of the Java garbage collector may be used
		for region data values by enabling the off-heap feature.</shortdesc>
	<conbody>
		<p>Garbage collection within a JVM can prove to be a performance impediment. A server cannot exert
			control over when garbage collection within the JVM heap memory takes place, and the
			server has little control over the triggers for invocation.</p>
		<p><keyword keyref="product_name"/> can be configured to store region values in off-heap memory,
			which is memory within the JVM that is not subject to Java garbage collection. The keys
			are stored in heap memory space. <keyword keyref="product_name"/>'s own slab memory
			manager handles the off-heap memory with better performance than the Java garbage
			collector would for certain sets of region data. Regions that meet the criterion are
			excellent candidates for using the off-heap feature.</p>
		<p>The off-heap memory manager is efficient at handling region data values that are all the same
			size or are of fixed sizes. It does not do well with varying sized region values, as
			this causes a fragmentation of free space into chunks that cannot be easily re-used. The
			fragmentation can result in a time consuming coalesce. With fixed and same-sized data
			values allocated within the off-heap memory, freed chunks can often be re-used, and
			there is little to no need for a coalesce.</p>
		<p>Region values that are less than or equal to eight bytes in size will not reside in
			off-heap memory, even if the region is configured to use off-heap memory. These very
			small size region values reside in place of where the reference to the data would have
			been. This performance enhancement saves space and load time.</p>
	</conbody>
</concept>
