<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<dita>
	<concept id="locking-memory">
		<title>Locking Memory (Linux Systems Only)</title>
		<conbody>
			<p>On Linux systems, you can lock memory to prevent the operating system from paging out heap or
				off-heap memory. To use this feature:<ol id="ol_umj_whw_cv">
					<li> Configure the operating system limits for locked memory. Increase the
						operating system's <codeph>ulimit -l</codeph> value (the maximum size that
						may be locked in memory) from the default (typically 32 KB or 64 KB) to at
						least the total amount of memory used by <keyword keyref="product_name"/>
						for on-heap or off-heap storage. To view the current setting, enter
							<codeph>ulimit -a</codeph> at a shell prompt and find the value for
							<codeph>max locked
						memory</codeph>:<codeblock># ulimit -a
...
max locked memory       (kbytes, -l) 64
...
</codeblock>Use
							<codeph>ulimit -l <i>max-size-in-kbytes</i></codeph> to raise the limit.
						For example, to set the locked memory limit to 64
						GB:<codeblock># ulimit -l 64000000</codeblock></li>
					<li>Using locked memory in this manner increases the time required to start
							<keyword keyref="product_name"/>. The additional time required to start
							<keyword keyref="product_name"/> depends on the total amount of memory
						used, and can range from several seconds to 10 minutes or more. To improve
						startup time and reduce the potential of member timeouts, instruct the
						kernel to free operating system page caches just before starting a <keyword
							keyref="product_name"/> member by issuing the following command:
						<codeblock>$ echo 1 > /proc/sys/vm/drop_caches</codeblock></li>
					<li>Start each <keyword keyref="product_name"/> data store with the gfsh
							<codeph>-lock-memory=true</codeph> option. If you deploy more than one
						server per host, begin by starting each server sequentially. Starting
						servers sequentially avoids a race condition in the operating system that
						can cause failures (even machine crashes) if you accidentally over-allocate
						the available RAM. After you verify that the system configuration is stable,
						you can then start servers concurrently.</li>
				</ol></p>
		</conbody>
	</concept>
</dita>
