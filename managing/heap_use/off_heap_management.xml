<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<dita>
	<concept id="managing-off-heap-memory">
	<title>Managing Off-Heap Memory</title>
		<shortdesc><keyword keyref="product_name"/> can be configured to store region values in
			off-heap memory, which is memory within the JVM that is not subject to Java garbage
			collection.</shortdesc>
		<conbody>

		<p>Garbage collection (GC)  within a JVM can prove to be a performance impediment. A server cannot
				exert control over when garbage collection within the JVM heap memory takes place,
				and the server has little control over the triggers for invocation. Off-heap memory
				offloads values to a storage area that is not subject to Java GC. By taking
				advantage of off-heap storage, an application can reduce the amount of heap storage
				that is subject to GC overhead.</p>
		<p> Off-heap memory works in conjunction with the heap, it does not replace it. The keys are
				stored in heap memory space. <keyword keyref="product_name"/>'s own memory manager
				handles the off-heap memory with better performance than the Java garbage collector
				would for certain sets of region data. </p>
		<p>The resource manager monitors the contents of off-heap memory and invokes memory management
				operations in accordance with two thresholds similar to those used for monitoring
				the JVM heap: <codeph>eviction-off-heap-percentage</codeph> and
					<codeph>critical-off-heap-percentage</codeph>.</p>
			<section>
				<title>On-heap and Off-heap Objects</title>
				<p>The following objects are always stored in the JVM heap:<ul id="ul_sgv_p5b_fv">
						<li>Region metadata</li>
						<li>Entry metadata</li>
						<li>Keys</li>
						<li>Indexes</li>
						<li>Subscription queue elements</li>
					</ul></p>
				<p>The following objects can be stored in off-heap memory:<ul id="ul_vvs_t5b_fv">
						<li>Values - maximum value size is 2GB</li>
						<li>Reference counts</li>
						<li>List of free memory blocks</li>
						<li>WAN queue elements</li>
					</ul></p>
				<note>Do not use functional range indexes with off-heap data, as they are not
					supported. An attempt to do so generates an exception.</note>
			</section>
			<section>
				<title>Off-heap Recommendations</title>
		<p>Off-heap storage is best suited to data patterns where:<ul id="ul_dzc_sbg_z5">
			<li>Stored values are relatively uniform in size</li>
			<li>Stored values are mostly less than 128K in size</li>
					<li>The usage patterns involve cycles of many creates followed by destroys or
						clear</li>
					<li>The values do not need to be frequently deserialized</li>
						<li>Many of the values are long-lived reference data</li>
		</ul></p>
				<p>Be aware that <keyword keyref="product_name"/> has to perform extra work to access the data
					stored in off-heap memory since it is stored in serialized form. This extra work
					may cause some use cases to run slower in an off-heap configuration, even though
					they use less memory and avoid garbage collection overhead. However, even with
					the extra deserialization, off-heap storage may give you the best performance.
					Features that may increase overhead include<ul id="ul_oxv_4jp_cv">
						<li>frequent updates</li>
						<li>stored values of widely varying sizes</li>
						<li>deltas</li>
						<li>queries.</li>
					</ul>
				</p>
			</section>
			<section>
				<title>Implementation Details</title>

				<p>The off-heap memory manager is efficient at handling region data values that are all the same
					size or are of fixed sizes. With fixed and same-sized data values allocated
					within the off-heap memory, freed chunks can often be re-used, and there is
					little or no need to devote cycles to defragmentation.</p>
				<p>Region values that are less than or equal to eight bytes in size will not reside in off-heap
					memory, even if the region is configured to use off-heap memory. These very
					small size region values reside in the JVM heap in place of a reference to an
					off-heap location. This performance enhancement saves space and load time.</p>
	</section>
			<section>
				<title>Controlling Off-heap Use with the Resource Manager</title>
				<p>The <keyword keyref="product_name"/> resource manager controls off-heap memory by means of
					two thresholds, in much the same way as it does JVM heap memory. See <xref
						href="heap_management.xml#how_the_resource_manager_works"/>. The resource
					manager prevents the cache from consuming too much off-heap memory by evicting
					old data. If the off-heap memory manager is unable to keep up, the resource
					manager refuses additions to the cache until the off-heap memory manager has
					freed an adequate amount of memory.</p>
				<p>The resource manager has two threshold settings, each expressed as a percentage
					of the total off-heap memory. Both are disabled by default. <ol
						id="ol_AC9431F3040B4C5499FE2F1FC2A8EFF5">
						<li id="li_2C361A1F3D9549ABA34B3770894599F0"><b>Eviction Threshold</b>. The percentage of
							off-heap memory at which eviction should begin. Evictions continue until
							the resource manager determines that off-heap memory use is again below
							the eviction threshold. Set the eviction threshold with the
								<codeph>eviction-off-heap-percentage</codeph> region attribute. The
							resource manager enforces an eviction threshold only on regions with the
							HEAP_LRU characteristic. If critical threshold is non-zero, the default
							eviction threshold is 5% below the critical threshold. If critical
							threshold is zero, the default eviction threshold is 80% of total
							off-heap memory.<p>The resource manager enforces eviction thresholds
								only on regions whose LRU eviction policies are based on heap
								percentage. Regions whose eviction policies based on entry count or
								memory size use other mechanisms to manage evictions. See <xref
									href="../../developing/eviction/chapter_overview.xml"/> for more
								detail regarding eviction policies.</p></li>
						<li id="li_0B2E41AD95624A6CAD079D39C5661B10"><b>Critical Threshold</b>. The percentage of
							off-heap memory at which the cache is at risk of becoming inoperable.
							When cache use exceeds the critical threshold, all activity that might
							add data to the cache is refused. Any operation that would increase
							consumption of off-heap memory throws a
								<codeph>LowMemoryException</codeph> instead of completing its
							operation. Set the critical threshold with the
								<codeph>critical-off-heap-percentage</codeph> region
								attribute.<p>Critical threshold is enforced on all regions,
								regardless of LRU eviction policy, though it can be set to zero to
								disable its effect.</p>
						</li>
					</ol></p>
			</section>
		
		<section>
			<title>Specifying Off-heap Memory</title>
			<p>To use off-heap memory, specify the following options when setting up servers and
				regions:
				<ul id="ul_dtl_nxh_1v">
						<li> Start the JVM as described in <xref
								href="heap_management.xml#section_590DA955523246ED980E4E351FF81F71"
							/>. In particular, set the initial and maximum heap sizes to the same
							value. Sizes less than 32GB are optimal when you plan to use off-heap
							memory. </li>
						<li>
							<p>From gfsh, start each server that will support off-heap memory with a non-zero
									<codeph>off-heap-memory-size</codeph> value, specified in
								megabytes (m) or gigabytes (g). If you plan to use the resource
								manager, specify critical threshold, eviction threshold, or (in most
								cases) both. </p>
							<p>Example:
								<codeblock>gfsh> start server --name=server1 -–initial-heap=10G -–max-heap=10G -–off-heap-memory-size=200G \
-–lock-memory=true -–critical-off-heap-percentage=90 -–eviction-off-heap-percentage=80</codeblock></p>
						</li>
					<li>Mark regions whose entry values should be stored off-heap by setting the
								<codeph>off-heap</codeph> region attribute to <codeph>true</codeph>
							Configure other region attributes uniformly for all members that host
							data for the same region. . <p>Example:
								<codeblock>gfsh&gt;create region --name=region1 --type=PARTITION_HEAP_LRU --off-heap=true</codeblock></p></li>
				</ul></p>
		</section>
		<section>
				<title>gfsh Off-heap Support</title>
				<p>gfsh supports off-heap memory in server and region creation operations and in
					reporting functions:</p>
				<dl>
					<dlentry>
						<dt>alter disk-store</dt>
						<dd><codeph>--off-heap=(true | false)</codeph> resets the off-heap attribute for the specified
							region. See <xref href="../../tools_modules/gfsh/command-pages/alter.xml#topic_99BCAD98BDB5470189662D2F308B68EB"
							/> for details.</dd>
					</dlentry>
					<dlentry>
						<dt>create region</dt>
						<dd><codeph>--off-heap=(true | false) </codeph>sets the off-heap attribute for the specified
							region. See <xref href="../../tools_modules/gfsh/command-pages/create.xml#topic_54B0985FEC5241CA9D26B0CE0A5EA863"
							/> for details. </dd>
					</dlentry>
					<dlentry>
						<dt>describe member</dt>
						<dd>displays off-heap size</dd>
					</dlentry>
					<dlentry>
						<dt>describe offline-disk-store</dt>
						<dd>shows if an off-line region is off-heap</dd>
					</dlentry>
					<dlentry>
						<dt>describe region</dt>
						<dd>displays the value of a region's off-heap attribute</dd>
					</dlentry>
					<dlentry>
						<dt>show metrics</dt>
						<dd>includes off-heap metrics <codeph>maxMemory</codeph>, <codeph>freeMemory</codeph>,
								<codeph>usedMemory</codeph>, <codeph>objects</codeph>,
								<codeph>fragmentation</codeph> and
								<codeph>defragmentationTime</codeph></dd>
					</dlentry>
					<dlentry>
						<dt>start server</dt>
						<dd>supports off-heap options <codeph>--lock-memory</codeph>,
							<codeph>&#x2011;&#x2011;off-heap-memory-size</codeph>,
							<codeph>&#x2011;&#x2011;critical-off-heap-percentage</codeph>, and
							<codeph>&#x2011;&#x2011;eviction-off-heap-percentage</codeph> See <xref href="../../tools_modules/gfsh/command-pages/start.xml#topic_3764EE2DB18B4AE4A625E0354471738A"
							/> for details.</dd>
					</dlentry>
				</dl>
			</section>
		<section><title>ResourceManager API</title>
			<p>The <codeph>com.gemstone.gemfire.cache.control.ResourceManager</codeph> interface defines
					methods that support off-heap use:</p>
				<ul id="ul_ajj_1g4_2v">
					<li><codeph>public void setCriticalOffHeapPercentage(float Percentage)</codeph></li>
					<li><codeph>public float getCriticalOffHeapPercentage()</codeph></li>
					<li><codeph>public void setEvictionOffHeapPercentage(float Percentage)</codeph></li>
					<li><codeph>public float getEvictionOffHeapPercentage()</codeph></li>
				</ul>
		<p>The gemfire.properties file supports one off-heap property:</p>
			<dl>
						<dlentry>
							<dt><codeph>off-heap-memory-size</codeph></dt>
							<dd>Specifies the size of off-heap memory in megabytes (m) or gigabytes (g). For
							example:<codeblock>off-heap-memory-size=4096m
off-heap-memory-size=120g</codeblock>
							See <xref href="../../reference/topics/gemfire_properties.xml"/> for
							details.</dd>
						</dlentry>
					</dl>
				<p>The cache.xml file supports one region attribute:</p>
				<dl>
					<dlentry>
						<dt><codeph>off-heap(=true | false)</codeph></dt>
						<dd>Specifies that the region uses off-heap memory; defaults to <codeph>false</codeph>. For
							example:<codeblock>&lt;region-attributes
  off-heap="true">
&lt;/region-attributes></codeblock>
							See <xref href="../../reference/topics/cache_xml.xml#region-attributes"/> for
							details.</dd>
					</dlentry>
				</dl>
				<p>The cache.xml file supports two resource manager attributes:</p>
				<dl>
					<dlentry>
						<dt><codeph>critical-off-heap-percentage=<i>value</i></codeph></dt>
						<dd>Specifies the percentage of off-heap memory at or above which the cache
							is considered in danger of becoming inoperable due to out of memory
							exceptions. See <xref href="../../reference/topics/cache_xml.xml#resource-manager"/> for
							details.</dd>
					</dlentry>
					<dlentry>
						<dt><codeph>eviction-off-heap-percentage=<i>value</i></codeph></dt>
						<dd>Specifies the percentage of off-heap memory at or above which eviction
							should begin. Can be set for any region, but actively operates only in
							regions configured for HEAP_LRU eviction. See <xref href="../../reference/topics/cache_xml.xml#resource-manager"/> for
							details.</dd>
					</dlentry>
				</dl>
				<p>For
					example:<codeblock>&lt;cache>
...
   &lt;resource-manager 
      critical-off-heap-percentage="99.9" 
      eviction-off-heap=-percentage="85"/>
...
&lt;/cache></codeblock></p>
		</section>
			<section id="section_o4s_tg5_gv">
				<title>Tuning Off-heap Memory Usage</title>
				<p><keyword keyref="product_name"/> collects statistics on off-heap memory usage
					which you can view with the gfsh <codeph>show metrics</codeph> command. See
						<xref href="../../reference/statistics/statistics_list.xml#topic_ohc_tjk_w5"
					/> for a description of available off-heap statistics.</p>
				<p>Off-heap memory is optimized, by default, for storing values of 128 KB in size.
					This figure is known as the "maximum optimized stored value size," which we will
					denote here by <i>maxOptStoredValSize</i>. If your data typically runs larger,
					you can enhance performance by increasing the OFF_HEAP_FREE_LIST_COUNT system
					parameter to a number larger than <codeph><i>maxOptStoredValSize</i>/8</codeph>,
					where <i>maxOptStoredValSize</i> is expressed in KB (1024 bytes). So, the
					default values correspond
					to:<codeblock>128 KB / 8 = (128 * 1024) / 8 = 131,072 / 8 = 16,384
-Dgemfire.OFF_HEAP_FREE_LIST_COUNT=16384</codeblock>
					To optimize for a maximum optimized stored value size that is twice the default,
					or 256 KB, the free list count should be
					doubled:<codeblock>-Dgemfire.OFF_HEAP_FREE_LIST_COUNT=32768</codeblock></p>
				<p>During the tuning process, you can toggle the <codeph>off-heap</codeph> region
					attribute on and off, leaving other off-heap settings and parameters in place,
					in order to compare your application's on-heap and off-heap performance.</p>
			</section>
	</conbody>
</concept>
</dita>
