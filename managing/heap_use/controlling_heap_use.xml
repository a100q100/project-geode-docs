<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="configuring_resource_manager">
	<title>Control Heap Use with the Resource Manager</title>
	<shortdesc>Resource manager behavior is closely tied to the triggering of GC activities, the use
		of concurrent GCs in the JVM, and the number of parallel GC threads used for concurrency. </shortdesc>
	<conbody>
		<section id="section_B47A78E7BA0048C89FBBDB7441C308BE">
			<p>The recommendations provided here for using the manager assume you have a solid
				understanding of your Java VM's heap management and garbage collection service. </p>
			<p>For the members where you want to implement the resource manager functionality: <ol
					id="ol_8A9C2BAB102842E49EBF68B494391980">
					<li id="li_37DDA02E74F54A9E9B271F6DD6DEBA5E">Configure <keyword
							keyref="product_name"/> for heap LRU management. </li>
					<li id="li_D536B22DD1834393AB0860A24AA81314">Set the JVM GC tuning parameters to
						handle heap and garbage collection in conjunction with the <keyword
							keyref="product_name"/> manager. </li>
					<li id="li_4539A438E52043ECAE42EAC5774CE6F4">Monitor and tune heap LRU
						configurations and your GC configurations. </li>
					<li id="li_313DAC5D943346DAB0281623C4689BC1">Before going into production, run
						your system tests with application behavior and data loads that approximate
						your target systems so you can tune as well as possible for production
						needs. </li>
					<li id="li_94E859E96DE9463CAA9C85D0EFAE670F">In production, keep monitoring and
						tuning to meet changing needs. </li>
				</ol>
			</p>
		</section>
		<section id="section_4949882892DA46F6BB8588FA97037F45">
			<title>Configure <keyword keyref="product_name"/> for Heap LRU Management</title>
			<p>The configuration terms used here are <codeph>cache.xml</codeph> elements and
				attributes, but you can also configure through <codeph>gfsh</codeph> and the
					<codeph>com.gemstone.gemfire.cache.control.ResourceManager</codeph> and
					<codeph>Region</codeph> APIs. <ol id="ol_DA0AF4AD773C4697B4A24ACD038396CD">
					<li>When starting up your server, set <codeph>initial-heap</codeph> and
							<codeph>max-heap</codeph> to the same value.</li>
					<li id="li_DD58D1DBAA6742CF96BC8857F54027C9">Set the
							<codeph>resource-manager</codeph>
						<codeph>critical-heap-percentage</codeph> threshold. This should be as as
						close to 100 as possible while still low enough so the manager's response
						can prevent the member from hanging or getting
							<codeph>OutOfMemoryError</codeph>. The threshold is zero (no threshold)
						by default. <p>
							<note>When you set this threshold, it also enables a query monitoring
								feature that prevents most out-of-memory exceptions when executing
								queries or creating indexes. See <xref
									href="../../developing/querying_basics/monitor_queries_for_low_memory.xml#topic_685CED6DE7D0449DB8816E8ABC1A6E6F"
								/>.</note>
						</p>
					</li>
					<li id="li_5ABE1BDC58E04777A15B581BA617C88B">Set the
							<codeph>resource-manager</codeph>
						<codeph>eviction-heap-percentage</codeph> threshold to a value lower than
						the critical threshold. This should be as high as possible while still low
						enough to prevent your member from reaching the critical threshold. The
						threshold is zero (no threshold) by default. </li>
					<li id="li_475488CEFD8D48D5BE1CCBAE024D2D7D">Decide which regions will
						participate in heap eviction and set their
							<codeph>eviction-attributes</codeph> to
							<codeph>lru-heap-percentage</codeph>. See <xref
							href="../../developing/eviction/chapter_overview.xml"
							type="concept" format="dita" scope="local"/>. The regions you configure
						for eviction should have enough data activity for the evictions to be useful
						and should contain data your application can afford to delete or offload to
						disk. </li>
				</ol>
			</p>
		</section>
		<section id="section_5D88064B75C643B0849BBD4345A6671B">
			<p>gfsh
				Example:<codeblock>gfsh&gt;start server --name=server1 --initial-heap=30MB --max-heap=30MB \
--critical-heap-percentage=90 --eviction-heap-percentage=80</codeblock></p>
			<p>cache.xml Example: <codeblock>&lt;cache>
   &lt;region refid="REPLICATE_HEAP_LRU" /&gt;
   ...
   &lt;resource-manager critical-heap-percentage="80" eviction-heap-percentage="60"/>
&lt;/cache></codeblock>
				<note>The <codeph>resource-manager</codeph> specification must appear after the
					region declarations in your cache.xml file.</note></p>
		</section>
		<section id="section_590DA955523246ED980E4E351FF81F71">
			<title>Set the JVM's GC Tuning Parameters</title>
			<p>See your JVM documentation for all JVM-specific settings that can be used to improve
				GC response. </p>
			<p>At a minimum, do the following: <ol id="ol_DC01BC62088F413FBE75A5644C8B6A3F">
					<li id="li_0A1C47243C794135BD920F295FA6A0FC">Set the initial and maximum heap
						switches, <codeph>-Xms</codeph> and <codeph>-Xmx</codeph>, to the same
						values. </li>
					<li id="li_9FB6FB8C5963422EA08C314AF2895B40">Configure your JVM for concurrent
						mark-sweep collector garbage collection. </li>
					<li id="li_74E207A05D1643F98DCF91C64969DDA9">If your JVM allows, configure it to
						initiate concurrent mark-sweep collection when heap use is at least 10%
						lower than your setting for the resource manager
							<codeph>eviction-heap-percentage</codeph>. You want the collector to be
						working when <keyword keyref="product_name"/> is evicting or the evictions
						will not result in more free memory. For example if the
							<codeph>eviction-heap-percentage</codeph> is set to 65, set your garbage
						collection to start when the heap use is no higher than 55%. </li>
				</ol>
			</p>
			<table id="table_7CD0BD404DAB41D0B4253D2B993FBDD9">
				<tgroup cols="3">
					<colspec colname="1" colnum="1" colwidth="110"/>
					<colspec colname="2" colnum="2" colwidth="230"/>
					<colspec colname="3" colnum="3" colwidth="320"/>
					<thead>
						<row>
							<entry>JVM </entry>
							<entry>Conc mark-sweep switch flag </entry>
							<entry>CMS initiation (begin at heap % N) </entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>Sun HotSpot </entry>
							<entry>
								<codeph>-XX:+UseConcMarkSweepGC</codeph>
							</entry>
							<entry>
								<codeph>-XX:CMSInitiatingOccupancyFraction=N</codeph>
							</entry>
						</row>
						<row>
							<entry>JRockit </entry>
							<entry>
								<codeph>-Xgc:gencon</codeph>
							</entry>
							<entry>
								<codeph>-XXgcTrigger:N</codeph>
							</entry>
						</row>
						<row>
							<entry>IBM </entry>
							<entry>
								<codeph>-Xgcpolicy:gencon</codeph>
							</entry>
							<entry>N/A </entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<p>For the <codeph>gfsh start server</codeph> command, pass these settings with the
					<codeph>--J</codeph> switch, like <codeph>--J=-XX:+UseConcMarkSweepGC</codeph>. </p>
			<p>The following is an example of setting JVM for an
					application:<codeblock>$ java app.MyApplication -Xms=30MB -Xmx=30MB -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=60</codeblock><note>Pivotal
					recommends that you do not use the <codeph>-XX:+UseCompressedStrings</codeph>
					and <codeph>-XX:+UseStringCache</codeph> JVM configuration properties when
					starting up servers. These JVM options can cause issues with data corruption and
					compatibility.</note></p>
		</section>
		<section id="section_DE1CC494C2B547B083AA00821250972A">
			<title>Monitor and Tune Heap LRU Configurations</title>
			<p>In tuning the resource manager, your central focus should be keeping the member below the
				critical threshold. Although the critical threshold helps avoid member hangs and
				crashes, a member in the critical state negatively impacts the entire distributed
				system's performance because it throws exceptions for distributed updates. To stay
				below the critical threshold, tune so that the <keyword keyref="product_name"/>
				eviction and the JVM's GC respond adequately when the eviction threshold is reached. </p>
			<p>Use the statistics provided by your JVM to make sure your memory and GC settings are
				sufficient for your needs. </p>
			<p>The <keyword keyref="product_name"/>
				<codeph>ResourceManagerStats</codeph> provide information about memory use and the
				manager thresholds and eviction activities. </p>
			<p>If your application is spiking above the critical threshold on a regular basis, try lowering
				the eviction threshold. If the application never goes near the critical threshold,
				you might raise the eviction threshold to gain more usable memory without the
				overhead of unneeded evictions or GC cycles. </p>
			<p>The settings that will work well for your system depend on a number of factors,
				including these: <ul id="ul_20162307E6494A3EAF3A7003D8D4B4D6">
					<li id="li_5C12E3176B9149BD9337595810EA998B">The size of the data objects your application
						stores in the cache. Very large data objects can be evicted and garbage
						collected relatively quickly. The same amount of space in use by many small
						objects takes more processing effort to clear and might require lower
						thresholds to allow eviction and GC activities to keep up. </li>
					<li id="li_B0ADFB5F2B9D46DBA3931C69F13DE726">Application update frequency. Applications that
						quickly put a lot of data into the cache can more easily overrun the
						eviction and GC capabilities. Applications that operate more slowly may be
						more easily offset by eviction and GC efforts, possibly allowing you to set
						your thresholds higher than in the more volatile system. </li>
					<li id="li_7E558C65DC234A128A44FB8532F17C17">Your choice of JVM. Each JVM has
						its own GC behavior, which affects how efficiently the collector can
						operate, how quickly it kicks in when needed, and other factors. </li>
				</ul>
			</p>
			<p>In this sample statistics chart in VSD, the manager's evictions and the JVM's GC efforts are
				good enough to keep heap use very close to the eviction threshold. The eviction
				threshold could be increased to a setting closer to the critical threshold, allowing
				the member to keep more data in tenured memory without the risk of overwhelming the
				JVM. This chart also shows when the manager was running cache evictions. </p>
			<image href="../../images/DataManagement-10.gif"
				id="image_2943FAA725374674AAD9ED280923440F" placement="break"/>
			<p>In this next chart, it looks like the manager's evictions are kicking in at the right time,
				but the concurrent mark sweep GC is not starting soon enough to keep memory use in
				check. It might be that it is not configured to start as soon as it should. GC
				should be started just before the eviction threshold is reached. Or there might be
				some other issue with the garbage collection service. </p>
			<image href="../../images/DataManagement-11.gif"
				id="image_A16112A8AA3847C195D7CFFC7F9FDB23" placement="break"/>
		</section>
	</conbody>
</concept>
