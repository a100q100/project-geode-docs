<?xml version="1.0"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_22EE6DDE677F4E8CAF5786E17B4183A9">
	<title>Handling Forced Cache Disconnection Using Autoreconnect</title>
	<shortdesc>A <keyword keyref="product_name"/> member may be forcibly disconnected from a
			<keyword keyref="product_name"/> distributed system if the member is unresponsive for a
		period of time, or if a network partition separates one or more members into a group that is
		too small to act as the distributed system. </shortdesc>
	<conbody>
		<section>
			<title>How the Autoreconnection Process Works</title>
			<p>After being disconnected from a distributed system a <keyword keyref="product_name"/>
				member shuts down and then automatically restarts into a "reconnecting" state, while
				periodically attempting to rejoin the distributed system by contacting a list of
				known locators. If the member succeeds in reconnecting to a known locator, the
				member rebuilds its view of the distributed system from existing members and
				receives a new distributed system ID. </p>
			<p>If the member cannot connect to a known locator, the member will then check to see if it
				itself is a locator (or hosting an embedded locator process). If the member is a
				locator, then the member does a quorum-based reconnect; it will attempt to contact a
				quorum of the members that were in the membership view just before it became
				disconnected. If a quorum of members can be contacted, then startup of the
				distributed system is allowed to begin. Since the reconnecting member does not know
				which members survived the network partition event, all members that are in a
				reconnecting state will keep their UDP unicast ports open and respond to ping
				requests.</p>
			<p>Membership quorum is determined using the same member weighting system used in
				network partition detection. See <xref
					href="../network_partitioning/membership_coordinators_lead_members_and_weighting.xml#concept_23C2606D59754106AFBFE17515DF4330"
				/>.</p>
			<p>Note that when a locator is in the reconnecting state, it provides no discovery
				services for the distributed system. </p>
			<p>After the cache has reconnected, applications must fetch a reference to the new
				Cache, Regions, DistributedSystem and other artifacts. Old references will continue
				to throw cancellation exceptions like
					<codeph>CacheClosedException(cause=ForcedDisconnectException)</codeph>.</p>
			<p>See the <keyword keyref="product_name"/>
				<codeph>DistributedSystem</codeph> and <codeph>Cache</codeph> Java API documentation
				for more information. </p>
		</section>
		<section>
			<title>Managing the Autoreconnection Process</title>
			<p>By default a <keyword keyref="product_name"/> member will try to reconnect until it
				is told to stop by using the <codeph>DistributedSystem.stopReconnecting()</codeph>
				or <codeph>Cache.stopReconnecting()</codeph> method. You can disable automatic
				reconnection entirely by setting <codeph>disable-auto-reconnect</codeph>
				<keyword keyref="product_name"/> property to "true."</p>
			<p>You can use <codeph>DistributedSystem</codeph> and <codeph>Cache</codeph> callback
				methods to perform actions during the reconnect process, or to cancel the reconnect
				process if necessary. </p>
			<p>The <codeph>DistributedSystem</codeph> and <codeph>Cache</codeph> API provide several
				methods you can use to take actions while a member is reconnecting to the
				distributed system:</p>
			<ul id="ul_fjt_2r3_3l">
				<li><codeph>DistributedSystem.isReconnecting()</codeph> returns true if the member is in the
					process of reconnecting and recreating the cache after having been removed from
					the system by other members. </li>
				<li><codeph>DistributedSystem.waitUntilReconnected(long, TimeUnit)</codeph> waits
					for a period of time, and then returns a boolean value to indicate whether the
					member has reconnected to the DistributedSystem. Use a value of -1 seconds to
					wait indefinitely until the reconnect completes or the member shuts down. Use a
					value of 0 seconds as a quick probe to determine if the member has
					reconnected.</li>
				<li><codeph>DistributedSystem.getReconnectedSystem()</codeph> returns the
					reconnected DistributedSystem.</li>
				<li><codeph>DistributedSystem.stopReconnecting()</codeph> stops the reconnection
					process and ensures that the DistributedSystem stays in a disconnected state. </li>
				<li><codeph>Cache.isReconnecting()</codeph> returns true if the cache is attempting
					to reconnect to a distributed system. </li>
				<li><codeph>Cache.waitForReconnect(long, TimeUnit)</codeph> waits for a period of
					time, and then returns a boolean value to indicate whether the DistributedSystem
					has reconnected. Use a value of -1 seconds to wait indefinitely until the
					reconnect completes or the cache shuts down. Use a value of 0 seconds as a quick
					probe to determine if the member has reconnected. </li>
				<li><codeph>Cache.getReconnectedCache()</codeph> returns the reconnected Cache.</li>
				<li><codeph>Cache.stopReconnecting()</codeph> stops the reconnection process and
					ensures that the DistributedSystem stays in a disconnected state.</li>
			</ul>
		</section>
		<section>
			<title>Operator Intervention</title>
			<p>You may need to intervene in the autoreconnection process if processes or hardware have
				crashed or are otherwise shut down before the network connection is healed. In this
				case the members in a "reconnecting" state will not be able to find the lost
				processes through UDP probes and will not rejoin the system until they are able to
				contact a locator.</p>
		</section>
	</conbody>
</concept>
