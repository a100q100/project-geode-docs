<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="multicast">
	<title>Provisioning Bandwidth for Multicast</title>
	<shortdesc>Multicast installations require more planning and configuration than TCP
		installations. With IP multicast, you gain scalability but lose the administrative
		convenience of TCP. </shortdesc>
	<prolog>
		<metadata>
			<keywords>
				<keyword>gemfire bandwidth provisioning</keyword>
				<keyword>gemfire multicast provisioning</keyword>
			</keywords>
		</metadata>
	</prolog>
	<conbody>
		<section id="section_B7DA88707CBF4713A1E287CAA9A80EB9">
			<p>When you install an application that runs over TCP, the network is almost always set
				up for TCP and other applications are already using it. When you install an
				application to run over IP multicast it may be the first multicast application on
				the network. </p>
			<p>Multicast is very dependent on the environment in which it runs. Its operation is
				affected by the network hardware, the network software, the machines, which <keyword keyref="product_name"/>
				processes run on which machines, and whether there are any competing applications.
				You could find that your site has connectivity in TCP but not in multicast because
				some switches and network cards do not support multicast. Your network could have
				latent problems that you would never see otherwise. To successfully implement a
				distributed <keyword keyref="product_name"/> system using multicast requires the cooperation of both system
				and network administrators. </p>
			<p><b>Bounded Operation Over Multicast</b>
			</p>
			<p>Group rate control is required for <keyword keyref="product_name"/> systems to maintain cache coherence. If
				your application delivers the same data to a group of members, your system tuning
				effort needs to focus on the slow receivers. </p>
			<p>If some of your members have trouble keeping up with the incoming data, the other
				members in the group may be impacted. At best, slow receivers cause the producer to
				use buffering, adding latency for the slow receiver and perhaps for all of them. In
				the worst case, throughput for the group can stop entirely while the producer’s CPU,
				memory and network bandwidth are dedicated to serving the slow receivers. </p>
			<p>To address this issue, you can implement a bounded operation policy, which sets
				boundaries for the producer’s operation. The appropriate rate limits are determined
				through tuning and testing to allow the fastest operation possible while minimizing
				data loss and latency in the group of consumers. This policy is suited to
				applications such as financial market data, where high throughput, reliable delivery
				and network stability are required. With the boundaries set correctly, your
				producer’s traffic cannot cause a network outage. </p>
			<p>Multicast protocols typically have a flow control protocol built into them to keep
				processes from being overrun. The <keyword keyref="product_name"/> flow control protocol uses the
				mcast-flow-control property to set producer and consumer boundaries for multicast
				flow operations. The property provides these three configuration settings: </p>
				<table id="table_5B359C8538854F43B680FB289984DDCD">
					<tgroup cols="2">
						<colspec colnum="1" colname="col1" colwidth="*"/>
						<colspec colnum="2" colname="col2" colwidth="*"/>
						<tbody>
							<row>
								<entry colname="col1">
									<p><codeph>byteAllowance</codeph>
									</p>
								</entry>
								<entry colname="col2">
									<p>Number of bytes that can be sent without a recharge. </p>
								</entry>
							</row>
							<row>
								<entry colname="col1">
									<p><codeph>rechargeThreshold</codeph>
									</p>
								</entry>
								<entry colname="col2">
									<p>Tells consumers how low the producer’s initial to remaining
										allowance ratio should be before sending a recharge. </p>
								</entry>
							</row>
							<row>
								<entry colname="col1"><codeph>rechargeBlockMs</codeph>
								</entry>
								<entry colname="col2">
									<p>Tells the producer how long to wait for a recharge before
										requesting one. </p>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			<p> </p>
		</section>
	</conbody>
</concept>
