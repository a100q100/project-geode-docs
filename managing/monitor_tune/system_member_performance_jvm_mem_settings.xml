<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="sys_mem_perf">
	<title>JVM Memory Settings and System Performance</title>
	<shortdesc>You configure JVM memory settings for the Java application by adding parameters to
		the java invocation. For the cache server, you add them to the command-line parameters for
		the gfsh <codeph>start server</codeph> command. </shortdesc>
	<conbody>
		<ul id="ul_5CA6DF1D214445808B45154B282219E1">
			<li id="li_0672E569D0D147278D307412B90CD9A8">JVM heap size—Your JVM may require more
				memory than is allocated by default. For example, you may need to increase heap size
				for an application that stores a lot of data. You can set a maximum size and an
				initial size, so if you know you will be using the maximum (or close to it) for the
				life of the member, you can speed memory allocation time by setting the initial size
				to the maximum. This sets both the maximum and initial memory sizes to 1024
				megabytes for a Java application:
				<codeblock>-Xmx1024m -Xms1024m</codeblock>Properties can be passed to the cache
				server on the <codeph>gfsh</codeph> command line:
				<codeblock>gfsh&gt;start server --name=<i>server-name</i> --J=-Xmx1024m --J=-Xms1024m</codeblock>
			</li>
			<li id="li_600BF2D3BC3F48859E4C4494F72419EC">MaxDirectMemorySize—The JVM has a kind of
				memory called direct memory, which is distinct from normal JVM heap memory, that can
				run out. You can increase the direct buffer memory either by increasing the maximum
				heap size (see previous JVM Heap Size), which increases both the maximum heap and
				the maximum direct memory, or by only increasing the maximum direct memory using
				-XX:MaxDirectMemorySize. The following parameter added to the Java application
				startup increases the maximum direct memory size to 256 megabytes:
				<codeblock>-XX:MaxDirectMemorySize=256M</codeblock>The same effect for the cache
				server:
				<codeblock>gfsh&gt;start server --name=<i>server-name</i> --J=-XX:MaxDirectMemorySize=256M</codeblock>
			</li>
			<li id="li_30DFD66555674E239BAC0743E0901A60">JVM stack size—Each thread in a Java
				application has its own stack. The stack is used to hold return addresses, arguments
				to functions and method calls, and so on. Since <keyword keyref="product_name"/> is
				a highly multi-threaded system, at any given point in time there are multiple thread
				pools and threads that are in use. The default stack size setting for a thread in
				Java is 1MB. Stack size has to be allocated in contiguous blocks and if the machine
				is being used actively and there are many threads running in the system (Task
				Manager shows the number of active threads), you may encounter an
					<codeph>OutOfMemory error: unable to create new native thread</codeph>, even
				though your process has enough available heap. If this happens, consider reducing
				the stack size requirement for threads on the cache server. The following parameter
				added to the Java application startup limits the maximum size of the stack.
				<codeblock>-Xss384k</codeblock> In particular, we recommend starting the cache
				servers with a stack size of 384k or 512k in such cases. For example:
				<codeblock>gfsh&gt;start server --name=<i>server-name</i> --J=-Xss384k

gfsh&gt;start server --name=<i>server-name</i> --J=-Xss512k</codeblock>
			</li>
			<li>Off-heap memory size—For applications that use off-heap memory, specifies how much off-heap
				memory to allocate. Setting <codeph>off-heap-memory-size</codeph> is prerequisite to
				enabling the off-heap capability for individual regions. For
				example:<codeblock>gfsh>start server --name=<i>server-name</i> --off-heap-memory-size=200G</codeblock>
				See <xref href="../heap_use/off_heap_management.xml#managing-off-heap-memory">Using Off-heap Memory</xref> for additional considerations regarding this
				parameter.</li>
			<li>Lock memory—On Linux systems, you can prevent heap and off-heap memory from being paged out
				by setting the <codeph>lock-memory</codeph> parameter to <codeph>true</codeph>. For
				example:<codeblock>gfsh>start server --name=<i>server-name</i> --off-heap-memory-size=200G --lock-memory=true</codeblock>See
				<xref href="../heap_use/off_heap_management.xml#locking-memory">Locking Memory</xref> for additional considerations regarding this
				parameter.</li>
		</ul>
	</conbody>
</concept>
