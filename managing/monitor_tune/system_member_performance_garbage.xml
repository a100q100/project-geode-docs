<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="sys_mem_perf">
	<title>Garbage Collection and System Performance</title>
	<shortdesc>If your application exhibits unacceptably high latencies, you might improve performance
		by modifying your JVM’s garbage collection behavior. </shortdesc>
	<conbody>
		<p>Garbage collection, while necessary, introduces latency into your system by consuming resources
			that would otherwise be available to your application. You can reduce the impact of
			garbage collection in two ways:</p>
			<ul id="ul_dlp_kpd_bv">
				<li>Optimize garbage collection in the JVM heap.</li>
				<li>Reduce the amount of data exposed to garbage collection by storing values in
					off-heap memory.</li>
			</ul>
		<p>
			<note>Garbage collection tuning options depend on the JVM you are using. Suggestions
				given here apply to the Sun HotSpot JVM. If you use a different JVM, check with your
				vendor to see if these or comparable options are available to you. </note>
		</p>
		<p>
			<note>Modifications to garbage collection sometimes produce unexpected results. Always
				test your system before and after making changes to verify that the system’s
				performance has improved. </note>
		</p>
		<p><b>Optimizing Garbage Collection</b></p>
		<p>The two options suggested here are likely to expedite garbage collecting activities by
			introducing parallelism and by focusing on the data that is most likely to be ready for
			cleanup. The first parameter causes the garbage collector to run concurrent to your
			application processes. The second parameter causes it to run multiple, parallel threads
			for the "young generation" garbage collection (that is, garbage collection performed on
			the most recent objects in memory—where the greatest benefits are expected): </p>
			<codeblock>-XX:+UseConcMarkSweepGC -XX:+UseParNewGC</codeblock>
		<p>For applications, if you are using remote method invocation (RMI) Java APIs, you might
			also be able to reduce latency by disabling explicit calls to the garbage collector. The
			RMI internals automatically invoke garbage collection every sixty seconds to ensure that
			objects introduced by RMI activities are cleaned up. Your JVM may be able to handle
			these additional garbage collection needs. If so, your application may run faster with
			explicit garbage collection disabled. You can try adding the following command-line
			parameter to your application invocation and test to see if your garbage collector is
			able to keep up with demand: </p>
			<codeblock>-XX:+DisableExplicitGC</codeblock>
		<p><b>Using Off-heap Memory</b></p>
		<p>You can improve the performance of some applications by storing data values in off-heap
			memory. Certain objects, such as keys, must remain in the JVM heap. See <xref
				href="../heap_use/off_heap_management.xml"/> for more information.</p>
	</conbody>
</concept>
