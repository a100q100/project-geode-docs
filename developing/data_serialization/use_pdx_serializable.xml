<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="use_pdx_serializable">
	<title>Implementing PdxSerializable in Your Domain Object</title>
	<shortdesc id="shortdesc_8B8AE61FFD414F89B154553F2B9F6774"> For a domain object with source that
		you can modify, implement the <codeph>PdxSerializable</codeph> interface in the object and
		use its methods to serialize and deserialize the object's fields. </shortdesc>
	<conbody>
		<section id="section_7F357A8E56B54BFB9A5778C0F89E034E">
			<p>
				<b>Procedure</b></p>
				<ol id="ol_b6d69a56-78de-4f9e-88de-5d8c6b1b0ddd">
					<li id="li_40290E41A9C24F1692ECF60269ECA426">In your domain class, implement
							<codeph>PdxSerializable</codeph>, importing the required
							<codeph>com.gemstone.gemfire.pdx</codeph> classes. <p>For example: </p>
						<codeblock>import com.gemstone.gemfire.pdx.PdxReader;
import com.gemstone.gemfire.pdx.PdxSerializable;
import com.gemstone.gemfire.pdx.PdxWriter;

public class PortfolioPdx implements PdxSerializable {
  ...</codeblock>
					</li>
					<li id="li_1380F87B4A874C139935168D911BD28F">If your domain class does not have
						a zero-arg constructor, create one for it. <p>For example: </p>
						<codeblock>public PortfolioPdx(){}</codeblock>
					</li>
					<li id="li_DE4C113670904EF0959410240C020940">Program
							<codeph>PdxSerializable.toData.</codeph>
						<ol id="ol_E022809209F34C65A029DA2538A06CFE">
							<li id="li_1E458430F89B42D29F0D4EB6781458E4">Write each standard Java
								data field of your domain class using the <codeph>PdxWriter</codeph>
								write methods. <keyword keyref="product_name"/> automatically
								provides <codeph>PdxWriter</codeph> to the <codeph>toData</codeph>
								method for <codeph>PdxSerializable</codeph> objects. </li>
							<li id="li_DE6BCF3B23CC45D5B9E35A437EF63FDD">Call the
									<codeph>PdxWriter</codeph>
								<codeph>markIdentifyField</codeph> method for each field you want to
								have <keyword keyref="product_name"/> use to identify your object.
								Put this after the field's write method. <keyword
									keyref="product_name"/> uses this information to compare objects
								for operations like distinct queries. If you do not set as least one
								identity field, then the <codeph>equals</codeph> and
									<codeph>hashCode</codeph> methods will use all PDX fields to
								compare objects and consequently, will not perform as well. It is
								important that the fields used by your <codeph>equals</codeph> and
									<codeph>hashCode</codeph> implementations are the same fields
								that you mark as identity fields. </li>
							<li id="li_E34C3F50479A45D6A040C0A9ABC81DA4">For a particular version of
								your class, you need to consistently write the same named field each
								time. The field names or number of fields must not change from one
								instance to another for the same class version. </li>
							<li id="li_8FA1BF971E994A7E97389A25F2EA1651">For best performance, do
								fixed width fields first and then variable length fields. <p>Example
										<codeph>toData</codeph> code:
									<codeblock>// PortfolioPdx fields
  private int id;
  private String pkid;
  private Map&lt;String, PositionPdx&gt; positions;
  private String type;
  private String status;
  private String[] names;
  private byte[] newVal;
  private Date creationDate;
  ...

  public void toData(PdxWriter writer)
  {
    writer.writeInt("id", id)
// The markIdentifyField call for a field must 
// come after the field's write method 
    .markIdentityField("id")
    .writeDate("creationDate", creationDate) //fixed length field
    .writeString("pkid", pkid)
    .writeObject("positions", positions)
    .writeString("type", type)
    .writeString("status", status)
    .writeStringArray("names", names)
    .writeByteArray("newVal", newVal)
  }</codeblock>
								</p>
							</li>
						</ol>
					</li>
					<li id="li_A31789487D1D481F87A1626BD4893CE2">Program
							<codeph>PdxSerializable.fromData</codeph> to read your data fields from
						the serialized form into the object's fields using the
							<codeph>PdxReader</codeph> read methods. <p>Provide the same names that
							you did in <codeph>toData</codeph> and call the read operations in the
							same order as you called the write operations in your
								<codeph>toData</codeph> implementation. </p><keyword
							keyref="product_name"/> automatically provides
							<codeph>PdxReader</codeph> to the <codeph>fromData</codeph> method for
							<codeph>PdxSerializable</codeph> objects. <p>Example
								<codeph>fromData</codeph> code:
							<codeblock>  
public void fromData(PdxReader reader)
  {
    id = reader.readInt("id");
    creationDate = reader.readDate("creationDate");
    pkid = reader.readString("pkid");
    position1 = (PositionPdx)reader.readObject("position1");
    position2 = (PositionPdx)reader.readObject("position2");
    positions = (Map&lt;String, PositionPdx&gt;)reader.readObject("positions");
    type = reader.readString("type");
    status = reader.readString("status");
    names = reader.readStringArray("names");
    newVal = reader.readByteArray("newVal");
    arrayNull = reader.readByteArray("arrayNull");
    arrayZeroSize = reader.readByteArray("arrayZeroSize");
  }</codeblock>
						</p>
					</li>
				</ol>
			<p>
				<b>What to do next</b></p>
				<ul id="ul_75699E52FF74480ABD72CFB9F10CDE47">
					<li id="li_055ABD507D7440DDAB53AB6EB024EBC2">As needed, configure and program
						your <keyword keyref="product_name"/> applications to use
							<codeph>PdxInstance</codeph> for selective object deserialization. See
							<xref href="program_application_for_pdx.xml"
							type="concept" format="dita" scope="local"/>. </li>
				</ul>
		</section>
	</conbody>
</concept>
