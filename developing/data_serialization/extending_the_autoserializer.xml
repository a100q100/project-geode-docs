<?xml version="1.0"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_9E020566EE794A81A48A90BA798EC279">
	<title>Extending the ReflectionBasedAutoSerializer</title>
	<shortdesc>You can extend the <codeph>ReflectionBasedAutoSerializer</codeph> to handle
		serialization in a customized manner. This section provides an overview of the available
		method-based customization options and an example of extending the serializer to support
		BigDecimal and BigInteger types. </shortdesc>
	<conbody>
		<section id="section_378C0C68A1B342DD9D754DDBDC4874B3">
			<title>Reasons to Extend the ReflectionBasedAutoSerializer</title>
			<p> One of the main use cases for extending the
					<codeph>ReflectionBasedAutoSerializer</codeph> is that you want it to handle an
				object that would currently need to be handled by standard Java serialization. There
				are several issues with having to use standard Java serialization that can be
				addressed by extending the PDX <codeph>ReflectionBasedAutoSerializer</codeph>. <ul
					id="ul_B23259DC192244DCA50F45869ED93DD4">
					<li id="li_701A01C38B0B4053B78BA3B53EF54C91">Each time we transition from a
							<keyword keyref="product_name"/> serialized object to an object that
						will be Java I/O serialized, extra data must get serialized. This can cause
						a great deal of serialization overhead. This is why it is worth extending
						the <codeph>ReflectionBasedAutoSerializer</codeph> to handle any classes
						that normally would have to be Java I/O serialized. </li>
					<li id="li_1178D40FFE204105A39CA8814BEF090D">Expanding the number of classes
						that can use the <codeph>ReflectionBasedAutoSerializer</codeph> is
						beneficial when you encounter object graphs. After we use Java I/O
						serialization on an object, any objects under that object in the object
						graph will also have to be Java I/O serialized. This includes objects that
						normally would have been serialized using PDX or
							<codeph>DataSerializable</codeph>. </li>
					<li id="li_053A2983C84E4D66B0697E2D48B59054">If standard Java I/O serialization
						is done on an object and you have enabled check-portability, then an
						exception will be thrown. Even if you are not concerned with the object's
						portability, you can use this flag to find out what classes would use
						standard Java serialization (by getting an exception on them) and then
						enhancing your auto serializer to handle them. </li>
				</ul>
			</p>
		</section>
		<section id="section_A739691C60FB4EB291289AADCD66C675">
			<title>Overriding ReflectionBasedAutoSerializer Behavior</title>
			<p>You can customize the specific behaviors in
					<codeph>ReflectionBasedAutoSerializer</codeph> by overriding the following
				methods: <ul id="ul_6C66CFC92B5B4566A2A91ADA5A1C2EFA">
					<li id="li_B52B78CBC09547D39B9232F836A2AC95"
								><b><codeph>isClassAutoSerialized</codeph></b> customizes which
						classes to autoserialize. </li>
					<li id="li_51744C307BFB422E96CC5C1A1CD7B7E6"
							><b><codeph>isFieldIncluded</codeph></b> specifies which fields of a
						class to autoserialize. </li>
					<li id="li_65DBE773DE7D47EF89C5B1D5581BD844"
							><b><codeph>getFieldName</codeph></b> defines the specific field names
						that will be generated during autoserialization. </li>
					<li id="li_C707AB8972EA4F83B7B549C0A55EF3ED"
							><b><codeph>isIdentifyField</codeph></b> controls which field is marked
						as the identity field. Identity fields are used when a PdxInstance computes
						its hash code to determine whether it is equal to another object. </li>
					<li id="li_FE8AAECE88C148FBB5183752FB569417"
							><b><codeph>getFieldType</codeph></b> determines the field type that
						will be used when autoserializing the given field. </li>
					<li id="li_18D4D30D0EA04D8C89B507A36670DFF9"
								><b><codeph>transformFieldValue</codeph></b> controls whether
						specific field values of a PDX object can be transformed during
						serialization. </li>
					<li id="li_B68BB3902293495F8A0A011B035F1989"
							><b><codeph>writeTransform</codeph></b> controls what field value is
						written during auto serialization. </li>
					<li id="li_0BFB319D7EE84A069E1F5415E23171B0"
							><b><codeph>readTransform</codeph></b> controls what field value is read
						during auto deserialization. </li>
				</ul>
			</p>
			<p>These methods are only called the first time the
					<codeph>ReflectionBasedAutoSerializer</codeph> sees a new class. The results
				will be remembered and used the next time the same class is seen. </p>
			<p> For details on these methods and their default behaviors, see the JavaDocs on <xref
					href="/releases/latest/javadoc/com/gemstone/gemfire/pdx/ReflectionBasedAutoSerializer.html"
					format="html" scope="external">ReflectionBasedAutoSerializer </xref>for details.
			</p>
		</section>
		<section id="section_7C4CC39FD82A48A9B5F8376522078192">
			<title>Example of Optimizing Autoserialization of BigInteger and BigDecimal
				Types</title>
			<p> This section provides an example of extending the
					<codeph>ReflectionBasedAutoSerializer</codeph> to optimize the automatic
				serialization of BigInteger and BigDecimal types. </p>
			<p> The following code sample illustrates a subclass of the
					<codeph>ReflectionBasedAutoSerializer</codeph> that optimizes BigInteger and
				BigDecimal autoserialization:
				<codeblock>public static class BigAutoSerializer extends ReflectionBasedAutoSerializer {
   public BigAutoSerializer(Boolean checkPortability, stringâ€¦ patterns) {
    super(checkPortability, patterns);
}

@Override
public FieldType get FieldType(Field f, Class&lt;?&gt; clazz) {
   if (f.getType().equals(BigInteger.class)) {
        return FieldType.BYTE_ARRAY; 
      } else if (f.getType().equals(BigDecimal.class)) {
        return FieldType.STRING; 
      } else {
        return super.getFieldType(f, clazz);
      }
    }
@Override
    public boolean transformFieldValue(Field f, Class&lt;?&gt; clazz) {
      if (f.getType().equals(BigInteger.class)) {
        return true;
      } else if (f.getType().equals(BigDecimal.class)) {
        return true;
      } else {
        return super.transformFieldValue(f, clazz);
      }
    }

@Override
    public Object writeTransform(Field f, Class&lt;?&gt; clazz, Object originalValue) {
      if (f.getType().equals(BigInteger.class)) {
        byte[] result = null;
        if (originalValue != null) {
          BigInteger bi = (BigInteger)originalValue;
          result = bi.toByteArray();
        }
        return result;
      } else if (f.getType().equals(BigDecimal.class)) {
        Object result = null;
        if (originalValue != null) {
          BigDecimal bd = (BigDecimal)originalValue;
          result = bd.toString();
        }
        return result;
      } else {
        return super.writeTransform(f, clazz, originalValue);
      }
    }

@Override
    public Object readTransform(Field f, Class&lt;?&gt; clazz, Object serializedValue) {
      if (f.getType().equals(BigInteger.class)) {
        BigInteger result = null;
        if (serializedValue != null) {
          result = new BigInteger((byte[])serializedValue);
        }
        return result;
      } else if (f.getType().equals(BigDecimal.class)) {
        BigDecimal result = null;
        if (serializedValue != null) {
          result = new BigDecimal((String)serializedValue);
        }
        return result;
      } else {
        return super.readTransform(f, clazz, serializedValue);
      }
    }
    
  }

</codeblock>
			</p>
		</section>
	</conbody>
</concept>
