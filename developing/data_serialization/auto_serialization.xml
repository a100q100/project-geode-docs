<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="auto_serialization">
	<title>Using Automatic Reflection-Based PDX Serialization</title>
	<shortdesc>You can configure your cache to automatically serialize and deserialize domain
		objects without having to add any extra code to them. </shortdesc>
	<conbody>
		<section id="section_E2B7719D3C1545808CC21E0FDBD2D610">
			<p>You can automatically serialize and deserialize domain objects without coding a
					<codeph>PdxSerializer</codeph> class. You do this by registering your domain
				objects with a custom <codeph>PdxSerializer</codeph> called
					<codeph>ReflectionBasedAutoSerializer</codeph> that uses Java reflection to
				infer which fields to serialize. </p>
			<p>You can also extend the ReflectionBasedAutoSerializer to customize its behavior. For
				example, you could add optimized serialization support for BigInteger and BigDecimal
				types. See <xref
					href="extending_the_autoserializer.xml#concept_9E020566EE794A81A48A90BA798EC279"
					type="concept" format="dita" scope="local"/> for details. </p>
				<note>
					<p>Your custom PDX autoserializable classes cannot use the
						<codeph>com.gemstone</codeph> package. If they do, the classes will be
					ignored by the PDX auto serializer.
					</p>
				</note>
		</section>
		<section id="section_C69046B44729454F8CD464B0289EFDD8">
			<p>
				<b>Prerequisites</b></p>
				<ul id="ul_CA7EB0944E5C47B0A8FBC754B39C89A9">
					<li id="li_C86ADB7364244F6F8DD5D88403B7A884">Understand generally how to
						configure the <keyword keyref="product_name"/> cache. </li>
					<li id="li_7A92E6B29E404FD6872DDFDC43310699">Understand how PDX serialization
						works and how to configure your application to use
							<codeph>PdxSerializer</codeph>. </li>
				</ul>
		</section>
		<section id="section_43F6E45FF69E470897FD9D002FBE896D">
			<b>Procedure </b>
			<p>In your application where you manage data from the cache, provide the following
				configuration and code as appropriate: </p>
			<ol id="ol_0CAE42B1AD194AD4B18D2F90EECC02D9">
				<li>In the domain classes that you wish to autoserialize, make sure each class has a
					zero-arg constructor. For
					example:<codeblock>public PortfolioPdx(){}</codeblock></li>
				<li id="li_2746AECDCA9843C48B2EDB306D1102E8">Using one of the following methods, set
					the PDX serializer to <codeph>ReflectionBasedAutoSerializer</codeph>. <ol
						id="ol_957AE15C7EA444B89E961D35A72A948C">
						<li id="li_94FDE8E036A740F590B4FD2361D98522"> In gfsh, execute the following
							command prior to starting up any members that host
							data:<codeblock>gfsh>configure pdx --auto-serializable-classes=com\.company\.domain\..*</codeblock>
							By using gfsh, this configuration can propagated across the cluster
							through the <xref
								href="../../configuring/cluster_config/gfsh_persist.xml"
								>Cluster Configuration Service</xref>. </li>
						<li>Alternately, in <codeph>cache.xml</codeph>:
							<codeblock>&lt;!-- Cache configuration configuring auto serialization behavior --&gt;
&lt;cache&gt;
  &lt;pdx&gt;
    &lt;pdx-serializer&gt;
      &lt;class-name&gt;
       com.gemstone.gemfire.pdx.ReflectionBasedAutoSerializer
      &lt;/class-name&gt;
      &lt;parameter name="classes"&gt;
      &lt;string&gt;com.company.domain.DomainObject&lt;/string&gt;
     &lt;/parameter&gt;
  &lt;/pdx-serializer&gt;
 &lt;/pdx&gt;
  ...
&lt;/cache&gt;</codeblock>The
							parameter, <codeph>classes</codeph>, takes a comma-separated list of
							class patterns to define the domain classes to serialize. If your domain
							object is an aggregation of other domain classes, you need to register
							the domain object and each of those domain classes explicitly for the
							domain object to be serialized completely. <p> </p>
						</li>
						<li id="li_A29D0DC5FFD143E180BC296A6E814226">Using the Java API:
							<codeblock>
Cache c = new CacheFactory()
  .setPdxSerializer(new ReflectionBasedAutoSerializer("com.company.domain.DomainObject"))
  .create();</codeblock>
						</li>
					</ol>
				</li>
				<li id="li_FDBC3000610C4999A8B996EA387936EB">Customize the behavior of the
						<codeph>ReflectionBasedAutoSerializer</codeph> using one of the following
					mechanisms: <ul id="ul_C23615AF078547768E401FD2705C8791">
						<li id="li_ED7C169EDBB8445FA3FCDD333C3B60C0">By using a class pattern string
							to specify the classes to auto-serialize and customize how the classes
							are serialized. Class pattern strings can be specified in the API by
							passing strings to the <codeph>ReflectionBasedAutoSerializer</codeph>
							constructor or by specifying them in cache.xml. See <xref
								href="autoserialization_with_class_pattern_strings.xml#concept_9B67BBE94B414B7EA63BD7E8D61D0312"
								type="concept" format="dita" scope="local"/> for details. </li>
						<li id="li_B36EF87E630B4BADA418990B7311A16F">By creating a subclass of
								<codeph>ReflectionBasedAutoSerializer</codeph> and overriding
							specific methods. See <xref
								href="extending_the_autoserializer.xml#concept_9E020566EE794A81A48A90BA798EC279"
								type="concept" format="dita" scope="local"/> for details. </li>
					</ul>
					<p> </p>
				</li>
				<li id="li_0834A29AE74A4328ABCB1AFCCD2D646D">If desired, configure the
						<codeph>ReflectionBasedAutoSerializer</codeph> to check the portability of
					the objects it is passed before it tries to autoserialize them. When this flag
					is set to true, the <codeph>ReflectionBasedAutoSerializer</codeph> will throw a
						<codeph>NonPortableClassException</codeph> error when trying to
					autoserialize a non-portable object. To set this, use the following
					configuration: <ul id="ul_5E4981444E774A97A3A59EDC979F965B">
						<li>In gfsh, use the following
							command:<codeblock>gfsh>configure pdx --portable-auto-serializable-classes=com\.company\.domain\..*</codeblock>By
							using gfsh, this configuration can propagated across the cluster through
							the <xref
								href="../../configuring/cluster_config/gfsh_persist.xml"
								>Cluster Configuration Service</xref>. </li>
						<li id="li_D81205CA3BAB451C8D1E28330E68623D">In cache.xml:
							<codeblock>&lt;!-- Cache configuration configuring auto serialization behavior --&gt;
&lt;cache&gt;
  &lt;pdx&gt;
    &lt;pdx-serializer&gt;
      &lt;class-name&gt;
       com.gemstone.gemfire.pdx.ReflectionBasedAutoSerializer
      &lt;/class-name&gt;
    &lt;parameter name="classes"&gt;
      &lt;string&gt;com.company.domain.DomainObject&lt;/string&gt;
    &lt;/parameter&gt;
    &lt;parameter name="check-portability"&gt;
      &lt;string&gt;true&lt;/string&gt;
    &lt;/parameter&gt;
  &lt;/pdx-serializer&gt;
 &lt;/pdx&gt;
  ...
&lt;/cache&gt;</codeblock>
						</li>
						<li id="li_CA414B0C71004EE885100769D1761F96">Using the Java API:
							<codeblock>Cache c = new CacheFactory()
  .setPdxSerializer(new ReflectionBasedAutoSerializer(true,"com.company.domain.DomainObject"))
  .create();</codeblock>
						</li>
					</ul>
				</li>
			</ol>
			<p>For each domain class you provide, all fields are considered for serialization except
				those defined as <codeph>static</codeph> or <codeph>transient</codeph> and those you
				explicitly exclude using the class pattern strings. </p>
				<note>
					<p>The <codeph>ReflectionBasedAutoSerializer</codeph> traverses the given domain
					object's class hierarchy to retrieve all fields to be considered for
					serialization. So if <codeph>DomainObjectB</codeph> inherits from
						<codeph>DomainObjectA</codeph>, you only need to register
						<codeph>DomainObjectB</codeph> to have all of <codeph>DomainObjectB</codeph>
					serialized.
					</p>
				</note>
		</section>
	</conbody>
</concept>
