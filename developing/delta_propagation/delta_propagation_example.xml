<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="delta_propagation_example">
	<title>Delta Propagation Example</title>
	<shortdesc>This topic provides an example of delta propagation.</shortdesc>
	<conbody>
		<section id="section_F6700EB7F305462D9F0DEE3080497A14">
			<p>In this example, the feeder client is connected to the first server, and the receiver
				client is connected to the second. The servers are peers to each other. </p>
			<p>
				<image href="../../images/DeltaPropagation-3.gif"
					id="image_E20DAE5925C44EBDA03D1AC8325D1122" placement="break"/>
			</p>
			<p>The example demonstrates the following operations: </p>
				<ol
					id="ol_72C030A25ECB4DF4BE9486B6927F7613">
					<li id="li_D777DD00799446AFAD995A00B0EE6D2D">In the Feeder client, the
						application updates the entry object and puts the entry. In response to the
							<codeph>put</codeph>, <keyword keyref="product_name"/> calls
							<codeph>hasDelta</codeph>, which returns true, so <keyword
							keyref="product_name"/> calls <codeph>toDelta</codeph> and forwards the
						extracted delta to the server. If <codeph>hasDelta</codeph> returned false,
							<keyword keyref="product_name"/> would distribute the full entry value. </li>
					<li id="li_021AD1D8099E40BC8BF9F4BBE7F7D0BB">In Server1, <keyword
							keyref="product_name"/> applies the delta to the cache, distributes the
						received delta to the server's peers, and forwards it to any other clients
						with interest in the entry (there are no other clients to Server1 in this
						example) </li>
					<li id="li_FB7148A76A5C4B3E9A6617BA4F49B9AC">In Server2, <keyword
							keyref="product_name"/> applies the delta to the cache and forwards it
						to its interested clients, which in this case is just the Receiver client.
					</li>
				</ol>
		</section>
		<section id="section_185444FC51FB467587A62DFEC07C9C7D">
			<p>This example shows the basic approach to programming a <codeph>Delta</codeph>
				implementation. </p>
			<codeblock outputclass="language-java">package delta;

import com.gemstone.gemfire.Delta;
import com.gemstone.gemfire.InvalidDeltaException;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.Serializable;

/**
 * Sample implementation of Delta
 * 
 * @author GemStone Systems, Inc.
 * @since 6.1
 */
public class SimpleDelta implements Delta, Serializable {

// Original object fields
	private int intVal;
	private double doubleVal;

	// Added for delta - one boolean per field to track changed status
	private transient boolean intFldChd = false;
	private transient boolean dblFldChd = false;

	public SimpleDelta(){}

	public SimpleDelta(int i, double d){
		this.intVal = i;
		this.doubleVal = d;
	}

	public boolean hasDelta() {
		return this.intFldChd || this.dblFldChd;
	}

	public void toDelta(DataOutput out) throws IOException {
		System.out.println("Extracting delta from " + this.toString());
	// Write information on what has changed to the 
	// data stream, so fromDelta knows what it's getting 
		out.writeBoolean(intFldChd);
		if (intFldChd) {
	// Write just the changes into the data stream
			out.writeInt(this.intVal);
	// Once the delta information is written, reset the delta status field
			this.intFldChd = false;
			System.out.println(" Extracted delta from field 'intVal' = "
												+ this.intVal);
		}
		out.writeBoolean(dblFldChd);
		if (dblFldChd) {
			out.writeDouble(this.doubleVal);
			this.dblFldChd = false;
			System.out.println(" Extracted delta from field 'doubleVal' = "
												+ this.doubleVal);
		}
	}

	public void fromDelta(DataInput in) throws IOException, InvalidDeltaException {
		System.out.println("Applying delta to " + this.toString());
		// For each field, read whether there is a change 
		if (in.readBoolean()) {
			// Read the change and apply it to the object 
			this.intVal = in.readInt();
			System.out.println(" Applied delta to field 'intVal' = "
						+ this.intVal);
		}
		if (in.readBoolean()) {
			this.doubleVal = in.readDouble();
			System.out.println(" Applied delta to field 'doubleVal' = "
						+ this.doubleVal);
		}
	}
    // In the setter methods, add setting of delta-related 
    // fields indicating what has changed 
	public void setIntVal(int anIntVal) {
		this.intFldChd = true;
		this.intVal = anIntVal;
	}

	public void setDoubleVal(double aDoubleVal) {
		this.dblFldChd = true;
		this.doubleVal = aDoubleVal;
	}

	public String toString() {
		return "SimpleDelta [ hasDelta = " + hasDelta() + ", intVal = " + 
				this.intVal + ", doubleVal = {" + this.doubleVal + "} ]";
	}
}</codeblock>
		</section>
	</conbody>
</concept>
