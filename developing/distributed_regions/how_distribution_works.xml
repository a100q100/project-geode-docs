<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="how_distribution_works">
	<title>How Distribution Works</title>
	<shortdesc>To use distributed and replicated regions, you should understand how they work and
		your options for managing them. </shortdesc>
	<conbody>
		<section id="section_2F892A4987C547E68CA78067133C2C2C">
			<note> The management of replicated and distributed regions supplements the general
				information for managing data regions provided in <xref
					href="../../basic_config/book_intro.xml" format="dita"
				/>. See also <codeph>com.gemstone.gemfire.cache.PartitionAttributes</codeph>. </note>
			<p>A distributed region automatically sends entry value updates to remote caches and
				receives updates from them. </p>
				<ul id="ul_1D81390D8B064B188B341235A1B9B709">
					<li id="li_E86CFB306B5B46339D420D2AFBE788D3">Distributed entry updates come from
						the <codeph>Region</codeph>
						<codeph>put</codeph> and <codeph>create</codeph> operations (the creation of
						an entry with a non-null value is seen as an update by remote caches that
						already have the entry key). Entry updates are distributed selectively -
						only to caches where the entry key is already defined. This provides a pull
						model of distribution, compared to the push model that you get with
						replication. </li>
					<li id="li_CD9EDC46FA1E4A5286FA010735D8AED1">Distribution alone does not cause
						new entries to be copied from remote caches. </li>
					<li id="li_A87937D4BABC4F82B1D7BD72F390E258">A distributed region shares cache
						loader and cache writer application event handler plug-ins across the
						distributed system. </li>
				</ul>
			<p>In a distributed region, new and updated entry values are automatically distributed
				to remote caches that already have the entries defined.</p>
				<ul
					id="ul_DD4EE7A245E544079EFBA132E27A06C2">
					<li id="li_FE1FD2C6346B4234BDC599843D6B83FF"><b>Step 1:</b> The application
						updates or creates the entry. At this point, the entry in the M1 cache may
						not yet exist.<image placement="break"
							id="image_40EFE6E95E6945A1B08A68508ECBCC60"
							href="../../images_svg/distributed_how_1.svg"/>
					</li>
					<li id="li_23A803E3C8374779846EEA0FD7A1D87F"><b>Step 2:</b> The new value is
						automatically distributed to caches holding the entry.<image
							placement="break" id="image_AF8A3ADEB5D94E20B101FDA92BF6D002"
							href="../../images_svg/distributed_how_2.svg"/>
					</li>
					<li id="li_D08A404C0A9E4173BDDEFDE10EC5006F"><b>Step 3: </b>The entry's value is
						the same throughout the distributed system.<image placement="break"
							id="image_5B1F06B54C9047E28A8C8673D1D5BD27"
							href="../../images_svg/distributed_how_3.svg"/>
					</li>
				</ul>
		</section>
	</conbody>
</concept>
