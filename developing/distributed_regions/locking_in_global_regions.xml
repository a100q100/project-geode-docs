<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="locking_in_global_regions">
	<title>Locking in Global Regions</title>
	<shortdesc id="shortdesc_9E5F38E1910D47C7A4EE5190F810F0AC">In global regions, the system locks
		entries and the region during updates. You can also explicitly lock the region and its
		entries as needed by your application. Locking includes system settings that help you
		optimize performance and locking behavior between your members. </shortdesc>
	<conbody>
		<section id="section_065B3A57CCCA4F17821D170A312B6675">
			<p>In regions with global scope, locking helps ensure cache consistency. </p>
			<p>Locking of regions and entries is done in two ways:</p>
				<ol
					id="ol_1D73468BE38E423F92049460873FE66C">
					<li id="li_80312BB8A8304FE1AA971A924CA933B6"><b>Implicit</b>. <keyword
							keyref="product_name"/> automatically locks global regions and their
						data entries during most operations. Region invalidation and destruction do
						not acquire locks. </li>
					<li id="li_531914E637664AE8B254B553C93F4A89"><b>Explicit</b>. You can use the
						API to explicitly lock the region and its entries. Do this to guarantee
						atomicity in tasks with multi-step distributed operations. The
							<codeph>Region</codeph> methods
							<codeph>com.gemstone.gemfire.cache.Region.getDistributedLock</codeph>
						and
							<codeph>com.gemstone.gemfire.cache.Region.getRegionDistributedLock</codeph>
						return instances of <codeph>java.util.concurrent.locks.Lock</codeph> for a
						region and a specified key. <note>You must use the <codeph>Region</codeph>
							API to lock regions and region entries. Do not use the
								<codeph>DistributedLockService</codeph> in the
								<codeph>com.gemstone.gemfire.distributed</codeph> package. That
							service is available only for locking in arbitrary distributed
							applications. It is not compatible with the <codeph>Region</codeph>
							locking methods. </note>
					</li>
				</ol>
		</section>
		<section id="section_5B47F9C5C27A4B789A3498AC553BB1FB">
			<title>Lock Timeouts</title>
			<p>Getting a lock on a region or entry is a two-step process of getting a lock instance
				for the entity and then using the instance to set the lock. Once you have the lock,
				you hold it for your operations, then release it for someone else to use. You can
				set limits on the time spent waiting to get a lock and the time spent holding it.
				Both implicit and explicit locking operations are affected by the timeouts: </p>
				<ul
					id="ul_e4f32f93-1d77-473d-901f-125032e84be7">
					<li id="li_85BE78351C4345DAB0B65FBC8C660B3A">The lock timeout limits the wait to
						get a lock. The cache attribute <codeph>lock-timeout</codeph> governs
						implicit lock requests. For explicit locking, specify the wait time through
						your calls to the instance of
							<codeph>java.util.concurrent.locks.Lock</codeph> returned from the
							<codeph>Region</codeph> API. You can wait a specific amount of time,
						return immediately either with or without the lock, or wait indefinitely. 
							<codeblock outputclass="language-xml">&lt;cache lock-timeout="60"&gt; 
&lt;/cache&gt;</codeblock>
						<p>gfsh:</p>
							<codeblock>gfsh>alter runtime --lock-timeout=60 </codeblock>
					</li>
					<li id="li_593EC0166E3042EE8600198AA6721EF6">The lock lease limits how long a
						lock can be held before it is automatically released. A timed lock allows
						the application to recover when a member fails to release an obtained lock
						within the lease time. For all locking, this timeout is set with the cache
						attribute <codeph>lock-lease</codeph>.
						<codeblock outputclass="language-xml">&lt;cache lock-lease="120"&gt; &lt;/cache&gt;</codeblock>
						<p>gfsh:</p>
						<codeblock>gfsh>alter runtime --lock-lease=120</codeblock>
					</li>
				</ul>
		</section>
		<section id="section_031727F04D114B42944872360A386907">
			<title>Optimize Locking Performance</title>
			<p>For each global region, one of the members with the region defined will be assigned
				the job of lock grantor. The lock grantor runs the lock service that receives lock
				requests from system members, queues them as needed, and grants them in the order
				received. </p>
			<p>The lock grantor is at a slight advantage over other members as it is the only one
				that does not have to send a message to request a lock. The grantor’s requests cost
				the least for the same reason. Thus, you can optimize locking in a region by
				assigning lock grantor status to the member that acquires the most locks. This may
				be the member that performs the most puts and thus requires the most implicit locks
				or this may be the member that performs many explicit locks. </p>
			<p>The lock grantor is assigned as follows: </p>
				<ul id="ul_BD0A94D96FEE4563B379493D177C6D77">
					<li id="li_102A221077BA44858D93418A59840D7E">Any member with the region defined
						that requests lock grantor status is assigned it. Thus at any time, the most
						recent member to make the request is the lock grantor. </li>
					<li id="li_4E37F23797C14A6DA4C6B93889F63D7B">If no member requests lock grantor
						status for a region, or if the current lock grantor goes away, the system
						assigns a lock grantor from the members that have the region defined in
						their caches. </li>
				</ul>
			<p>You can request lock grantor status:</p>
				<ol id="ol_AC61BDC82B524E6C9151B4B29DA193BD">
					<li id="li_0CCCD8A33ED0463A827EA73AE29D0D7B">At region creation through the
							<codeph>is-lock-grantor</codeph> attribute. You can retrieve this
						attribute through the region method, <codeph>getAttributes</codeph>, to see
						whether you requested to be lock grantor for the region. <note>The
								<codeph>is-lock-grantor</codeph> attribute does not change after
							region creation. </note>
					</li>
					<li id="li_92E9ADA6E6B648D18B0D3352E04CF891">After region creation through the
						region <codeph>becomeLockGrantor</codeph> method. Changing lock grantors
						should be done with care, however, as doing so takes cycles from other
						operations. In particular, be careful to avoid creating a situation where
						you have members vying for lock grantor status. </li>
				</ol>
		</section>
		<section id="section_34661E38DFF9420B89C1A2B25F232D53">
			<title>Examples</title>
			<p>These two examples show entry locking and unlocking. Note how the entry’s
					<codeph>Lock</codeph> object is obtained and then its lock method invoked to
				actually set the lock. The example program stores the entry lock information in a
				hash table for future reference.</p>
				<codeblock outputclass="language-java">/* Lock a data entry */ 
HashMap lockedItemsMap = new HashMap(); 
...
  String entryKey = ... 
  if (!lockedItemsMap.containsKey(entryKey)) 
  { 
    Lock lock = this.currRegion.getDistributedLock(entryKey); 
    lock.lock(); 
    lockedItemsMap.put(name, lock); 
  } 
  ...</codeblock>
			<codeblock outputclass="language-java">/* Unlock a data entry */ 
  String entryKey = ... 
  if (lockedItemsMap.containsKey(entryKey)) 
  { 
    Lock lock = (Lock) lockedItemsMap.remove(name);
    lock.unlock();
  }</codeblock>
		</section>
	</conbody>
</concept>