<?xml version="1.0"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_85AE7D6B1E2941ED8BD2A8310A81753E">
	<title>SELECT Statement</title>
	<shortdesc><?xm-replace_text Short Description?>
	</shortdesc>
	<conbody>
		<p>The SELECT statement allows you to filter data from the collection of object(s) returned
			by a WHERE search operation. The projection list is either specified as * or as a comma
			delimited list of expressions. </p>
		<p>For *, the interim results of the WHERE clause are returned from the query. </p>
		<p><b>Examples:</b></p>
		<p>Query all objects from the region using *. Returns the Collection of portfolios (The
			exampleRegion contains Portfolio as
			values).<codeblock>SELECT * FROM /exampleRegion</codeblock></p>
		<p>Query secIds from positions. Returns the Collection of secIds from the positions of
			active
			portfolios:<codeblock>SELECT secId FROM /exampleRegion, positions.values TYPE Position 
WHERE status = 'active'</codeblock></p>
		<p>Returns a Collection of struct&lt;type: String, positions: map&gt; for the active
			portfolios. The second field of the struct is a Map ( jav.utils.Map ) object, which
			contains the positions map as the
			value:<codeblock>SELECT "type", positions FROM /exampleRegion 
WHERE status = 'active'</codeblock></p>
		<p>Returns a Collection of struct&lt;portfolios: Portfolio, values: Position&gt; for the
			active
			portfolios:<codeblock>SELECT * FROM /exampleRegion, positions.values 
TYPE Position WHERE status = 'active'</codeblock></p>
		<p>Returns a Collection of struct&lt;pflo: Portfolio, posn: Position&gt; for the active
			portfolios:<codeblock>SELECT * FROM /exampleRegion portfolio, positions positions 
TYPE Position WHERE portfolio.status = 'active'</codeblock></p>
		<section id="section_1B7762EC686A4808B1D12E8851954E82">
			<title>SELECT Statement Results</title>
			<p>The result of a SELECT statement is either UNDEFINED or is a Collection that
				implements the <xref
					href="/releases/latest/javadoc/com/gemstone/gemfire/cache/query/SelectResults.html"
					scope="external" format="html">SelectResults</xref> interface. </p>
			<p>The SelectResults returned from the SELECT statement is either: <ol
					id="ol_85D66E6DE75C4A4E855F22B9DC1F3BC9">
					<li id="li_7A143E20A00340C7B57D132757855526"> A collection of objects, returned
						for these two cases: <ul id="ul_A2CFF45813CC4AE68F933629B7CDD085">
							<li id="li_F9E5845AFEB94A2EB6676446D36D0254"> When only one expression
								is specified by the projection list and that expression is not
								explicitly specified using the fieldname:expression syntax </li>
							<li id="li_5FCA771DDB814BB5A137D61A10409BF5">When the SELECT list is *
								and a single collection is specified in the FROM clause </li>
						</ul>
					</li>
					<li id="li_16FD1B8A0ABE41759ABA522A66DD2B8E">A collection of Structs that
						contains the objects </li>
				</ol>
			</p>
			<p>When a struct is returned, the name of each field in the struct is determined
				following this order of preference: <ol id="ol_4F7613A052F0496AA31580FAF2F00BD4">
					<li id="li_5C5F5BAC0B4B4F0AB509A2CD271657AF">If a field is specified explicitly
						using the fieldname:expression syntax, the fieldname is used. </li>
					<li id="li_C8B2B2868B70442CBCEBAD2690E45133">If the SELECT projection list is *
						and an explicit iterator expression is used in the FROM clause, the iterator
						variable name is used as the field name. </li>
					<li id="li_24BE53CDAC46408DB1210BF88D40DCA9">If the field is associated with a
						region or attribute path, the last attribute name in the path is used. </li>
					<li id="li_535255142E2E408F9FCB47F5062B6D80">If names cannot be decided based on
						these rules, arbitrary unique names are generated by the query processor.
					</li>
				</ol>
			</p>
		</section>
		<section id="section_972EE73A6F3E4427B6A99DB4EDF5860D">
			<title>DISTINCT</title>
			<p>Use the DISTINCT keyword if you want to limit the results set to unique rows. Note
				that in the current version of <keyword keyref="product_name"/> you are no longer
				required to use the DISTINCT keyword in your SELECT statement. <codeblock>SELECT DISTINCT * FROM /exampleRegion</codeblock>
				<note>If you are using DISTINCT queries, you must implement the equals and hashCode
					methods for the objects that you query. </note>
			</p>
		</section>
		<section id="section_25D7055B33EC47B19B1B70264B39212F">
			<title>LIMIT</title>
			<p>You can use the LIMIT keyword at the end of the query string to limit the number of
				values returned. </p>
			<p>For example, this query returns at most 10 values:
				<codeblock>SELECT * FROM /exampleRegion LIMIT 10</codeblock>
			</p>
		</section>
		<section id="section_D9DF0F785CA94EF8B367C3326CC12990">
			<title>ORDER BY</title>
			<p>You can order your query results in ascending or descending order by using the ORDER
				BY clause. You must use DISTINCT when you write ORDER BY queries.
				<codeblock>SELECT DISTINCT * FROM /exampleRegion WHERE ID &lt; 101 ORDER BY ID</codeblock>The
				following query sorts the results in ascending order:
				<codeblock>SELECT DISTINCT * FROM /exampleRegion WHERE ID &lt; 101 ORDER BY ID asc</codeblock>The
				following query sorts the results in descending order: <codeblock>SELECT DISTINCT * FROM /exampleRegion WHERE ID &lt; 101 ORDER BY ID desc</codeblock>
				<note>If you are using ORDER BY queries, you must implement the equals and hashCode
					methods for the objects that you query. </note>
			</p>
		</section>
		<section id="section_69DCAD624E9640028BC86FD67649DEB2">
			<title>Preset Query Functions</title>
			<p><keyword keyref="product_name"/> provides several built-in functions for evaluating
				or filtering data returned from a query. They include the following: <table
					id="table_1A44244A029C411D8F249802B106A9CB">
					<tgroup cols="3">
						<colspec colnum="1" colname="col1" colwidth="*"/>
						<colspec colnum="2" colname="col2" colwidth="*"/>
						<colspec colnum="3" colname="col3" colwidth="*"/>
						<thead>
							<row>
								<entry colname="col1">Function </entry>
								<entry colname="col2">Description </entry>
								<entry colname="col3">Example </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry colname="col1"> ELEMENT(expr) </entry>
								<entry colname="col2">Extracts a single element from a collection or
									array. This function throws a
										<codeph>FunctionDomainException</codeph> if the argument is
									not a collection or array with exactly one element. </entry>
								<entry colname="col3">
									<codeblock>ELEMENT(SELECT DISTINCT * 
 FROM /exampleRegion 
 WHERE id = 'XYZ-1').status = 'active'</codeblock>
								</entry>
							</row>
							<row>
								<entry colname="col1"> IS_DEFINED(expr) </entry>
								<entry colname="col2">Returns TRUE if the expression does not
									evaluate to UNDEFINED. </entry>
								<entry colname="col3">
									<codeblock>IS_DEFINED(SELECT DISTINCT * 
FROM /exampleRegion p 
WHERE p.status = 'active')</codeblock>
								</entry>
							</row>
							<row>
								<entry colname="col1"> IS_UNDEFINED (expr) </entry>
								<entry colname="col2">Returns TRUE if the expression evaluates to
									UNDEFINED. In most queries, undefined values are not included in
									the query results. The IS_UNDEFINED function allows undefined
									values to be included, so you can identify element with
									undefined values. </entry>
								<entry colname="col3">
									<codeblock>SELECT DISTINCT * 
FROM /exampleRegion p 
WHERE IS_UNDEFINED(p.status)</codeblock>
								</entry>
							</row>
							<row>
								<entry colname="col1"> NVL(expr1, expr2) </entry>
								<entry colname="col2">Returns expr2 if expr1 is null. The
									expressions can be query parameters (bind arguments), path
									expressions, or literals. </entry>
								<entry colname="col3"/>
							</row>
							<row>
								<entry colname="col1"> TO_DATE(date_str, format_str) </entry>
								<entry colname="col2">Returns a Java Data class object. The
									arguments must be String S with date_str representing the date
									and format_str representing the format used by date_str. The
									format_str you provide is parsed using
									java.text.SimpleDateFormat. </entry>
								<entry colname="col3"/>
							</row>
						</tbody>
					</tgroup>
				</table>
			</p>
		</section>
		<section id="section_B2CBA00EB83F463DAF4769D7859C64C8">
			<title>COUNT</title>
			<p>The COUNT keyword returns the number of results that match the query selection
				conditions specified in the WHERE clause. Using COUNT allows you to determine the
				size of a results set. The COUNT statement always returns an integer as its result. </p>
			<p>The following queries are example COUNT queries that return region entries: <codeblock>SELECT COUNT(*) FROM /exampleRegion</codeblock>
				<codeblock>SELECT COUNT(*) FROM /exampleRegion WHERE ID &gt; 0</codeblock>
				<codeblock>SELECT COUNT(*) FROM /exampleRegion WHERE ID &gt; 0 LIMIT 50</codeblock>
				<codeblock>SELECT COUNT(*) FROM /exampleRegion 
WHERE ID &gt;0 AND status LIKE 'act%'</codeblock>
				<codeblock>SELECT COUNT(*) FROM /exampleRegion 
WHERE ID IN SET(1,2,3,4,5)</codeblock>
			</p>
			<p>The following COUNT query returns the total number of StructTypes that match the
				query's selection criteria.
				<codeblock>SELECT COUNT(*) 
FROM /exampleRegion p, p.positions.values pos 
WHERE p.ID &gt; 0 AND pos.secId 'IBM'</codeblock>
			</p>
			<p>The following COUNT query uses the DISTINCT keyword and eliminates duplicates from
				the number of results.
				<codeblock>SELECT DISTINCT COUNT(*)
FROM /exampleRegion p, p.positions.values pos
WHERE p.ID &gt; 0 OR p.status = 'active' OR pos.secId
OR pos.secId = 'IBM'</codeblock>
			</p>
		</section>
	</conbody>
</concept>
