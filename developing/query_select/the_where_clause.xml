<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="the_where_clause">
	<title>WHERE Clause</title>
	<conbody>
		<section id="section_56BB3A7F44124CA9BFBC20E19399C6E4">
			<p>Each FROM clause expression must resolve to a collection of objects. The collection
				is then available for iteration in the query expressions that follow in the WHERE
				clause. </p>
			<p> For example:
				<codeblock>SELECT DISTINCT * FROM /exampleRegion p <b>WHERE p.status = 'active'</b></codeblock>
			</p>
			<p>The entry value collection is iterated by the WHERE clause, comparing the status field to the
				string 'active'. When a match is found, the value object of the entry is added to
				the return set. </p>
			<p> In the next example query, the collection specified in the first FROM clause expression is
				used by the rest of the SELECT statement, including the second FROM clause
				expression.
				<codeblock>SELECT DISTINCT * FROM /exampleRegion, positions.values p WHERE p.qty &gt; 1000.00</codeblock>
			</p>
		</section>
		<section id="section_99CA3FA508B740DCBAB4F01F8F9B1390">
			<title>Implementing equals and hashCode Methods</title>
			<p>You must implement the <codeph>equals</codeph> and <codeph>hashCode</codeph> methods
				in your custom objects if you are doing ORDER BY and DISTINCT queries on the
				objects. The methods must conform to the properties and behavior documented in the
				online Java API documentation for <codeph>java.lang.Object</codeph>. Inconsistent
				query results may occur if these methods are absent. </p>
			<p> If you have implemented <codeph>equals</codeph> and <codeph>hashCode</codeph>
				methods in your custom objects, you must provide detailed implementations of these
				methods so that queries execute properly against the objects. For example, assume
				that you have defined a custom object (CustomObject) with the following variables:
				<codeblock>int ID
int otherValue</codeblock> Let's put two CustomObjects (we'll call
				them CustomObjectA and CustomObjectB) into the cache: </p>
			<p>CustomObjectA: <codeblock>ID=1
otherValue=1</codeblock>
			</p>
			<p>CustomObjectB: <codeblock>ID=1
otherValue=2</codeblock>
			</p>
			<p>If you have implemented the equals method to simply match on the ID field (ID == ID),
				queries will produce unpredictable results. </p>
			<p>The following query:
				<codeblock>SELECT * FROM /CustomObjects c 
WHERE c.ID &gt; 1 AND c.ID &lt; 3 
AND c.otherValue &gt; 0 AND c.otherValue &lt; 3</codeblock>returns
				two objects, however the objects will be two of either CustomObjectA or
				CustomObjectB. </p>
			<p>Alternately, the following query:
				<codeblock>SELECT * FROM /CustomObjects c 
WHERE c.ID &gt; 1 AND c.ID &lt; 3 
AND c.otherValue &gt; 1 AND c.otherValue &lt; 3</codeblock>returns
				either 0 results or 2 results of CustomObjectB, depending on which entry is
				evaluated last. </p>
			<p>To avoid unpredictable querying behavior, implement detailed versions of the
					<codeph>equals</codeph> and <codeph>hashCode</codeph> methods.</p>
			<p>If you are comparing a non-primitive field of the object in the WHERE clause, use the
					<codeph>equals</codeph> method instead of the <codeph>=</codeph> operator. For
				example instead of <codeph>nonPrimitiveObj = objToBeCompared</codeph> use
					<codeph>nonPrimitiveObj.equals(objToBeCompared)</codeph>. </p>
		</section>
		<section id="section_7484AD999D01473385628246697F37F6">
			<title>Querying Serialized Objects</title>
			<p>Objects must implement serializable if you will be querying partitioned regions or if
				you are performing client-server querying. </p>
			<p>If you are using PDX serialization, you can access the values of individual fields
				without having to deserialize the entire object. This is accomplished by using
				PdxInstance, which is a wrapper around the serialized stream. The PdxInstance
				provides a helper method that takes field-name and returns the value without
				deserializing the object. While evaluating the query, the query engine will access
				field values by calling the getField method thus avoiding deserialization. </p>
			<p>To use PdxInstances in querying, ensure that PDX serialization reads are enabled in
				your server's cache. In gfsh, execute the following command before starting up your
				data members:<codeblock>gfsh>configure pdx --read-serialized=true</codeblock>See
					<xref
					href="../../tools_modules/gfsh/command-pages/configure.xml#topic_jdkdiqbgphqh"/>
				for more information.</p>
			<p>In cache.xml, set the following:
				<codeblock>// Cache configuration setting PDX read behavior 
&lt;cache&gt;
  &lt;pdx read-serialized="true"&gt;
  ...
  &lt;/pdx&gt;
&lt;/cache&gt;
</codeblock>
			</p>
		</section>
		<section id="section_75A114F9FEBF40A586621CAA1780DBD3">
			<title>Attribute Visibility</title>
			<p>You can access any object or object attribute that is available in the current scope
				of a query. In querying, an object's attribute is any identifier that can be mapped
				to a public field or method in the object. In the FROM specification, any object
				that is in scope is valid. Therefore, at the beginning of a query, all locally
				cached regions and their attributes are in scope. </p>
			<p>For attribute Position.secId which is public and has getter method "getSecId()", the
				query can be written as the following:
				<codeblock>SELECT DISTINCT * FROM /exampleRegion p WHERE p.position1.secId = '1'
SELECT DISTINCT * FROM /exampleRegion p WHERE p.position1.SecId = '1'
SELECT DISTINCT * FROM /exampleRegion p WHERE p.position1.getSecId() = '1'
</codeblock>
			</p>
			<p>The query engine tries to evaluate the value using the public field value. If a
				public field value is not found, it makes a get call using field name (note that the
				first character is uppercase.) </p>
		</section>
		<section id="section_EB7B976238104C0EACD959C52E5BD75B">
			<title>Joins</title>
			<p>If collections in the FROM clause are not related to each other, the WHERE clause can
				be used to join them. </p>
			<p>The statement below returns all portfolios from the /exampleRegion and
				/exampleRegion2 regions that have the same status.
				<codeblock>SELECT * FROM /exampleRegion portfolio1, /exampleRegion2 portfolio2 WHERE portfolio1.status = portfolio2.status</codeblock>
			</p>
			<p> To create indexes for region joins you create single-region indexes for both sides
				of the join condition. These are used during query execution for the join condition.
				Partitioned regions do not support region joins. For more information on indexes,
				see <xref href="../query_index/query_index.xml" type="concept" format="dita"
					scope="local"/>. </p>
			<p><b>Examples:</b></p>
			<p>Query two regions. Return the ID and status for portfolios that have the same
				status.<codeblock>SELECT portfolio1.ID, portfolio2.status FROM /exampleRegion portfolio1, /exampleRegion2 portfolio2 WHERE portfolio1.status = portfolio2.status</codeblock></p>
			<p>
				<codeblock>SELECT * FROM /exampleRegion portfolio1, portfolio1.positions.values positions1, /exampleRegion2 portfolio2, portfolio2.positions.values positions2 WHERE positions1.secId = positions1.secId</codeblock>
			</p>
			<p>
				<codeblock>SELECT * FROM /exampleRegion portfolio1, portfolio1.positions.values positions1, /exampleRegion2 portfolio2, portfolio2.positions.values positions2 WHERE portfolio1.ID = 1 AND positions1.secId = positions1.secID</codeblock>
			</p>
		</section>
		<section id="section_D91E0B06FFF6431490CC0BFA369425AD">
			<title>LIKE</title>
			<p><keyword keyref="product_name"/> offers limited support for the LIKE predicate. LIKE
				can be used to mean 'equals to'. If you terminate the string with a wildcard ('%'),
				it behaves like 'starts with'. You can also place a wildcard (either '%' or '_') at
				any other position in the comparison string. You can escape the wildcard characters
				to represent the characters themselves. </p>
			<p>
				<note>The '*' wildcard is not supported in OQL LIKE predicates.</note>
			</p>
			<p>You can also use the LIKE predicate when an index is present.</p>
			<p><b>Examples:</b></p>
			<p>Query the region. Return all objects where status equals
				'active':<codeblock>SELECT * FROM /exampleRegion p WHERE p.status LIKE 'active'</codeblock></p>
			<p>Query the region using a wild card for comparison. Returns all objects where status
				begins with
				'activ':<codeblock>SELECT * FROM /exampleRegion p WHERE p.status LIKE 'activ%'</codeblock></p>
		</section>
		<section>
			<title>Case Insensitive Fields</title>
			<p>You can use the Java String class methods <codeph>toUpperCase</codeph> and
					<codeph>toLowerCase</codeph> to transform fields where you want to perform a
				case-insensitive search. For
				example:<codeblock>SELECT entry.value FROM /exampleRegion.entries entry WHERE entry.value.toUpperCase LIKE '%BAR%'</codeblock>or
				<codeblock>SELECT * FROM /exampleRegion WHERE foo.toLowerCase LIKE '%bar%'</codeblock></p>
		</section>
		<section id="section_D2F8D17B52B04895B672E2FCD675A676">
			<title>Method Invocations</title>
			<p> To use a method in a query, use the attribute name that maps to the public method
				you want to invoke.
				<codeblock>SELECT DISTINCT * FROM /exampleRegion p WHERE p.positions.size &gt;= 2 - maps to positions.size()</codeblock>
			</p>
			<p>Methods declared to return void evaluate to null when invoked through the query
				processor. </p>
			<p> You cannot invoke a static method. See <xref
					href="the_where_clause.xml#the_where_clause/section_59E7D64746AE495D942F2F09EF7DB9B5"
					type="section" format="dita" scope="local"/> for more information. </p>
			<p>
				<b>Methods without parameters</b>
			</p>
			<p>If the attribute name maps to a public method that takes no parameters, just include
				the method name in the query string as an attribute. For example, emps.isEmpty is
				equivalent to emps.isEmpty(). </p>
			<p>In the following example, the query invokes isEmpty on positions, and returns the set
				of all portfolios with no positions:
				<codeblock>SELECT DISTINCT * FROM /exampleRegion p WHERE p.positions.isEmpty</codeblock>
			</p>
			<p>
				<b>Methods with parameters</b>
			</p>
			<p>To invoke methods with parameters, include the method name in the query string as an
				attribute and provide method arguments between parentheses. </p>
			<p>This example passes the argument "Bo" to the public method, and returns all names
				that begin with "Bo".
				<codeblock>SELECT DISTINCT * FROM /exampleRegion p WHERE p.name.startsWith('Bo')</codeblock>
			</p>
			<p>For overloaded methods, the query processor decides which method to call by matching
				the runtime argument types with the parameter types required by the method. If only
				one method's signature matches the parameters provided, it is invoked. The query
				processor uses runtime types to match method signatures. </p>
			<p>If more than one method can be invoked, the query processor chooses the method whose
				parameter types are the most specific for the given arguments. For example, if an
				overloaded method includes versions with the same number of arguments, but one takes
				a Person type as an argument and the other takes an Employee type, derived from
				Person, Employee is the more specific object type. If the argument passed to the
				method is compatible with both types, the query processor uses the method with the
				Employee parameter type. </p>
			<p>The query processor uses the runtime types of the parameters and the receiver to
				determine the proper method to invoke. Because runtime types are used, an argument
				with a null value has no typing information, and so can be matched with any object
				type parameter. When a null argument is used, if the query processor cannot
				determine the proper method to invoke based on the non-null arguments, it throws an
					<codeph>AmbiguousNameException</codeph>. </p>
		</section>
		<section id="section_59E7D64746AE495D942F2F09EF7DB9B5">
			<title>Enum Objects</title>
			<p>To write a query based on the value of an Enum object field, you must use the
					<codeph>toString</codeph> method of the enum object or use a query bind
				parameter. </p>
			<p>For example, the following query is NOT valid:
				<codeblock>//INVALID QUERY
select distinct * from /QueryRegion0 where aDay = Day.Wednesday
</codeblock>
			</p>
			<p> The reason it is invalid is that the call to <codeph>Day.Wednesday</codeph> involves
				a static class and method invocation which is not supported. </p>
			<p> Enum types can be queried by using toString method of the enum object or by using
				bind parameter. When you query using the toString method, you must already know the
				constraint value that you wish to query. In the following first example, the known
				value is 'active'. </p>
			<p><b>Examples:</b></p>
			<p>Query enum type using the toString
				method:<codeblock>// eStatus is an enum with values 'active' and 'inactive'
select * from /exampleRegion p where p.eStatus.toString() = 'active'
</codeblock></p>
			<p>Query enum type using a bind parameter. The value of the desired Enum field (
				Day.Wednesday) is passed as an execution
				parameter:<codeblock>select distinct * from /QueryRegion0 where aDay = $1</codeblock></p>
		</section>
		<section id="section_AC12146509F141378E493078540950C7">
			<title>IN and SET</title>
			<p>The IN expression is a boolean indicating if one expression is present inside a
				collection of expressions of compatible type. The determination is based on the
				expressions' equals semantics. </p>
			<p>If <codeph>e1</codeph> and <codeph>e2</codeph> are expressions, <codeph>e2</codeph>
				is a collection, and <codeph>e1</codeph> is an object or a literal whose type is a
				subtype or the same type as the elements of <codeph>e2</codeph>, then <codeph>e1 IN
					e2</codeph> is an expression of type boolean. </p>
			<p>The expression returns: <ul id="ul_2DB695F6FE364C9A93A162E84A9C0D8F">
					<li id="li_AA00FED209F44DC78886151B044089E1">TRUE if e1 is not UNDEFINED and is
						contained in collection e2 </li>
					<li id="li_BB2DA7F60AA448C5BFCF28D33BAF5953">FALSE if e1 is not UNDEFINED and is
						not contained in collection e2 # </li>
					<li id="li_D0901771813C4845999853656AEC6FC0">UNDEFINED if e1 is UNDEFINED </li>
				</ul>
			</p>
			<p>For example, <codeph>2 IN SET(1, 2, 3)</codeph> is TRUE. </p>
			<p>Another example is when the collection you are querying into is defined by a
				subquery. This query looks for companies that have an active portfolio on file:
				<codeblock>SELECT name, address FROM /company 
  WHERE id IN (SELECT id FROM /portfolios WHERE status = 'active')</codeblock>
			</p>
			<p>The interior SELECT statement returns a collection of ids for all /portfolios entries
				whose status is active. The exterior SELECT iterates over /company, comparing each
				entry’s id with this collection. For each entry, if the IN expression returns TRUE,
				the associated name and address are added to the outer SELECT’s collection. </p>
			<p>
				<b>Comparing Set Values</b>
			</p>
			<p>The following is an example of a set value type comparison where sp is of type Set: </p>
			<p>
				<codeblock>SELECT * FROM /exampleRegion WHERE sp = set('20','21','22')</codeblock>In
				this case, if sp only contains '20' and '21', then the query will evalute to false.
				The query compares the two sets and looks for the presence of all elements in both
				sets. </p>
			<p>For other collections types like list, the query can be written as follows:
				<codeblock>SELECT * FROM /exampleRegion WHERE sp.containsAll(set('20','21','22))</codeblock>where
				sp is of type List. </p>
			<p>In order to use it for Set value, the query can be written as:
				<codeblock>SELECT * FROM /exampleRegion WHERE sp IN SET (set('20','21','22'),set('10',11','12'))</codeblock>where
				a set value is searched in collection of set values. </p>
			<p>One problem is that you cannot create indexes on Set or List types (collection types)
				that are not comparable. To workaround this, you can create an index on a custom
				collection type that implements Comparable. </p>
			<p> </p>
		</section>
		<section id="section_E7206D045BEC4F67A8D2B793922BF213">
			<title>Double.NaN and Float.NaN Comparisons</title>
			<p>The comparison behavior of Double.NaN and Float.NaN within <keyword
					keyref="product_name"/> queries follow the semantics of the JDK methods
				Float.compareTo and Double.compareTo. </p>
			<p>In summary, the comparisons differ in the following ways from those performed by the
				Java language numerical comparison operators (&lt;, &lt;=, ==, &gt;= &gt;) when
				applied to primitive double [float] values: <ul
					id="ul_AA92F98B143B4FE891C64AE08E59C335">
					<li id="li_7755BA65223D4170805E8BFE00C21176">Double.NaN [Float.NaN] is
						considered to be equal to itself and greater than all other double [float]
						values (including Double.POSITIVE_INFINITY [Float.POSITIVE_INFINITY]). </li>
					<li id="li_7465F1C562BA47D9A10BDD961C0CCD57">0.0d [0.0f] is considered by this
						method to be greater than -0.0d [-0.0f]. </li>
				</ul>
			</p>
			<p> Therefore, Double.NaN[Float.NaN] is considered to be larger than
				Double.POSITIVE_INFINITY[Float.POSITIVE_INFINITY]. Here are some example queries and
				what to expect. <table id="table_BB3B6E84B5FE4E28995246C82A89C0A5">
					<tgroup cols="3">
						<colspec colnum="1" colname="col1" colwidth="4.55*"/>
						<colspec colnum="2" colname="col2" colwidth="1.47*"/>
						<colspec colnum="3" colname="col3" colwidth="1.00*"/>
						<thead>
							<row>
								<entry colname="col1">If p.value is NaN, the following query: </entry>
								<entry colname="col2">Evaluates to: </entry>
								<entry colname="col3"> Appears in the result set? </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry colname="col1"><codeph>SELECT * FROM /positions p WHERE
										p.value = 0</codeph>
								</entry>
								<entry colname="col2">false </entry>
								<entry colname="col3">no </entry>
							</row>
							<row>
								<entry colname="col1"><codeph>SELECT * FROM /positions p WHERE
										p.value &gt; 0</codeph>
								</entry>
								<entry colname="col2">true </entry>
								<entry colname="col3">yes </entry>
							</row>
							<row>
								<entry colname="col1"><codeph>SELECT * FROM /positions p WHERE
										p.value &gt;= 0</codeph>
								</entry>
								<entry colname="col2">true </entry>
								<entry colname="col3">yes </entry>
							</row>
							<row>
								<entry colname="col1"><codeph>SELECT * FROM /positions p WHERE
										p.value &lt; 0</codeph>
								</entry>
								<entry colname="col2">false </entry>
								<entry colname="col3">no </entry>
							</row>
							<row>
								<entry colname="col1"><codeph>SELECT * FROM /positions p WHERE
										p.value &lt;= 0</codeph>
								</entry>
								<entry colname="col2">false </entry>
								<entry colname="col3">no </entry>
							</row>
							<row>
								<entry colname="col1"><b>When p.value and p.value1 are both NaN, the
										following query:</b>
								</entry>
								<entry colname="col2"><b>Evaluates to: </b>
								</entry>
								<entry colname="col3"><b>Appears in the result set: </b>
								</entry>
							</row>
							<row>
								<entry colname="col1"><codeph>SELECT * FROM /positions p WHERE
										p.value = p.value1 </codeph>
								</entry>
								<entry colname="col2">true </entry>
								<entry colname="col3">yes </entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</p>
			<p>If you combine values when defining the following query in your code, when the query
				is executed the value itself is considered UNDEFINED when parsed and will not be
				returned in the result set. </p>
			<p>
				<codeblock>String query = "SELECT * FROM /positions p WHERE p.value =" + Float.NaN</codeblock>
			</p>
			<p>Executing this query, the value itself is considered UNDEFINED when parsed and will
				not be returned in the result set. </p>
			<p>To retrieve NaN values without having another field already stored as NaN, you can
				define the following query in your code: </p>
			<p>
				<codeblock>String query = "SELECT * FROM /positions p WHERE p.value &gt; " + Float.MAX_VALUE;
		</codeblock>
			</p>
		</section>
	</conbody>
</concept>
