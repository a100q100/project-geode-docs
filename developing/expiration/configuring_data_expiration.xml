<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="configuring_data_expiration">
	<title>Configure Data Expiration</title>
	<shortdesc>Configure the type of expiration and the expiration action to use. </shortdesc>
	<conbody>
		<section id="section_ADB8302125624E01A808EA5E4FF79A5C">
			<p>You do not have to perform these steps in the exact sequence shown. </p>
				<ol
					id="ol_B1F96C143AF145489A4E25BB0B86913A">
					<li id="li_2A1F4422737E4960B034D98225F27DA2">Set the region's
							<codeph>statistics-enabled</codeph> attribute to true.
							<note>The statistics used for expiration are available directly to the
								application through the <codeph>CacheStatistics</codeph> object
								returned by the <codeph>Region</codeph> and
									<codeph>Region.Entry</codeph>
								<codeph>getStatistics</codeph> methods. The
									<codeph>CacheStatistics</codeph> object also provides a method
								for resetting the statistics counters. </note>
					</li>
					<li id="li_6D843B04D27E4C1985B7FD84DDC37656">Set the expiration attributes by
						expiration type, with the max times and expiration actions. See the region
						attributes listings for <codeph>entry-time-to-live</codeph>,
							<codeph>entry-idle-time</codeph>, <codeph>region-time-to-live</codeph>,
						and <codeph>region-idle-time</codeph> in <xref
							href="../../reference/topics/cache_xml.xml#region-attributes"/>.
							<note>For partitioned regions, to ensure reliable read behavior, use the
								time-to-live attributes, not the idle-time attributes. In addition,
								you cannot use local-destroy or local-invalidate expiration actions
								in partitioned regions. </note>
						<p>Example: </p>
						<codeblock outputclass="language-xml">// Setting standard expiration on an entry
&lt;region-attributes statistics-enabled="true"&gt; 
  &lt;entry-idle-time&gt; 
    &lt;expiration-attributes timeout="60" action="local-invalidate"/&gt; 
  &lt;/entry-idle-time&gt; 
&lt;/region-attributes&gt; </codeblock>
					</li>
					<li id="li_0E7D1808D89F41719E9DA0A8E70C75C3">Override the region-wide settings
						for specific entries, if required by your application. To do this: <ol
							id="ol_e58ed4ea-e9ef-4926-8cb4-754ba9aeb995">
							<li id="li_9AA237E80F9C4DDAA1FF6E24F7D729AA">Program a custom expiration
								class that implements
									<codeph>com.gemstone.gemfire.cache.CustomExpiry</codeph>.
								Example:
								<codeblock outputclass="language-java">// Custom expiration class
// Use the key for a region entry to set entry-specific expiration timeouts of 
//   10 seconds for even-numbered keys with a DESTROY action on the expired entries
//   Leave the default region setting for all odd-numbered keys. 
public class MyClass implements CustomExpiry, Declarable 
{ 
    private static final ExpirationAttributes CUSTOM_EXPIRY = 
            new ExpirationAttributes(10, ExpirationAction.DESTROY); 
    public ExpirationAttributes getExpiry(Entry entry) 
    { 
        int key = (Integer)entry.getKey(); 
        return key % 2 == 0 ? CUSTOM_EXPIRY : null; 
    }
}</codeblock>
							</li>
							<li id="li_0D0114CED25B4B9F89704EF1ECA43F5C">Define the class inside the
								expiration attributes settings for the region. Example:
								<codeblock outputclass="language-xml">&lt;!-- Set default entry idle timeout expiration for the region --&gt; 
&lt;!-- Pass entries to custom expiry class for expiration overrides --&gt;
&lt;region-attributes statistics-enabled="true"&gt; 
    &lt;entry-idle-time&gt; 
        &lt;expiration-attributes timeout="60" action="local-invalidate"&gt; 
            &lt;custom-expiry&gt; 
                &lt;class-name&gt;com.company.mypackage.MyClass&lt;/class-name&gt; 
            &lt;/custom-expiry&gt; 
        &lt;/expiration-attributes&gt; 
    &lt;/entry-idle-time&gt; 
&lt;/region-attributes&gt;</codeblock>
							</li>
						</ol>
					</li>
				</ol>
			<note>You can also configure Regions using the gfsh command-line interface, however, you
				cannot configure <codeph>custom-expiry</codeph> using gfsh. See <xref
					href="../../tools_modules/gfsh/quick_ref_commands_by_area.xml#topic_EF03119A40EE492984F3B6248596E1DD"
				/>.</note>
				<table frame="all" id="table_26BACDDC58D24162BAD257C12E612DF2">
					<tgroup cols="1">
						<colspec colname="topic_link" colnum="1"/>
						<thead>
							<row>
								<entry>Related Topics </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>
									<xref
										href="http://community.gemstone.com/display/gemfire/Cache+Expiration+Example"
										scope="external" format="html">Cache Expiration (<keyword keyref="product_name"/>
										Example)</xref>
								</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			<p> </p>
		</section>
	</conbody>
</concept>
