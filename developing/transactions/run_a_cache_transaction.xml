<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<dita>
	<task id="task_f15_mr3_5k">
		<title>How to Run a <keyword keyref="product_name"/> Cache Transaction</title>
		<shortdesc>This topic describes how to run a <keyword keyref="product_name"/> cache
			transaction. </shortdesc>
		<taskbody>
			<context id="context_1E769459B44B4754AE936CFF7BA77D0F">
				<p>Applications manage transactions on a per-cache basis. A <keyword keyref="product_name"/>
					cache transaction starts with a <codeph>CacheTransactionManager.begin</codeph>
					method and continues with a series of operations, which are typically region
					operations such as region create, update, clear and destroy. The begin, commit,
					and rollback are directly controlled by the application. A commit, failed
					commit, or voluntary rollback by the transaction manager ends the transaction. </p>
				<p>You can run transactions on any type of cache region except regions with <b>global</b> scope.
					An operation  attempted on a region with global scope throws an
						<codeph>UnsupportedOperationException</codeph> exception. </p>
				<p>A transaction may not be nested within another transaction. An attempt to begin a
					nested transaction will throw an <codeph>IllegalStateException</codeph>
					exception.</p>
				<p>This discussion centers on transactions on replicated and partitioned regions. If you use
					non-replicated distributed regions, follow the guidelines for replicated
					regions. </p>
			</context>
			<steps id="steps_lnk_db1_wk">
				<step id="step_4153ADD587C64577B9E3139DADFA06D5">
					<cmd><b>Configure the cache copy-on-read behavior in the members hosting the transactional
							data, or perform cache updates that avoid in-place changes.</b> This
						allows the transaction manager to control when cache updates are visible
						outside the transaction. See <xref
							href="working_with_transactions.xml#concept_vx2_gs4_5k"/>.</cmd>
				</step>
				<step id="step_089776F8F48B4F02A30514CF16CEDFFF">
					<cmd><b>Configure your regions for transactions in the members hosting the transactional
							data.</b></cmd>
					<choicetable id="choicetable_nrb_l53_5k">
						<chhead>
							<choptionhd>If you use...</choptionhd>
							<chdeschd>then you should...</chdeschd>
						</chhead>
						<chrow>
							<choption>replicated regions</choption>
							<chdesc>Use distributed-ack scope. The region shortcuts specifying
								REPLICATE use distributed-ack scope. This is particularly important
								if you have more than one data producer. With one data producer, you
								can safely use distributed-no-ack.</chdesc>
						</chrow>
						<chrow>
							<choption>partitioned regions</choption>
							<chdesc>Custom partition and colocate data among regions so all the data for any single
								transaction is hosted by a single member. If the transaction is run
								from a member other than the one hosting the data, the transaction
								will run by proxy in the member hosting the data. The partitioned
								region must be defined for the application that runs the
								transaction, but the data can be hosted in a remote member.</chdesc>
						</chrow>
						<chrow>
							<choption>persistent regions</choption>
							<chdesc>Configure <keyword keyref="product_name"/> to allow transactions on persistent
								regions. By default, the configuration does not allow transactions
								on persistent regions. Enable the use of transactions on persistent
								regions by setting the gemfire property
								gemfire.ALLOW_PERSISTENT_TRANSACTIONS to true.</chdesc>
						</chrow>
						<chrow>
							<choption>a mix of partitioned and replicated regions</choption>
							<chdesc>Make sure any replicated region involved in the transaction is hosted on every member
								that hosts the partitioned region data. All data for a single
								transaction must reside within a single host.</chdesc>
						</chrow>
						<chrow>
							<choption>delta propagation</choption>
							<chdesc>Set the region attribute <codeph>cloning-enabled</codeph> to true. This lets <keyword
									keyref="product_name"/> do conflict checks at commit time.
								Without this, the transaction will throw an
									<codeph>UnsupportedOperationInTransactionException </codeph>
								exception.</chdesc>
						</chrow>
						<chrow>
							<choption>global JTA transactions with only <keyword keyref="product_name"/> cache
								transactions</choption>
							<chdesc>Set the region attribute <codeph>ignore-jta</codeph> to true for all regions that you
								do <i>not</i> want to participate in JTA global transactions. It is
								false by default. For instructions on how to run a JTA global
								transaction, see <xref href="JTA_transactions.xml"/>.</chdesc>
						</chrow>
					</choicetable>
				</step>
				<step id="step_21B9FE7093294F03B766D91104453BC3">
					<cmd>
						<b>Update your cache event handler and transaction event handler
							implementations to handle your transactions.</b>
					</cmd>
					<info>
						<p>Cache event handlers may be used with transactions. Cache listeners are called after the
							commit, instead of after each cache operation, and the cache listeners
							receive conflated transaction events. Cache writers and loaders are
							called as usual, at the time of the operation. </p>
						<p>Follow these additional guidelines when writing cache event handler callbacks:</p>
							<ul
								id="ul_uwx_lv3_5k">
								<li id="li_C140791F29BF41EA975FF723E721774D">Make sure cache
									callbacks are transactionally aware, because a transactional
									operation could launch callbacks that are not transactional. </li>
								<li id="li_9B5E2EC270E24279BFBBC6C9ED562384">Make sure cache
									listeners will operate properly, given entry event conflation.
									Two events for the same key are conflated by removing the
									existing event and queuing the new event. </li>
							</ul>
						<p>See <xref href="working_with_transactions.xml#concept_ysx_nf1_wk"/> for
							more information. </p>
						<p>Transaction event handlers are available. Transaction event handlers are cache-wide. You
							can install one transaction writer and any number of transaction
							listeners. Follow these guidelines:</p>
							<ul id="ul_cvd_gw3_5k">
								<li id="li_146AAB2438194C1BA2E1AC0FFE2B1E10">Implement with
									synchronization for thread safety. Listener and writer handlers
									may be invoked at the same time by different threads for
									different transactions. </li>
								<li id="li_C44EC8D69EB543F5A7B040D96865F429">Keep  transactional
									callback implementations lightweight, and avoid doing anything
									that might cause the  callbacks to block. </li>
							</ul>
						<p>See <xref href="working_with_transactions.xml#concept_ocw_vf1_wk"/> for
							more information. </p>
					</info>
				</step>
				<step id="step_273CF845520140999B76CA02B3CE8F7C">
					<cmd><b>Write the transaction code.</b> For example: </cmd>
					<info>
						<codeblock>CacheTransactionManager txManager =
		  cache.getCacheTransactionManager();

try {
	txManager.begin();
	// ... do work
	txManager.commit();
} catch (CommitConflictException conflict) {
	// ... do necessary work for a transaction that failed on commit
}</codeblock>
						<p>Follow these guidelines when writing the transaction: </p>
							<ul id="ul_qgz_4bj_5k">
								<li id="li_094E07EDBD474F33B893C4696383F446">Start each transaction
									with a begin operation. </li>
								<li id="li_F5C54C26369B4947BA3EA22B124E4935">Consider whether you
									will want to suspend and resume the transaction. If some
									operations should not be part of the transaction, you may want
									to suspend the transaction while performing non-transactional
									operations. After the non-transactional operations are complete,
									you can resume the transaction. See <xref
										href="transaction_suspend_resume_example.xml#concept_40AAC4332DCE4E4EB60C4BA141B729A4"
									/> for an example. </li>
								<li id="li_3DD31608D05245048BAF64E1A6FD1E1D">If your transaction
									operates on a mix of partitioned and replicated regions, do the
									first region operation on an entry of the partitioned region.
									This sets the host for the entire transaction. </li>
								<li id="li_BBBEB071A66748A29060EC520EB298B7">If you did not
									configure copy-on-read to true, be sure all cache updates avoid
									in-place changes. </li>
								<li id="li_A6578FB6A61F486B873AD117E96F0E9D">Take into account the
									behavior of transactional and non-transactional operations. All
									transactional operations that are run after the begin and before
									the commit or rollback are included in the transaction. </li>
								<li id="li_096C06567123466F82547DD76FE7429F">End each transaction
									with a commit or a rollback. Do not leave any transaction in an
									uncommitted or unrolled back state. Transactions do not time
									out, so they will remain for the life of the application. </li>
							</ul>
					</info>
				</step>
				<step id="step_0252DAAFC7E044268EA8E499E2AF948D">
					<cmd>
						<b>Review all of your code for compatibility with transactions.</b>
					</cmd>
					<info>
						<p>When you commit a transaction, while the commit is in process, the changes are visible in
							the distributed cache. This provides better performance than locking
							everything involved with the transaction updates, but it means that
							another process accessing data used in the transaction might get some
							data in the pre-transaction state and some in the post-transaction
							state. </p>
						<p>For example, suppose keys 1 and 2 are modified within a transaction, such that both values
							change from A to B. In another thread, it is possible to read key 1 with
							value B and key 2 with value A, after the commit begins, but before the
							commit completes. This is possible due to the nature of <keyword
								keyref="product_name"/> reads. This choice sacrifices atomic
							visibility in favor of performance; reads do not block writes, and
							writes do not block reads. </p>
					</info>
				</step>
			</steps>
		</taskbody>
	</task>
</dita>
