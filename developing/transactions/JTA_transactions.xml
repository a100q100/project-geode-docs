<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<dita>
	<topic id="JTA_transactions_with_GemFire">
		<title>JTA Global Transactions with <keyword keyref="product_name"/>
		</title>
		<shortdesc>Use JTA global transactions to coordinate <keyword keyref="product_name"/> cache
			transactions and JDBC transactions.</shortdesc>
		<body>
			<p>JTA is a standard Java interface you can use to coordinate <keyword
					keyref="product_name"/> cache transactions and JDBC transactions globally under
				one umbrella. JTA provides direct coordination between the <keyword
					keyref="product_name"/> cache and another transactional resource, such as a
				database. The parties involved in a JTA transaction include:</p>
				<ul id="ul_l5h_vkn_1l">
					<li id="li_129D609E932A45EABE0C4CEA07C6AF1A">The Java application, responsible
						for starting the global transaction </li>
					<li id="li_B35ABBEAAD854E629CFFF196CA92A538">The JTA transaction manager,
						responsible for opening, committing, and rolling back transactions </li>
					<li id="li_48B8B35E1A9F494AB6F5C54BD1C17178">The transaction resource managers,
						including the <keyword keyref="product_name"/> cache transaction manager and
						the JDBC resource manager, responsible for managing operations in the cache
						and database respectively </li>
				</ul>
			<p>Using JTA, your application controls all transactions in the same standard way,
				whether the transactions act on the <keyword keyref="product_name"/> cache, a JDBC
				resource, or both together. When a JTA global transaction is done, the <keyword
					keyref="product_name"/> transaction and the database transaction are both
				complete. </p>
			<p>When using JTA global transactions with <keyword keyref="product_name"/>, you have three
				options: </p>
				<ol id="ol_iwf_qx1_wk">
					<li id="li_ED6F4886753A48669E603A33DF9FFCC5">Coordinate with an external JTA
						transaction manager in a container (such as WebLogic or JBoss) </li>
					<li>Set <keyword keyref="product_name"/> as the “last resource” while using a
						container (such as WebLogic or JBoss) as the JTA transaction manager</li>
					<li id="li_3869D2AB21B0422791CEA6A0EE683BDC">Have <keyword keyref="product_name"
						/> act as the JTA transaction manager</li>
				</ol>
			<p>An application creates a global transaction by using
					<codeph>javax.transaction.UserTransaction</codeph> bound to the JNDI context
					<codeph>java:/UserTransaction</codeph> to start and terminate transactions.
				During the transaction, cache operations are done through <keyword
					keyref="product_name"/> as usual as described in <xref
					href="cache_transactions.xml#topic_e15_mr3_5k"/>. </p>
				<note>
					<p>See the Sun documentation for more information on topics such as JTA,
						<codeph>javax.transaction</codeph>, committing and rolling back global
					transactions, and the related exceptions. 
					</p>
				</note>
		</body>
	</topic>
	<concept id="concept_cp1_zx1_wk">
		<title>Coordinating with External JTA Transactions Managers</title>
		<shortdesc><keyword keyref="product_name"/> can work with the JTA transaction managers of
			several containers like JBoss, WebLogic, GlassFish, and so on. </shortdesc>
		<conbody>
			<p>At startup <keyword keyref="product_name"/> looks for a TransactionManager
					(<codeph>javax.transaction.TransactionManager</codeph>) that has been bound to
				its JNDI context. When <keyword keyref="product_name"/> finds such an external
				transaction manager, all <keyword keyref="product_name"/> region operations (such as
				get and put) will participate in global transactions hosted by this external JTA
				transaction manager. </p>
			<p>This figure shows the high-level operation of a JTA global transaction whose
				resources include a <keyword keyref="product_name"/> cache and a database. </p>
			<fig id="fig_2789F3F79DB34841B5306D84E8BAF1D7">
				<image id="image_C2935E48415349659FC39BF5C7E75579"
					href="../../images_svg/transactions_jta_app_server.svg"/>
			</fig>
			<p>An externally coordinated JTA global transaction is run in the following manner: </p>
				<ol
					id="ol_eq5_1fb_wk">
					<li id="li_B9901259E6C4449E8FC0D1EFE02FEDF8">Each region operation looks up for
						presence of a global transaction. If one is detected, then a <keyword
							keyref="product_name"/> transaction is started automatically, and we
						register a <codeph>javax.transaction.Synchronization</codeph> callback with
						the external JTA transaction manager. </li>
					<li id="li_0763DEB7337F4EF9A96273BE57201736">At transaction commit, <keyword
							keyref="product_name"/> gets a <codeph>beforeCommit()</codeph> callback
						from the external JTA transaction manager. <keyword keyref="product_name"/>
						does all locking and conflict detection at this time. If this fails, an
						exception is thrown back to JTA transaction manager, which then aborts the
						transaction. </li>
					<li id="li_1A1332CC0BB94A8FBF9E62D72EB7A7A5">After a successful
						<codeph>beforeCommit()</codeph>callback, JTA transaction manager asks other
						data sources to commit their transaction. </li>
					<li id="li_B21E2DDBAA774E458E25219B96D49631"><keyword keyref="product_name"/>
						then gets a <codeph>afterCommit()</codeph> callback in which changes are
						applied to the cache and distributed to other members. </li>
				</ol>
			<p>You can disable JTA in any region that should not participate in JTA transactions.
				See <xref href="turning_off_jta.xml#concept_nw2_5gs_xk"
					><?xm-replace_text Turning Off JTA Transactions ?></xref>. </p>
		</conbody>
	</concept>
	<task id="task_j3g_3mn_1l">
		<title>How to Run a JTA Transaction Coordinated by an External Transaction Manager</title>
		<shortdesc>Use the following procedure to run a <keyword keyref="product_name"/> global JTA
			transaction coordinated by an external JTA transaction manager. </shortdesc>
		<taskbody>
			<steps id="steps_fzh_rmn_1l">
				<step>
					<cmd><b>Configure the external data sources in the external container.</b> Do
						not configure the data sources in cache.xml . They are not guaranteed to get
						bound to the JNDI tree.</cmd>
				</step>
				<step id="step_149E900FC9D0410394E47C3DB4A6E197">
					<cmd>Configure <keyword keyref="product_name"/> for any necessary transactional behavior in the
							<codeph>cache.xml</codeph> file. For example, enable
							<codeph>copy-on-read</codeph> and specify a transaction listener, as
						needed. See <xref href="working_with_transactions.xml#concept_vx2_gs4_5k"/>
						and <xref href="working_with_transactions.xml#concept_ocw_vf1_wk"/> for
						details. </cmd>
				</step>
				<step id="step_FE6FEFBB03E841A78F82AEA2A4B7F2A2">
					<cmd>Make sure that JTA transactions are enabled for the regions that will participate in the
						transaction. See <xref href="turning_off_jta.xml#concept_nw2_5gs_xk"/> for
						details. </cmd>
				</step>
				<step id="step_868A61844ABB437EB41327875B9A2369">
					<cmd> Start the transaction through the external container. </cmd>
				</step>
				<step id="step_73F5AFE370E44D91873E70F74C317C56">
					<cmd>Initialize the <keyword keyref="product_name"/> cache. <keyword
							keyref="product_name"/> will automatically join the transaction. </cmd>
				</step>
				<step id="step_A7F2C398EBF64E39BA7A96ED30E41E7A">
					<cmd> Execute operations in the cache and the database as usual. </cmd>
				</step>
				<step id="step_56BAA2D796494947B93F14FA7708934C">
					<cmd> Commit the transaction through the external container. </cmd>
				</step>
			</steps>
		</taskbody>
	</task>
	<concept id="concept_csy_vfb_wk">
		<title>Using <keyword keyref="product_name"/> as the "Last Resource" in a Container-Managed
			JTA Transaction</title>
		<shortdesc>The "last resource" feature in certain 3rd party containers such as WebLogic allow the
			use one non-XAResource (such as <keyword keyref="product_name"/>) in a transaction with
			multiple XAResources while ensuring consistency. </shortdesc>
		<conbody>
			<p>In the previous two JTA transaction use cases, if the <keyword keyref="product_name"/> member
				fails after the other data sources commit but before <keyword keyref="product_name"
				/> receives the <codeph>afterCommit</codeph> callback, <keyword
					keyref="product_name"/> and the other data sources may become inconsistent. To
				prevent this from occurring, you can use the container's "last resource
				optimization" feature, with <keyword keyref="product_name"/> set as the "last
				resource". Using <keyword keyref="product_name"/> as the last resource ensures that
				in the event of failure, <keyword keyref="product_name"/> remains consistent with
				the other XAResources involved in the transaction.</p>
			<p>To accomplish this, the application server container must use a JCA Resource Adapter to
				accomodate <keyword keyref="product_name"/> as the transaction's last resource. The
				transaction manager of the container first issues a "prepare" message to the
				participating XAResources. If the XAResources all accept the transaction, then the
				manager issues a "commit" instruction to the non-XAResource (in this case, <keyword
					keyref="product_name"/>). The non-XAResource (in this case, <keyword
					keyref="product_name"/>) participates as a local transaction resource. If the
				non-XAResource fails, then the transaction manager can rollback the XAResources. </p>
			<p>
				<image href="../../images_svg/transactions_jca_adapter.svg" id="image_opb_sgb_wk"/>
			</p>
		</conbody>
	</concept>
	<task id="task_sln_x3b_wk">
		<title>How to Run JTA Transactions with <keyword keyref="product_name"/> as a "Last
			Resource"</title>
		<taskbody>
			<steps id="steps_rnq_t4n_1l">
				<step>
					<cmd>Locate the <codeph>$GEMFIRE/lib/gemfire-jca.rar</codeph> file in your
							<keyword keyref="product_name"/> installation. </cmd>
				</step>
				<step>
					<cmd>Add your container-specific XML file to the
							<codeph>gemfire-jca.rar</codeph> file. </cmd>
					<substeps id="substeps_nx1_5v1_w4">
						<substep>
							<cmd>Create a container-specific resource adapter XML file named &lt;container>-ra.xml. For
								example, an XML file for a WebLogic resource adapter XML file might
								look something like this:</cmd>
							<info>
								<codeblock>&lt;?xml version="1.0"?>
&lt;!DOCTYPE weblogic-connection-factory-dd PUBLIC '-//BEA Systems, Inc.//DTD WebLogic 9.0.0 Connector//EN' 
'http://www.bea.com/servers/wls810/dtd/weblogic810-ra.dtd'>

&lt;weblogic-connection-factory-dd&gt;
   &lt;connection-factory-name&gt;GFE JCA&lt;/connection-factory-name&gt;
   &lt;jndi-name&gt;gfe/jca&lt;/jndi-name&gt;
&lt;/weblogic-connection-factory-dd&gt;</codeblock>
							</info>
						</substep>
						<substep>
							<cmd>Create a folder named <codeph>META-INF</codeph>, and place the container-specific
								XML file inside the directory. For example, the folder structure
								would look like this:</cmd>
							<info>
								<codeblock>META-INF/weblogic-ra.xml</codeblock>
							</info>
						</substep>
						<substep>
							<cmd>Navigate to the directory above the <codeph>META-INF</codeph> folder and execute the
								following command:</cmd>
							<info>
								<codeblock>$ jar -uf &lt;GEMFIRE_INSTALL_DIR>/lib/gemfire-jca.rar META-INF/weblogic-ra.xml</codeblock>
							</info>
						</substep>
					</substeps>
				</step>
				<step>
					<cmd>Make sure that <codeph>$GEMFIRE/lib/gemfire.jar</codeph> is accessible in the CLASSPATH of
						the JTA transaction coordinator container.</cmd>
				</step>
				<step>
					<cmd>Deploy <codeph>gemfire-jca.rar</codeph> file on the JTA transaction coordinator container
						. When deploying the file, you specify the JNDI name and so on. </cmd>
				</step>
				<step>
					<cmd>Configure <keyword keyref="product_name"/> for any necessary transactional
						behavior. Enable <codeph>copy-on-read</codeph> and specify a transaction
						listener, if you need one. See <xref
							href="working_with_transactions.xml#concept_vx2_gs4_5k"/> and <xref
							href="working_with_transactions.xml#concept_ocw_vf1_wk"/> for
						details.</cmd>
				</step>
				<step>
					<cmd>Get an initial context through
							<codeph>com.gemstone.cache.Cache.getJNDIContext</codeph>. For
						example:</cmd>
					<info>
						<codeblock>Context ctx = cache.getJNDIContext();</codeblock>
						<p>This returns <codeph>javax.naming.Context</codeph> and gives you the JNDI
							associated with the cache. The context contains the
								<codeph>TransactionManager</codeph>,
								<codeph>UserTransaction</codeph>, and any configured JDBC resource
							manager.</p>
					</info>
				</step>
				<step>
					<cmd>Start and commit the global transaction using the <codeph>UserTransaction</codeph> object
						rather than with <keyword keyref="product_name"/>'s
							<codeph>CacheTransactionManager</codeph>. </cmd>
					<info>
						<codeblock>UserTransaction txManager = (UserTransaction)ctx.lookup("java:/UserTransaction");</codeblock>
					</info>
				</step>
				<step>
					<cmd>Obtain a <keyword keyref="product_name"/> connection.</cmd>
					<info>
						<codeblock>GFConnectionFactory cf = (GFConnectionFactory) ctx.lookup("gfe/jca");

//This step of obtaining connection is what begins the
//LocalTransaction.
//If this is absent, GFE operations will not be part of any
//transaction
GFConnection gemfireConn = (GFConnection)cf.getConnection();</codeblock>
					</info>
				</step>
			</steps>
			<example>
				<p>See <xref href="jca_adapter_example.xml#concept_swv_z2p_wk"/> for an example of
					how to set up a transaction using the JCA Resource Adapter.</p>
			</example>
		</taskbody>
	</task>
	<concept id="concept_8567sdkbigige">
		<title>Using <keyword keyref="product_name"/> as the JTA Transaction Manager</title>
		<shortdesc>You can also use <keyword keyref="product_name"/> as the JTA transaction manager. </shortdesc>
		<conbody>
			<p><keyword keyref="product_name"/> ships with its own implementation of a JTA
				transaction manager. However, note that this implementation is not XA-compliant;
				therefore, it does not persist any state, which could lead to an inconsistent state
				after recovering a crashed member. </p>
			<p>
				<image id="image_C8D94070E55F4BCC8B5FF3D5BEBA99ED"
					href="../../images_svg/transactions_jta.svg"/>
			</p>
			<p>The <keyword keyref="product_name"/> JTA transaction manager is initialized when the
					<keyword keyref="product_name"/> cache is initialized. Until then, JTA is not
				available for use. The application starts a JTA transaction by using the
					<codeph>UserTransaction.begin</codeph> method. The
					<codeph>UserTransaction</codeph> object is the application’s handle to instruct
				the JTA transaction manager on what to do. </p>
			<p>The <keyword keyref="product_name"/> JTA implementation also supports the J2EE
				Connector Architecture (JCA) <codeph>ManagedConnectionFactory</codeph>. </p>
			<p>The <keyword keyref="product_name"/> implementation of JTA has the following
				limitations: </p>
				<ul id="sggdhgbjavdbhip">
					<li id="li_89B2CCA21A6A4C9A8DEF15CE2CAB67CE">Only one JDBC database instance per
						transaction is allowed, although you can have multiple connections to that
						database. </li>
					<li id="li_B93FE207E7BF4A648D78F116A7CCAD81">Multiple threads cannot participate
						in a transaction. </li>
					<li id="li_4A334C46B9F246AD80CD6C40A467D4F4">Transaction recovery after a crash
						is not supported. </li>
				</ul>
			<p>In addition, JTA transactions are subject to the limitations of <keyword keyref="product_name"/> cache transactions such as not being supported on
				regions with global scope. When a global transaction needs to access the <keyword keyref="product_name"/> cache, JTA silently starts a <keyword keyref="product_name"/> cache transaction.</p>
		</conbody>
	</concept>
	<task id="task_qjv_khb_wk">
		<title>How to Run a JTA Global Transaction Using <keyword keyref="product_name"/> as the JTA
			Transaction Manager</title>
		<shortdesc>This topic describes how to run a JTA global transaction in <keyword
				keyref="product_name"/> . </shortdesc>
		<taskbody>
			<context id="context_A3AF81851C05445C8E146B09DD759A7F">
				<p>To run a global transaction, perform the following steps: </p>
			</context>
			<steps id="steps_b32_135_1l">
				<step id="step_C4BC4E1FFE7F45ACADE90ACD246FD56F">
					<cmd>Configure the external data sources in the <codeph>cache.xml</codeph> file. See <xref
							href="configuring_db_connections_using_JNDI.xml#topic_A5E3A67C808D48C08E1F0DC167C5C494"
						/> for examples. </cmd>
				</step>
				<step id="step_49C47DDAF22C48138B14705884F26838">
					<cmd>Include the JAR file for any data sources in your CLASSPATH. </cmd>
				</step>
				<step id="step_07205DA4D7504ED39C272197EF2722AD">
					<cmd>Configure <keyword keyref="product_name"/> for any necessary transactional
						behavior. Enable <codeph>copy-on-read</codeph> for your cache and specify a
						transaction listener, if you need one. See <xref
							href="working_with_transactions.xml#concept_vx2_gs4_5k"/> and <xref
							href="working_with_transactions.xml#concept_ocw_vf1_wk"/> for details.
					</cmd>
				</step>
				<step id="step_9238FE92E6AF4476B568134033CA62F5">
					<cmd>Make sure that JTA transactions are not disabled in the <codeph>cache.xml</codeph>
						file or the application code. </cmd>
				</step>
				<step id="step_118A17B4BD904A34A14FFFFE7B6E3721">
					<cmd>Initialize the <keyword keyref="product_name"/> cache. </cmd>
				</step>
				<step id="step_7B74F1124B3B4EE7B1915C054D9597BF">
					<cmd>Get an initial context through
							<codeph>com.gemstone.gemfire.cache.Cache.getJNDIContext</codeph>. For
						example: </cmd>
					<info>
						<codeblock>Context ctx = cache.getJNDIContext();</codeblock>
						<p>This returns <codeph>javax.naming.Context</codeph> and gives you the JNDI
							associated with the cache. The context contains the
								<codeph>TransactionManager</codeph>,
								<codeph>UserTransaction</codeph>, and any configured JDBC resource
							manager. </p>
					</info>
				</step>
				<step id="step_02EC6A0BC0AD48D58F69410EB90AA364">
					<cmd>Look up the <codeph>UserTransaction</codeph> context: </cmd>
					<info>
						<codeblock>UserTransaction txManager = (UserTransaction) ctx.lookup("java:/UserTransaction");</codeblock>With
							<codeph>UserTransaction</codeph>, you can begin, commit, and rollback
						transactions. <p>If a global transaction exists when you use the cache, it
							automatically joins the transaction. Operations on a region
							automatically detect and become associated with the existing global
							transaction through JTA synchronization. If the global transaction has
							been marked for rollback, however, the <keyword keyref="product_name"/>
							cache is not allowed to enlist with that transaction. Any cache
							operation that causes an attempt to enlist throws a
								<codeph>FailedSynchronizationException</codeph>. </p>
						<p> The <keyword keyref="product_name"/> cache transaction’s commit or
							rollback is triggered when the global transaction commits or rolls back.
							When the global transaction is committed using the
								<codeph>UserTransaction</codeph> interface, the transactions of any
							registered JTA resources are committed, including the <keyword
								keyref="product_name"/> cache transaction. If the cache or database
							transaction fails to commit, the <codeph>UserTransaction</codeph> call
							throws a <codeph>TransactionRolledBackException</codeph>. If a commit or
							rollback is attempted directly on a <keyword keyref="product_name"/>
							transaction that is registered with JTA, that action throws an
								<codeph>IllegalStateException</codeph>. </p>
					</info>
				</step>
			</steps>
			<example id="example_BD14DF4B30704108BF7D017B67371AB8">See <xref
					href="transaction_jta_gemfire_example.xml#concept_ffg_sj5_1l" type="concept"
					format="dita" scope="local"/>. </example>
		</taskbody>
	</task>
</dita>
