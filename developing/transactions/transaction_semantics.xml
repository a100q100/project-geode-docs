<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="transaction_semantics">
	<title><keyword keyref="product_name"/> Cache Transaction Semantics</title>
	<conbody>
		<p><keyword keyref="product_name"/> transaction semantics differ in some ways from the
			Atomicity-Consistency-Isolation-Durability (ACID) semantics of traditional relational
			databases. For performance reasons, <keyword keyref="product_name"/> transactions do not
			adhere to ACID constraints by default, but can be configured for ACID support as
			described in this section.</p>
		<section id="section_8362ACD06C784B5BBB0B7E986F760169">
			<title>Atomicity</title>
			<p>Atomicity is “all or nothing” behavior: a transaction completes successfully only when all of
				the operations it contains complete successfully. If problems occur during a
				transaction, perhaps due to other transactions with overlapping changes, the
				transaction cannot successfully complete until the problems are resolved.</p>
			<p><keyword keyref="product_name"/> transactions provide atomicity and realize speed by using a
				reservation system, instead of using the traditional relational database technique
				of a two-phase locking of rows. The reservation prevents other, intersecting
				transactions from completing, allowing the commit to check for conflicts and to
				reserve resources in an all-or-nothing fashion prior to making changes to the data.
				After all changes have been made, locally and remotely, the reservation is released.
				With the reservation system, an intersecting transaction is simply discarded. The
				serialization of obtaining locks is avoided. See <xref
					href="how_cache_transactions_work.xml#concept_sbj_lj1_wk"/> for details on the
				two-phase commit protocol that implements the reservation system.</p>
		</section>
		<section id="section_7C287DA4A5134780B3199CE074E3F890">
			<title>Consistency</title>
			<p>Consistency requires that data written within a transaction must observe the key and value
				constraints established for the affected region. Note that validity of the
				transaction is the responsibility of the application.</p>
		</section>
		<section id="section_126A24EC499D4CF39AE766A0B526A9A5">
			<title>Isolation</title>
                        <p>Isolation assures that operations will see either the pre-transaction state of the system
                                or its post-transaction state, but not the transitional state that occurs while a
                                transaction is in progress.  Write operations in a transaction are always confirmed
                                to ensure that stale values are not written.  As a distributed cache-based system
                                optimized for performance, <keyword keyref="product_name"/> in its default configuration
                                does not enforce read isolation.
                                <keyword keyref="product_name"/> transactions support repeatable read isolation, so
				once the committed value is read for a given key, it always returns that same value.
				If a transaction write, such as put or invalidate, deletes a value for a key that
				has already been read, subsequent reads return the transactional reference.</p>
			<p>In the default configuration, <keyword keyref="product_name"/> isolates transactions at the
                                process thread level, so while a transaction is in progress, its changes are visible
                                only inside the thread that is running the transaction. Threads inside the same process
                                and in other processes cannot see changes until after the commit operation begins. At
                                this point, the changes are visible in the cache - other threads that access the 
				changing data might see only partial results of the transaction leading to a dirty
                                read.</p>
			<p>If an application desires the slower conventional isolation model (such that dirty reads
                                of transitional states are not allowed), read operations must be encapsulated within
                                transactions and setting the
					<codeph>gemfire.detectReadConflicts</codeph> parameter to ‘true’:</p>
			<p dir="ltr"><codeph>-Dgemfire.detectReadConflicts=true</codeph></p>
			<p>This parameter causes read operations to succeed only when they read a consistent pre-
                                or post-transactional state. If not, a CommitConflictException is thrown to the
                                calling application.</p>
		</section>
		<section id="section_F092E368724945BCBF8E5DCB36B97EB4">
			<title>Durability</title>
			<p>Relational databases provide durability by using disk storage for recovery and transaction
				logging. As a distributed cache-based system optimized for performance,  <keyword
					keyref="product_name"/> does not support on-disk or in-memory durability for
				transactions. </p>
			<p>Applications can emulate the conventional disk-based durability model by setting the
					<codeph>gemfire.ALLOW_PERSISTENT_TRANSACTIONS</codeph> parameter to ‘true’.</p>
			<p dir="ltr"><codeph>-Dgemfire.ALLOW_PERSISTENT_TRANSACTIONS=true</codeph></p><p>This allows permanent regions to participate in transactions, thus providing disk-based
				durability. See <xref
					href="cache_transactions_by_region_type.xml#concept_omy_341_wk"/> for more
				detail on the use of this parameter.</p>
		</section>
	</conbody>
</concept>
