<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN" "ditabase.dtd">
<dita>
  <topic id="topic_fls_1j1_wk">
    <title>How <keyword keyref="product_name"/> Cache Transactions Work</title>
    <shortdesc>This section provides an explanation of how transactions work on <keyword
        keyref="product_name"/> caches.</shortdesc>
    <body>
      <p>All
        the regions in a <keyword keyref="product_name"/> member cache can participate in a transaction. A Java application can
        operate on the cache using multiple transactions. A transaction is associated with only one
        thread, and a thread can operate on only one transaction at a time. Child threads do not
        inherit existing transactions. </p>
    </body>
  </topic>
  <concept id="concept_hls_1j1_wk">
    <title>Transaction View</title>
    <conbody>
      <p>A transaction is isolated from changes made concurrently to the cache. Each transaction has
        its own private view of the cache, including the entries it has read and the changes it has
        made. The first time the transaction touches an entry in the cache, either to read or write,
        it produces a snapshot of that entry’s state in the transaction’s view. The transaction
        maintains its current view of the entry, which reflects only the changes made within the
        transaction. The transaction remembers the entry’s original state and uses it at commit time
        to discover write conflicts.</p>
      <p>
        <image placement="break" id="image_D21EF847CD1D4B64AD1786033FB44F5C"
          href="../../images/transaction-simple.png"/>
      </p>
    </conbody>
  </concept>
  <concept id="concept_sbj_lj1_wk">
    <title>Committing Transactions</title>
    <conbody>
      <section>
        <p>When a commit succeeds, the changes recorded in the transaction view are merged into the
          cache. If the commit fails or the transaction is rolled back, all of its changes are
          dropped. </p>
        <p>When a transaction is committed, the transaction management system uses a two-phase
          commit protocol: <ol id="ol_5B048F061DA443119DA143C8BC35F128">
            <li id="li_9ECEDCE63B1D455AAC60DD11EA3ED143">Reserves all the entries involved in the
              transaction from changes by any other transactional thread. For distributed regions,
              it reserves the entries in the entire distributed system. For partitioned regions, it
              reserves them on the data store, where the transaction is running. </li>
            <li id="li_DBFCDD54B49E437DAD3038702A0D6B1D">Checks the cache for conflicts on affected
              keys, to make sure all entries are still in the same state they were in when this
              transaction first accessed them. </li>
            <li id="li_1D9D5A66D5E444E580C0F631E12DC63B">If any conflict is detected, the manager
              rolls back the transaction. </li>
            <li id="li_1C0235B8EA3E496FAB0F50C7B73696AF">If no conflict is detected, the manager:
                <ol id="ol_DF79CF2702334561A47930B96BF97D26">
                <li id="li_20E71EE5961C4927A20EF3C8E2873130">Calls the
                    <codeph>TransactionWriter</codeph> in the member where the transaction is
                  running. This allows the system to write through transactional updates to an
                  external data source. </li>
                <li id="li_D8970A50477748C2A043B201C81E4D19">Updates the local cache and distributes
                  the updates to the other members holding the data. Cache listeners are called for
                  these updates, in each cache where the changes are made, the same as for
                  non-transactional operations. </li>
                <li id="li_71D8A5C98A7C4660BAC21DAE16E41239">Calls the
                    <codeph>TransactionListener</codeph>s in the member where the transaction is
                  running. </li>
              </ol>
            </li>
            <li id="li_B432F703921D4380B94245B5E3F4D89C">Releases the transaction reservations on
              the entries. </li>
          </ol>
        </p>
        <p>The manager updates the local cache and distributes the updates to other members in a
          non-atomic way.</p>
          <ul id="ul_5B08C071186546A2812E871BF91C9B4B">
            <li id="li_2033BF5902DC4BBD8821E6F8640CDC5A">If other threads read the keys the
              transaction is modifying, they may see some in their pre-transaction state and some in
              their post-transaction state. </li>
            <li id="li_6D136E1730C54A1BB5FDCBB7CFA71281">If other, non-transactional sources update
              the keys the transaction is modifying, the changes may intermingle with this
              transaction’s changes. The other sources can include distributions from remote
              members, loading activities, and other direct cache modification calls from the same
              member. When this happens, after your commit finishes, the cache state may not be what
              you expected. </li>
          </ul>
        <p>If the transaction fails to complete any of the steps, a CommitConflictException is
          thrown to the calling application. </p>
        <p>Once the members involved in the transaction have been asked to commit, the transaction
          completes even if one of the participating members were to leave the system during the
          commit. The transaction completes successfully so long as all remaining members are in
          agreement. </p>
        <p>Each member participating in the transaction maintains a membership listener on the
          transaction coordinator. If the transaction coordinator goes away after issuing the final
          commit call, the transaction completes in the remaining members. </p>
      </section>
    </conbody>
  </concept>
</dita>
