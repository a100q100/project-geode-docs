<?xml version="1.0"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_5353476380D44CC1A7F586E5AE1CE7E8">
	<title>Partitioned Region Query Restrictions</title>
	<shortdesc><?xm-replace_text Short Description?>
	</shortdesc>
	<conbody>
		<section id="section_16875A7EA07D42C08FB194F4A854360D">
			<title>Query Restrictions in Partitioned Regions</title>
			<p>Partitioned region queries function the same as non-partitioned region queries,
				except for the restrictions listed in this section. Partitioned region queries that
				do not follow these guidelines generate an
					<codeph>UnsupportedOperationException</codeph>. <ul
					id="ul_154C9F68988E40E097F5B2E3B4E8310F">
					<li id="li_5AA92906A73D4887A12A8D0BA74DD535"> Join queries between partitioned
						region and between partitioned regions and replicated regions are supported
						through the function service only. Join queries partitioned regions are not
						supported through the client server API. </li>
					<li id="li_8625CA4AA3DF4047BFAD33A235A876D5">You can run join queries on
						partitioned regions and on partitioned regions and replicated regions only
						if they are co-located. Equi-join queries are supported only on partitioned
						regions that are co-located and where the co-located columns are indicated
						in the WHERE clause of the query. In the case of multi-column partitioning,
						there should also be an AND clause in the WHERE specification. See <xref
							href="../partitioned_regions/colocating_partitioned_region_data.xml#colocating_partitioned_region_data"
							type="concept" format="dita" scope="local"/> for more information on
						partitioned region co-location. </li>
					<li id="li_57505A702BA241A0A23CDB1E6AE260EC">Equi-join queries are allowed
						between partitioned regions and between partitioned regions and local
						replicated regions as long as the local replicated region also exists on all
						partitioned region nodes. To perform a join query on a partitioned region
						and another region (partitioned or not), you need to use the
							<codeph>query.execute</codeph> method and supply it with a function
						execution context. See <xref
							href="../partitioned_regions/join_query_partitioned_regions.xml#concept_B930D276F49541F282A2CFE639F107DD"
							type="concept" format="dita" scope="local"/> for an example. </li>
					<li id="li_8C17B72E3C97422FAB35A7B193BB90E1">The query must be just a SELECT
						expression (as opposed to arbitrary OQL expressions), preceded by zero or
						more IMPORT statements. For example, this query is not allowed because it is
						not just a SELECT expression:
						<codeblock>// NOT VALID for partitioned regions
(SELECT DISTINCT *FROM /prRgn WHERE attribute &gt; 10).size</codeblock>This
						query is allowed:
						<codeblock>// VALID for partitioned regions
SELECT DISTINCT *FROM /prRgn WHERE attribute &gt; 10</codeblock>
					</li>
					<li id="li_B36141968022422D8C73B7BD857FC5F6">The SELECT expression itself can be
						arbitrarily complex, including nested SELECT expressions, as long as only
						one partitioned region is referenced. </li>
					<li id="li_35242F0E03CA48318E70F2D6C35933C9">The partitioned region reference
						can only be in the first FROM clause iterator. Additional FROM clause
						iterators are allowed if they do not reference any regions (such as drilling
						down into the values in the partitioned region). </li>
					<li id="li_144D25549CD14338A8FD503932C0F6B3">The first FROM clause iterator must
						contain only one reference to the partitioned region (the reference can be a
						parameter, such as $1). </li>
					<li id="li_F2BCF972959A4AB987B29C6A1D89921B">The first FROM clause iterator
						cannot contain a subquery, but subqueries are allowed in additional FROM
						clause iterators. </li>
					<li id="li_C68DC029F84C484C8865EC81D1506B1B">You can use ORDER BY on partitioned
						region queries, but the fields that are specified in the ORDER BY clause
						must be part of the projection list. </li>
					<li>If a partition region (or a bucket) being queried has been destroyed, the
						query is reattempted on the new primary for the destroyed bucket (if it
						exists). After certain number of attempts, a QueryException is thrown if all
						buckets (calculated at the startup of the query) cannot be queried.</li>
				</ul>
			</p>
		</section>
	</conbody>
</concept>
