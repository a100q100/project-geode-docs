<?xml version="1.0"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_30B18A6507534993BD55C2C9E0544A97">
  <title>Querying a Partitioned Region on a Single Node</title>
  <shortdesc><?xm-replace_text Short Description?>
  </shortdesc>
  <conbody>
    <p>To direct a query to specific partitioned region node, you can execute the query within a
      function. Use the following steps: <ol id="ol_D2DBE305642F4512812227E77CBC86DC">
        <li id="li_A39119A454604D9DA7BD85162F52D63C"> Implement a function which executes a query
          using RegionFunctionContext.
          <codeblock>/**
 * This function executes a query using its RegionFunctionContext
 * which provides a filter on data which should be queried.
 *
 */
public class MyFunction extends FunctionAdapter {

    private final String id;

    @Override
    public void execute(FunctionContext context) {

      Cache cache = CacheFactory.getAnyInstance();
      QueryService queryService = cache.getQueryService();

      String qstr = (String) context.getArguments();

      try {
        Query query = queryService.newQuery(qstr);

        //If function is executed on region, context is RegionFunctionContext
        RegionFunctionContext rContext = (RegionFunctionContext)context;

        SelectResults results = (SelectResults) query.execute(rContext)

        //Send the results to function caller node.
        context.getResultSender().sendResult((ArrayList) (results).asList());
        context.getResultSender().lastResult(null);

      } catch (Exception e) {
        throw new FunctionException(e);
      }
    }

    @Override
    public boolean hasResult() {
      return true;
    }

    @Override
    public boolean isHA() {
      return false;
    }


    public MyFunction(String id) {
      super();
      this.id = id;
    }

    @Override
    public String getId() {
      return this.id;
    }
  }
</codeblock>
        </li>
        <li id="li_69C5F78AFA8F4B4A88ADC04542EE3AE5">Decide on the data you want to query. Based on
          this decision, you can use <codeph>PartitionResolver</codeph> to configure the
          organization of buckets to be queried in the Partitioned Region. <p> For example, let's
            say that you have defined the PortfolioKey class:
            <codeblock>public class PortfolioKey implements DataSerializable {
  private int id;
  private long startValidTime;
  private long endValidTime
  private long writtenTime
  
  public int getId() {
    return this.id;
  }
...
}
</codeblock>
          </p>
          <p> You could use the <codeph>MyPartitionResolver</codeph> to store all keys with the same
            ID in the same bucket. This <codeph>PartitionResolver</codeph> has to be configured at
            the time of Partition Region creation either declaratively using xml OR using APIs. See
              <xref
              href="../partitioned_regions/managing_partitioned_regions.xml#configure_partitioned_regions"
              type="concept" format="dita" scope="local"
              ><?xm-replace_text Configuring Partitioned Regions?></xref> for more information.
            <codeblock>
/** This resolver returns the value of the ID field in the key. With this resolver, 
 * all Portfolios using the same ID are colocated in the same bucket.
 */
public class MyPartitionResolver implements PartitionResolver, Declarable {

   public Serializable getRoutingObject(EntryOperation operation) {
   return operation.getKey().getId();
}
</codeblock>
          </p>
        </li>
        <li id="li_B0772715B4364ECDB115715BBCBF8030"> Execute the function on a client or any other
          node by setting the filter in the function call.
          <codeblock>/**
 * Execute MyFunction for query on specified keys.
 *
 */
public class TestFunctionQuery {

  public static void main(String[] args) {

    ResultCollector rcollector = null;
    PortfolioKey portfolioKey1 = ...;

    //Filter data based on portfolioKey1 which is the key used in 
    //region.put(portfolioKey1, portfolio1);
    Set filter = Collections.singleton(portfolioKey1);

    //Query to get all positions for portfolio ID = 1
    String qStr = "SELECT positions FROM /myPartitionRegion WHERE ID = 1";

    try {
      Function func = new MyFunction("testFunction");

      Region region = CacheFactory.getAnyInstance().getRegion("myPartitionRegion");

      //Function will be routed to one node containing the bucket
      //for ID=1 and query will execute on that bucket.
      rcollector = FunctionService
          .onRegion(region)
          .withArgs(qStr)
          .withFilter(filter)
          .execute(func);

      Object result = rcollector.getResult();

      //Results from one or multiple nodes.
      ArrayList resultList = (ArrayList)result;

      List queryResults = new ArrayList();

      if (resultList.size()!=0) {
        for (Object obj: resultList) {
          if (obj != null) {
            queryResults.addAll((ArrayList)obj);
          }
        }
      }
      printResults(queryResults);

    } catch (FunctionException ex) {
        getLogger().info(ex);
    }
  }
}
</codeblock>
        </li>
      </ol>
    </p>
  </conbody>
</concept>
