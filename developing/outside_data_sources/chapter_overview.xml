<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="outside_data_sources">
	<title>Overview of Outside Data Sources</title>
	<shortdesc id="shortdesc_24FAD83D48F042C680E516ABA03BD87E"><keyword keyref="product_name_long"/>
		has application plug-ins to read data into the cache and write it out. </shortdesc>
	<conbody>
		<section id="section_100B707BB812430E8D9CFDE3BE4698D1">
			<p>The application plug-ins: <ol id="ol_CCACA6992ABF469D81B2A5B7C22A9D8B">
					<li id="li_FEE9CCD00C374C198CABF15F11CCDFB4">Load data on cache misses using an
						implementation of a <codeph>com.gemstone.gemfire.cache.CacheLoader</codeph>.
						The <codeph>CacheLoader.load</codeph> method is called when the
							<codeph>get</codeph> operation can't find the value in the cache. The
						value returned from the loader is put into the cache and returned to the
							<codeph>get</codeph> operation. You might use this in conjunction with
						data expiration to get rid of old data, and your other data loading
						applications, which might be prompted by events in the outside data source.
						See <xref
							href="../expiration/configuring_data_expiration.xml"
							type="concept" format="dita" scope="local"/>. </li>
					<li id="li_C124F8E9A7EA412E9BB5AE75A9E4560D">Write data out to the data source
						using the cache event handlers, <codeph>CacheWriter</codeph> and
							<codeph>CacheListener</codeph>. For implementation details, see <xref
							href="../events/implementing_cache_event_handlers.xml"
							type="concept" format="dita" scope="local"/>. <ul
							id="ul_4F5FC24118874954840B98B91344925C">
							<li id="li_00B73B07E09D475F98C806D32D6BC353"
									><codeph>CacheWriter</codeph> is run synchronously. Before
								performing any operation on a region entry, if any cache writers are
								defined for the region in the distributed system, the system invokes
								the most convenient writer. In partitioned and distributed regions,
								cache writers are usually defined in only a subset of the caches
								holding the region - often in only one cache. The cache writer can
								abort the region entry operation. </li>
							<li id="li_51055A8DED414A8393485ACE5AF8152D"><codeph>CacheListener</codeph> is run
								synchronously after the cache is updated. This listener works only
								on local cache events, so install your listener in every cache where
								you want it to handle events. You can install multiple cache
								listeners in any of your caches. </li>
						</ul>
					</li>
				</ol>
			</p>
			<p>In addition to using application plug-ins, you can also configure external JNDI
				database sources in your cache.xml and use these data sources in transactions. See
					<xref
					href="../transactions/configuring_db_connections_using_JNDI.xml#topic_A5E3A67C808D48C08E1F0DC167C5C494"
					type="topic" format="dita" scope="local"/> for more information. </p>
		</section>
	</conbody>
</concept>
