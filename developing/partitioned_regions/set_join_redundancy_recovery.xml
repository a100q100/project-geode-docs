<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="set_join_redundancy_recovery">
	<title>Configure Member Join Redundancy Recovery for a Partitioned Region</title>
	<shortdesc id="shortdesc_F066E067A9344A3D9C12B412271748FD">Configure whether and how redundancy
		is recovered in a partition region after a member joins. </shortdesc>
	<conbody>
		<section id="section_D6FB0D69CC454B53B9CF1E656A44465C">
			<p>Use the partition attribute <codeph>startup-recovery-delay</codeph> to specify member
				join redundancy recovery. </p>
				<table frame="all" id="table_145C870E2E794E41B0F9030DDEB10FBB">
					<tgroup cols="2" align="left">
						<colspec colname="topic_link" colnum="1" colsep="1" rowsep="1"/>
						<colspec colname="topic_link" colnum="2"/>
						<thead>
							<row>
								<entry>startup-recovery-delay partition attribute </entry>
								<entry>Effect following a member join </entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>-1 </entry>
								<entry>No automatic recovery of redundancy after a new member comes
									online. If you use this and the default
										<codeph>recovery-delay</codeph> setting, you can only
									recover redundancy by kicking off rebalancing through a
									cacheserver or API call. </entry>
							</row>
							<row>
								<entry>long greater than or equal to <b>0</b>
								</entry>
								<entry>Number of milliseconds to wait after a member joins before
									before recovering redundancy. The default is 0 (zero), which
									causes immediate redundancy recovery whenever a new partitioned
									region host joins. </entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			<p>Setting this to a value higher than the default of 0 allows multiple new members to
				join before redundancy recovery kicks in. With the multiple members present during
				recovery, the system will spread redundancy recovery among them. With no delay, if
				multiple members are started in close succession, the system may choose only the
				first member started for most or all of the redundancy recovery. </p>
			<note>Satisfying redundancy is not the same as adding capacity. If redundancy is
				satisfied, new members do not take buckets until you invoke a rebalance. </note>
			<note>With parallel recovery introduced in version 8.2, redundancy may be recovered more
				quickly than in previous versions . For this reason, it is even more important to
				configure <codeph>startup-recovery-delay</codeph> to an appropriate value if you
				intend to restart multiple members at once. Set
					<codeph>startup-recovery-delay</codeph> to a value that ensures all members are
				up and available <i>before</i> redundancy recovery kicks in.</note>
			<p>Set join redundancy recovery using one of the following: </p>
				<ul
					id="ul_99946990FBF64302AC438A99274235E2">
					<li id="li_402B014E5B3D4D0A8480CBB97BB18466">XML:
						<codeblock otherprops="" outputclass="language-xml">// Wait 5 seconds after a new member joins before  
// recovering redundancy
&lt;region name="PR1"&gt; 
  &lt;region-attributes refid="PARTITION"&gt; 
    &lt;partition-attributes startup-recovery-delay="5000"/&gt; 
  &lt;/region-attributes&gt; 
&lt;/region&gt; </codeblock>
					</li>
					<li id="li_CDE2CFD0B2304F96B2990D5FFDED4C16">Java:
						<codeblock outputclass="language-java">PartitionAttributes pa = new PartitionAttributesFactory().setStartupRecoveryDelay(5000).create(); </codeblock>
					</li>
					<li>gfsh:<codeblock outputclass="language-bourne">gfsh>create region --name="PR1" --type=PARTITION --startup-recovery-delay=5000</codeblock></li>
				</ul>
		</section>
	</conbody>
</concept>
