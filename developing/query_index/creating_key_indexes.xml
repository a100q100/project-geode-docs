<?xml version="1.0"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_09E29507AF0D42CF81D261B030D0B7C8">
	<title>Creating Key Indexes</title>
	<shortdesc><?xm-replace_text Short Description?> Creating a key index is a good way to improve
		query performance when data is partitioned using a key or a field value. You can create key
		indexes by using the <codeph>createKeyIndex</codeph> method of the QueryService or by
		defining the index in <codeph>cache.xml</codeph>. Creating a key index makes the query
		service aware of the relationship between the values in the region and the keys in the
		region. </shortdesc>
	<conbody>
		<p>The FROM clause for a primary key index must be just a region path. The indexed
			expression is an expression that, when applied to an entry value, produces the key. For
			example, if a region has Portfolios as the values and the keys are the id field of the
			Portfolios region, the indexed expression is id. </p>
		<p>You can then use the FunctionService (using the partitioned key as a filter passed to the
			function and as part of the query equality condition) to execute the query against the
			indexed data. See <xref
				href="../query_additional/partitioned_region_key_or_field_value.xml#concept_3010014DFBC9479783B2B45982014454"
				type="concept" format="dita" scope="local"/> for more details. </p>
		<p> There are two issues to note with key indexes: <ul
				id="ul_939B0E4351954EF8B3426D7EFC7C8F63">
				<li id="li_3DE1D618385945B0B400AB67FE37C66C"> The key index is not sorted. Without
					sorting, you can only do equality tests. Other comparisons are not possible. To
					obtain a sorted index on your primary keys, create a functional index on the
					attribute used as the primary key. </li>
				<li id="li_3B1D3D27BE7B43069E789CAF661E1D0F">The query service is not automatically
					aware of the relationship between the region values and keys. For this, you must
					create the key index. </li>
			</ul>
		</p>
		<p>
			<note>Using a key-index with an explicit type='range' in the cache.xml will lead to an
				exception. Key indexes will not be used in 'range' queries. </note>
		</p>
		<section id="section_8F1B7893F6D44D9CB36679222927031C">
			<title>Examples of Creating a Key Index</title>
			<p>
				<b>Using Java API:</b>
				<codeblock>QueryService qs = cache.getQueryService();
 qs.createKeyIndex("myKeyIndex", "id", "/exampleRegion");
 </codeblock>
			</p>
			<p>
				<b>Using gfsh:</b>
				<codeblock>
gfsh&gt; create index --name=myKeyIndex --expression=id --region=/exampleRegion
</codeblock>
			</p>
			<p>
				<b>Using cache.xml:</b>
				<codeblock>&lt;region name=exampleRegion&gt;
 &lt;region-attributes . . . &gt;
 &lt;/region-attributes&gt;
 &lt;index name="myKeyIndex" from-clause="/exampleRegion" expression="id" key-index="true"/&gt;
 ...
&lt;/region&gt;
</codeblock>
				<note>If you do not specify the type of index when defining indexes using cache.xml,
					the type defaults to "range". </note>
			</p>
		</section>
	</conbody>
</concept>
