<?xml version="1.0"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_98ED3F38919A490B9AE2553568455C35">
	<title>Maintaining Indexes (Synchronously or Asynchronously) and Index Storage</title>
	<shortdesc><?xm-replace_text Short Description?> Indexes are automatically kept current with the
		region data they reference. The region attribute
			<codeph>IndexMaintenanceSynchronous</codeph> specifies whether the region indexes are
		updated synchronously when a region is modified or asynchronously in a background
		thread.</shortdesc>
	<prolog>
		<metadata>
			<keywords>
				<keyword>gemfire index maintenance</keyword>
				<keyword>gemfire asynchronous index</keyword>
				<keyword>gemfire synchronous index</keyword>
				<keyword>gemfire index update</keyword>
			</keywords>
		</metadata>
	</prolog>
	<conbody>
		<section id="section_FF1945F2AAFA4B158067CEE967410616">
			<title>Index Maintenance Behavior</title>
			<p>Asynchronous index maintenance batches up multiple updates to the same region key.
				The default mode is synchronous, since this provides the greatest consistency with
				region data. </p>
			<p>See <xref format="html" scope="external"
					href="/docs-gemfire/latest/javadocs/japi/com/gemstone/gemfire/cache/RegionFactory.html"
					>RegionFactory.setIndexMaintenanceSynchronous</xref>. </p>
			<p>This declarative index creation sets the maintenance mode to asynchronous:
				<codeblock>&lt;region-attributes index-update-type="asynchronous"&gt; 
&lt;/region-attributes&gt;</codeblock>
			</p>
		</section>
		<section id="section_68308B5597CF4A9EAA8EC0BD83A233E6">
			<title>Internal Index Structure and Storage</title>
			<p>Indexes are stored either as compact or non-compact data structures based on the
				indexed expression (even if the index key type is the same.) For example, consider
				the following Passenger object:
				<codeblock>Passenger {
   String name,
   Date travelDate,
   int age,
   Flight flt,
}
Flight {
   int flightId,
   String origin,
   String dest,
}</codeblock>An
				index on the Passenger name field will have different memory space requirements in
				the cache than the Flight origin field even though they are both String field types.
				The internal data structure selected by <keyword keyref="product_name"/> for index
				storage will depend on the field's level in the object. In this example, name is a
				top-level field and an index on name can be stored as a compact index. Since origin
				is a second-level field, any index that uses origin as the indexed expression will
				be stored as a non-compact index. </p>
			<p>
				<b>Compact Index</b>
			</p>
			<p>A compact index has simple data structures to minimize its footprint, at the expense
				of doing extra work at index maintenance. This index does not support the storage of
				projection attributes. </p>
			<p>Currently compact indexes are only selected only supports the creation of an index on
				a region path. In addition, the following conditions must be met: <ul
					id="ul_37D123AACC734AF8A678AD8FD75F4350">
					<li id="li_9082C2BCE3384DFB9122DC0D660D0048"> Index maintenance is synchronous. </li>
					<li id="li_0046B67E7D364542BB9BD0BAA1B7D152"> The indexed expression is a path
						expression. </li>
					<li id="li_8B1D2E0984D44DB2ADC0F67415E41851"> The FROM clause has only one
						iterator. This implies that there is only one value in the index for each
						region entry and it is directly on the region values (not supported with
						keys, entries). </li>
				</ul>
			</p>
			<p>
				<b>Non-Compact Index</b>
			</p>
			<p> Used whenever a compact index cannot be used. </p>
		</section>
	</conbody>
</concept>
