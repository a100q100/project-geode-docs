<?xml version="1.0"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_0210701C193A470E8C572111F6CEC3FC">
	<title>Using Indexes on Single Region Queries</title>
	<shortdesc><?xm-replace_text Short Description?> Queries with one comparison operation may be
		improved with either a key or range index, depending on whether the attribute being compared
		is also the primary key. </shortdesc>
	<conbody>
		<section id="section_751427643EC3480BABCE9CA44E831E27">
			<p>If pkid is the key in the /exampleRegion region, creating a key index on pkid is the
				best choice as a key index does not have maintenance overhead. If pkid is not the
				key, a range index on pkid should improve performance.
				<codeblock>SELECT DISTINCT * FROM /exampleRegion portfolio WHERE portfolio.pkid = '123'</codeblock></p>
			<p>With multiple comparison operations, you can create a range index on one or more of
				the attributes. Try the following: <ol id="ol_9627F6320DCF4CF8AD1077DBCC44A9CE">
					<li id="li_0873B1F1410C4764B9BB852449C213E5"> Create a single index on the
						condition you expect to have the smallest result set size. Check performance
						with this index. </li>
					<li id="li_C35B3559799A4BBBBACB96BBEF89DE06"> Keeping the first index, add an
						index on a second condition. Adding the second index may degrade
						performance. If it does, remove it and keep only the first index. The order
						of the two comparisons in the query can also impact performance. Generally
						speaking, in OQL queries, as in SQL queries, you should order your
						comparisons so the earlier ones give you the fewest results on which to run
						subsequent comparisons. </li>
				</ol>
			</p>
			<p>For this query, you would try a range index on name, age, or on both:
				<codeblock>SELECT DISTINCT * FROM /exampleRegion portfolio WHERE portfolio.status = 'active' and portfolio.ID &gt; 45</codeblock>
			</p>
			<p> For queries with nested levels, you may get better performance by drilling into the
				lower levels in the index as well as in the query. </p>
			<p>This query drills down one level:
				<codeblock>SELECT DISTINCT * FROM /exampleRegion portfolio, portfolio.positions.values positions where positions.secId = 'AOL' and positions.MktValue &gt; 1</codeblock>
			</p>
		</section>
	</conbody>
</concept>
