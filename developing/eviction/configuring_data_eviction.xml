<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="configuring_data_eviction">
	<title>Configure Data Eviction</title>
	<shortdesc>Use eviction controllers to configure the eviction-attributes region attribute
		settings to keep your region within a specified limit. </shortdesc>
	<conbody>
		<section id="section_8515EC9635C342C0916EE9E6120E2AC9">
			<p>Eviction controllers monitor region and memory use and, when the limit is reached,
				remove older entries to make way for new data. For heap percentage, the controller
				used is the <keyword keyref="product_name"/> resource manager, configured in conjunction with the JVM's
				garbage collector for optimum performance. </p>
			<p>Configure data eviction as follows. You do not need to perform these steps in the
				sequence shown. <ol id="ol_A9A5C01DAA124CA692216FF7FBFCCA0D">
					<li id="li_4E6B7B372993493F99586888AB673E40">Decide whether to evict based on:
							<ul id="ul_17CCFB6473114D9BBDE6A1AF02C32E1D">
							<li id="li_9280A9EFD65C4E0CBEF68207FB4F1CE3">Entry count (useful if your
								entry sizes are relatively uniform). </li>
							<li id="li_C053A81AEDC9455EB5573B95DA4BF330">Total bytes used. In
								partitioned regions, this is set using
									<codeph>local-max-memory</codeph>. In non-partitioned, it is set
								in <codeph>eviction-attributes</codeph>. </li>
							<li id="li_31743CA6992E47C1A0D14C4383949425">Percentage of application
								heap used. This uses the <keyword keyref="product_name"/> resource manager. When the manager
								determines that eviction is required, the manager orders the
								eviction controller to start evicting from all regions where the
								eviction algorithm is set to <codeph>lru-heap-percentage</codeph>.
								Eviction continues until the manager calls a halt. <keyword keyref="product_name"/> evicts
								the least recently used entry hosted by the member for the region.
								See <xref
									href="../../managing/heap_use/heap_management.xml#resource_manager"
									type="concept" format="dita" scope="local"/>. </li>
						</ul>
					</li>
					<li id="li_F3C2933DCC654B17811FB0CFB786BE50">Decide what action to take when the
						limit is reached: <ul id="ul_8611f943-5a34-4e77-9231-a1b02e26e00d">
							<li id="li_CEA3645771A14665B8F655386D4DA9BF">Locally destroy the entry. </li>
							<li id="li_B6662FD5B3E046A282FB13F8E6F3DA8F">Overflow the entry data to
								disk. See <xref
									href="../storing_data_on_disk/chapter_overview.xml"
									type="concept" format="dita" scope="local"/>. </li>
						</ul>
					</li>
					<li id="li_BDC0285A440C49559B2E70E0B545E5EA">Decide the maximum amount of data
						to allow in the member for the eviction measurement indicated. This is the
						maximum for all storage for the region in the member. For partitioned
						regions, this is the total for all buckets stored in the member for the
						region - including any secondary buckets used for redundancy. </li>
					<li id="li_92EB07594A9D4D57B80C7C326226E5E4">Decide whether to program a custom
						sizer for your region. If you are able to provide such a class, it might be
						faster than the standard sizing done by <keyword keyref="product_name"/>. Your custom class must
						follow the guidelines for defining custom classes and, additionally, must
						implement <codeph>com.gemstone.gemfire.cache.util.ObjectSizer</codeph>. See
							<xref
							href="../../basic_config/data_entries_custom_classes/using_custom_classes.xml"
							type="concept" format="dita" scope="local"/>. </li>
				</ol>
			</p>
			<note>You can also configure Regions using the gfsh command-line interface, however, you
				cannot configure <codeph>eviction-attributes</codeph> using gfsh. See <xref
					href="../../tools_modules/gfsh/quick_ref_commands_by_area.xml#topic_EF03119A40EE492984F3B6248596E1DD"
				/> and <xref
					href="../../tools_modules/gfsh/quick_ref_commands_by_area.xml#topic_1ACC91B493EE446E89EC7DBFBBAE00EA"
				/>.</note>
			<p>Examples: </p>
			<codeblock outputclass="language-xml">// Create an LRU memory eviction controller with max bytes of 1000 MB
// Use a custom class for measuring the size of each object in the region 
&lt;region-attributes refid="REPLICATE"&gt; 
  &lt;eviction-attributes&gt; 
    &lt;lru-memory-size maximum="1000" action="overflow-to-disk"&gt; 
      &lt;class-name&gt;com.myLib.MySizer&lt;/class-name&gt; 
      &lt;parameter name="name"&gt; 
        &lt;string&gt;Super Sizer&lt;/string&gt; 
      &lt;/parameter&gt; 
    &lt;/lru-memory-size&gt; 
  &lt;/eviction-attributes&gt; 
  &lt;/region-attributes&gt;</codeblock>
			<codeblock outputclass="language-xml">// Create a memory eviction controller on a partitioned region with max bytes of 512 MB
&lt;region name="demoPR"&gt;
  &lt;region-attributes refid="PARTITION"&gt;
    &lt;partition-attributes local-max-memory="512" total-num-buckets="13"/&gt;
    &lt;eviction-attributes&gt;
       &lt;lru-memory-size action="local-destroy"/&gt;
       &lt;class-name&gt;com.gemstone.gemfire.cache.util.ObjectSizer
       &lt;/class-name&gt;
    &lt;/eviction-attributes&gt;
  &lt;/region-attributes&gt;
&lt;/region&gt;
            </codeblock>
			<codeblock outputclass="">// Configure a partitioned region for heap LRU eviction. The resource manager controls the limits. 
&lt;region-attributes refid="PARTITION_HEAP_LRU"&gt; 
&lt;/region-attributes&gt;</codeblock>
			<codeblock outputclass="language-xml">
Region currRegion = cache.createRegionFactory()
	.setEvictionAttributes(EvictionAttributes.createLRUHeapAttributes(EvictionAction.LOCAL_DESTROY))
	.create("root");
</codeblock>
		</section>
	</conbody>
</concept>
