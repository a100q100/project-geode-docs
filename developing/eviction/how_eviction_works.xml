<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="how_eviction_works">
	<title>How Eviction Works</title>
	<shortdesc>Eviction settings cause <keyword keyref="product_name_long"/> to work to keep a region's resource use under
		a specified level by removing least recently used (LRU) entries to make way for new entries. </shortdesc>
	<conbody>
		<section id="section_C3409270DD794822B15E819E2276B21A">
			<p>You configure for eviction based on entry count, percentage of available heap, and
				absolute memory usage. You also configure what to do when you need to evict: destroy
				entries or overflow them to disk. See <xref
					href="../storing_data_on_disk/chapter_overview.xml"
					type="concept" format="dita" scope="local"/>. </p>
			<p>When <keyword keyref="product_name"/> determines that adding or updating an entry would take the region over
				the specified level, it overflows or removes enough older entries to make room. For
				entry count eviction, this means a one-to-one trade of an older entry for the newer
				one. For the memory settings, the number of older entries that need to be removed to
				make space depends entirely on the relative sizes of the older and newer entries.
			</p>
		</section>
		<section id="section_69E2AA453EDE4E088D1C3332C071AFE1">
			<title>Eviction in Partitioned Regions</title>
			<p>In partitioned regions, <keyword keyref="product_name"/> removes the oldest entry it can find <i>in the bucket
				where the new entry operation is being performed</i>. <keyword keyref="product_name"/> maintains LRU
				entry information on a bucket-by-bucket bases, as the cost of maintaining
				information across the partitioned region would be too great a performance hit. </p>
				<ul
					id="ul_AF0508C9381C42718B36AAB393CD0633">
					<li id="li_67F2CD9145CD4DDA8E4FF55C820F0FD2">For memory and entry count
						eviction, LRU eviction is done in the bucket where the new entry operation
						is being performed until the overall size of the combined buckets in the
						member has dropped enough to perform the operation without going over the
						limit. </li>
					<li id="li_1A27753DADF1471FAACDFAE57F3A0A9C">For heap eviction, each partitioned
						region bucket is treated as if it were a separate region, with each eviction
						action only considering the LRU for the bucket, and not the partitioned
						region as a whole. </li>
				</ul>
			<p>Because of this, eviction in partitioned regions may leave older entries for the
				region in other buckets in the local data store as well as in other stores in the
				distributed system. It may also leave entries in a primary copy that it evicts from
				a secondary copy or vice-versa. </p>
		</section>
	</conbody>
</concept>
