<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="cache_event_handler_examples">
  <title>Cache Event Handler Examples</title>
  <shortdesc>Some examples of cache event handlers. </shortdesc>
  <conbody>
    <section id="section_F2790678E9DE4A81B73A4B6346CB210B">
      <title>Declaring and Loading an Event Handler with Parameters</title>
      <p>This declares an event handler for a region in the <codeph>cache.xml</codeph>. The handler
        is a cache listener designed to communicate changes to a DB2 database. The declaration
        includes the listener’s parameters, which are the database path, username, and password.</p>
        <codeblock>&lt;region name="exampleRegion"&gt; 
  &lt;region-attributes&gt; 
  . . . 
    &lt;cache-listener&gt; 
      &lt;class-name&gt;JDBCListener&lt;/class-name&gt; 
      &lt;parameter name="url"&gt; 
        &lt;string&gt;jdbc:db2:SAMPLE&lt;/string&gt; 
      &lt;/parameter&gt; 
      &lt;parameter name="username"&gt; 
        &lt;string&gt;gfeadmin&lt;/string&gt; 
      &lt;/parameter&gt; 
      &lt;parameter name="password"&gt; 
        &lt;string&gt;admin1&lt;/string&gt; 
      &lt;/parameter&gt; 
    &lt;/cache-listener&gt; 
  &lt;/region-attributes&gt; 
  &lt;/region&gt;</codeblock>
      <p>This code listing shows part of the implementation of the <codeph>JDBCListener</codeph>
        declared in the <codeph>cache.xml</codeph>. This listener implements the
          <codeph>Declarable</codeph> interface. When an entry is created in the cache, this
        listener’s <codeph>afterCreate</codeph> callback method is triggered to update the database.
        Here the listener’s properties, provided in the <codeph>cache.xml</codeph>, are passed into
        the <codeph>Declarable.init</codeph> method and used to create a database connection.</p>
        <codeblock>. . .
public class JDBCListener
extends CacheListenerAdapter
implements Declarable {
  public void afterCreate(EntryEvent e) {
  . . .
    // Initialize the database driver and connection using input parameters
    Driver driver = (Driver) Class.forName(DRIVER_NAME).newInstance();
    Connection connection =
      DriverManager.getConnection(_url, _username, _password);
      System.out.println(_connection);
        . . .
  }
    . . .
  public void init(Properties props) {
    this._url = props.getProperty("url");
    this._username = props.getProperty("username");
    this._password = props.getProperty("password");
  }
}</codeblock>
    </section>
    <section id="section_2B4275C1AE744794AAD22530E5ECA8CC">
      <title>Installing an Event Handler Through the API </title>
      <p>This listing defines a cache listener using the <codeph>RegionFactory</codeph> 
        method <codeph>addCacheListener</codeph>.</p>
        <codeblock>Region newReg = cache.createRegionFactory()
          .addCacheListener(new SimpleCacheListener())
          .create(name);
 </codeblock>
      <p>You can create a cache writer similarly, using the <codeph>RegionFactory</codeph>
        method <codeph>setCacheWriter</codeph>, like this:</p>
        <codeblock>Region newReg = cache.createRegionFactory()
          .setCacheWriter(new SimpleCacheWriter())
          .create(name);
 </codeblock>
    </section>
    <section id="section_C62E9535C43B4BC5A7AA7B8B4125D1EB">
      <title>Installing Multiple Listeners on a Region</title>
      <p>XML:</p>
        <codeblock>&lt;region name="exampleRegion"&gt;
  &lt;region-attributes&gt;
    . . .
    &lt;cache-listener&gt;
      &lt;class-name&gt;myCacheListener1&lt;/class-name&gt;
    &lt;/cache-listener&gt;
    &lt;cache-listener&gt;
      &lt;class-name&gt;myCacheListener2&lt;/class-name&gt;
    &lt;/cache-listener&gt;
    &lt;cache-listener&gt;
      &lt;class-name&gt;myCacheListener3&lt;/class-name&gt;
    &lt;/cache-listener&gt;
  &lt;/region-attributes&gt;
&lt;/region&gt;</codeblock>
      <p>API:</p>
        <codeblock>
CacheListener listener1 = new myCacheListener1(); 
CacheListener listener2 = new myCacheListener2(); 
CacheListener listener3 = new myCacheListener3(); 

Region nr = cache.createRegionFactory()
  .initCacheListeners(new CacheListener[]
    {listener1, listener2, listener3})
  .setScope(Scope.DISTRIBUTED_NO_ACK)
  .create(name);
</codeblock>
    </section>
    <section id="section_3AF3D7C9927F491F8BACDB72834E42AA">
      <title>Installing a Write-Behind Cache Listener</title>
        <codeblock>//AsyncEventQueue with listener that performs WBCL work
&lt;cache&gt;
   &lt;async-event-queue id="sampleQueue" persistent="true"
    disk-store-name="exampleStore" parallel="false"&gt;
      &lt;async-event-listener&gt;
         &lt;class-name&gt;MyAsyncListener&lt;/class-name&gt;
         &lt;parameter name="url"&gt; 
           &lt;string&gt;jdbc:db2:SAMPLE&lt;/string&gt; 
         &lt;/parameter&gt; 
         &lt;parameter name="username"&gt; 
           &lt;string&gt;gfeadmin&lt;/string&gt; 
         &lt;/parameter&gt; 
         &lt;parameter name="password"&gt; 
           &lt;string&gt;admin1&lt;/string&gt; 
         &lt;/parameter&gt; 
			   &lt;/async-event-listener&gt;
			 &lt;/async-event-queue&gt;

// Add the AsyncEventQueue to region(s) that use the WBCL
  &lt;region name="data"&gt;
	   &lt;region-attributes async-event-queue-ids="sampleQueue"&gt;
    &lt;/region-attributes&gt;
  &lt;/region&gt;
&lt;/cache&gt;

</codeblock>
    </section>
  </conbody>
</concept>
