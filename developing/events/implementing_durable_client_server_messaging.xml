<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="implementing_durable_client_server_messaging">
	<title>Implementing Durable Client/Server Messaging</title>
	<conbody>
		<section id="section_7A0D0B7D1F2748C7BA7479E0FD5C6BFA">
			<p>Use durable messaging for subscriptions that you need maintained for your clients
				even when your clients are down or disconnected. You can configure any of your event
				subscriptions as durable. Events for durable queries and subscriptions are saved in
				queue when the client is disconnected and played back when the client reconnects.
				Other queries and subscriptions are removed from the queue. </p>
			<p>Use durable messaging for client/server installations that use event subscriptions. </p>
			<p>These are the high-level tasks described in this topic: </p>
			<ol id="ol_235DF52AA06048D5B5BCDC4B6336354E">
				<li id="li_7C0C43A2ACA04F34B5944A6A1B315E41">Configure your client as durable </li>
				<li id="li_96EB4A387ED54C7BA71C2D7432635CBD">Decide which subscriptions should be
					durable and configure accordingly </li>
				<li id="li_5AAA411BFBA5461680FD59DBFE7B0ED9">Program your client to manage durable
					messaging for disconnect, reconnect, and event handling </li>
			</ol>
		</section>
		<section id="section_643EB5FA6F09463C80646786394F1E02">
			<title>Configure the Client as Durable</title>
			<p>Use one of the following methods: </p>
				<ul id="ul_A54F40A08DC04DC2924CD312F54B77FD">
					<li id="li_7BDFF0632DE9452C93881FA4C0EAF569"><codeph>gemfire.properties</codeph>
						file:
						<codeblock>durable-client-id=31 
durable-client-timeout=200 </codeblock>
					</li>
					<li id="li_7418B8B60AE44F8E976BB44928005DCD">Java:
						<codeblock>Properties props = new Properties(); 
props.setProperty("durable-client-id", "31"); 
props.setProperty("durable-client-timeout", "" + 200); 
CacheFactory cf = new CacheFactory(props);</codeblock>
					</li>
				</ul>
		</section>
		<section id="section_B8E01FE4B5A347EB96085DA3194F6AE8">
			<p>The <codeph>durable-client-id</codeph> indicates that the client is durable and gives
				the server an identifier to correlate the client to its durable messages. For a
				non-durable client, this id is an empty string. The ID can be any number that is
				unique among the clients attached to servers in the same distributed system. </p>
			<p>The <codeph>durable-client-timeout</codeph> tells the server how long to wait for
				client reconnect. When this timeout is reached, the server stops storing to the
				client's message queue and discards any stored messages. The default is 300 seconds.
				This is a tuning parameter. If you change it, take into account the normal activity
				of your application, the average size of your messages, and the level of risk you
				can handle, both in lost messages and in the servers' capacity to store enqueued
				messages. Assuming that no messages are being removed from the queue, how long can
				the server run before the queue reaches the maximum capacity? How many durable
				clients can the server handle? To assist with tuning, use the <keyword
					keyref="product_name"/> message queue statistics for durable clients through the
				disconnect and reconnect cycles. </p>
		</section>
		<section id="section_BB5DCCE0582E4FE8B62DE473512FC704">
			<title>Configure Durable Subscriptions and Continuous Queries</title>
			<p>The register interest and query creation methods all have an optional boolean
				parameter for indicating durability. By default all are non-durable. </p>
				<codeblock>// Durable registration
// Define keySpecification, interestResultPolicy, durability 
exampleRegion.registerInterest(keySpecification, interestResultPolicySpecification, true);
                    
// Durable CQ
// Define cqName, queryString, cqAttributes, durability
CqQuery myCq = queryService.newCq(cqName, queryString, cqAttributes, true);</codeblock>
			<p>Save only critical messages while the client is disconnected by only indicating
				durability for critical subscriptions and CQs. When the client is connected to its
				servers, it receives messages for all keys and queries reqistered. When the client
				is disconnected, non-durable interest registrations and CQs are discontinued but all
				messages already in the queue for them remain there. </p>
				<note>
					<p>For a single durable client ID, you must maintain the same durability of your
					registrations and queries between client runs.
					</p>
				</note>
		</section>
		<section id="section_0FBD23CC79784E588135FE93306EC0A4">
			<title>Program the Client to Manage Durable Messaging</title>
			<p>Program your durable client to be durable-messaging aware when it disconnects,
				reconnects, and handles events from the server. </p>
				<ol
					id="ol_09522205F2E54F39864D1887425AAB75">
					<li id="li_25D30E5C54B44E578C8CF6A925E98EDC">Disconnect with a request to keep your queues
						active by using <codeph>Pool.close</codeph> or
							<codeph>ClientCache.close</codeph> with the boolean
							<codeph>keepalive</codeph> parameter.
							<codeblock>clientCache.close(true);</codeblock>
						 To be retained during client down time, durable continuous queries
						(CQs) must be executing at the time of disconnect. </li>
					<li id="li_E76A7C1D669843438AB092925CF4E226">Program your durable client's
						reconnection to: <ol id="ol_2021825BD7424BBF9073DC72360B6D8F">
							<li>If desired, detect whether the previously registered subscription
								queue is available upon durable client reconnection and the count of
								pending events in the queue. Based on the results, you can then
								decide whether to receive the remaining events or close the cache if
								the number is too large. <p>For example, for a client with only the
									default pool
									created:</p>
								<codeblock>int pendingEvents = cache.getDefaultPool().getPendingEventCount();

if (pendingEvents == -2) { // client connected for the first time  … // continue
} 
else if (pendingEvents == -1) { // client reconnected but after the timeout period  
… // handle possible data loss
} 
else { // pendingEvents >= 0  
… // decide to invoke readyForEvents() or ClientCache::close(false)/pool.destroy()
}</codeblock><p>For
									a client with multiple
									pools:</p>
								<codeblock>int pendingEvents = 0;

int pendingEvents1 = PoolManager.find(“pool1”).getPendingEventCount();

pendingEvents += (pendingEvents1 &gt; 0) ? pendingEvents1 : 0;

int pendingEvents2 = PoolManager.find(“pool2”).getPendingEventCount();

pendingEvents += (pendingEvents2 &gt; 0) ? pendingEvents2 : 0;

// process individual pool counts separately.</codeblock>
								<p>The <codeph>getPendingEventCount</codeph> API can return the
								following possible values:</p><ul id="ul_nvy_xk1_hq">
									<li>A value representing a count of events pending at the
										server. Note that this count is an approximate value based
										on the time the durable client pool connected or reconnected
										to the server. Any number of invocations will return the
										same value.</li>
									<li>A zero value if there are no events pending at server for
										this client pool</li>
									<li>A negative value indicates that no queue is available at the
										server for the client pool. <ul id="ul_lp3_fl1_hq">
											<li>-1 indicates that the client pool has reconnected to
												the server after its durable-client-timeout period
												has elapsed. The pool's subscription queue has been
												removed possibly causing data loss.</li>
											<li>A value of -2 indicates that this client pool has
												connected to server for the first time.</li>
										</ul></li>
								</ul></li>
							<li id="li_52C4414ED67D457093A648DE43E0CDBC">Connect, initialize the client cache, regions,
								and any cache listeners, and create and execute any durable
								continuous queries. </li>
							<li id="li_4071FF39FE9C43FD98C780B982544BB0">Run all interest
								registration calls.
								<note>
									<p>Registering interest with
										<codeph>InterestResultPolicy.KEYS_VALUES</codeph>
									initializes the client cache with the <i>current</i> values of
									specified keys. If concurrency checking is enabled for the
									region, any earlier (older) region events that are replayed to
									the client are ignored and are not sent to configured listeners.
									If your client must process all replayed events for a region,
									register with <codeph>InterestResultPolicy.KEYS</codeph> or
										<codeph>InterestResultPolicy.NONE</codeph> when
									reconnecting. Or, disable concurrency checking for the region in
									the client cache. See <xref
										href="../distributed_regions/region_entry_versions.xml#topic_CF2798D3E12647F182C2CEC4A46E2045"
										type="topic" format="dita" scope="local"/>.
									</p>
								</note>
							</li>
							<li id="li_CA153397A92C4B1284BA5DEE87D5DF94">Call
									<codeph>ClientCache.readyForEvents</codeph> so the server will
								replay stored events. If the ready message is sent earlier, the
								client may lose events. </li>
						</ol>
							<codeblock>ClientCache clientCache = ClientCacheFactory.create(); 
// Here, create regions, listeners that are not defined in the cache.xml . . .
// Here, run all register interest calls before doing anything else
clientCache.readyForEvents(); </codeblock>
					</li>
					<li id="li_9DC06E9766AA4102BE594733D11D9FAD">When you program your durable
						client <codeph>CacheListener</codeph>: <ol
							id="ol_1AAA8604CCA34F1C8A7EFA238FD0C0EF">
							<li id="li_4BCA88805BEB4C89B7DBBCF78BA01B2D">Implement the callback
								methods to behave properly when stored events are replayed. The
								durable client’s <codeph>CacheListener</codeph> must be able to
								handle having events played after the fact. Generally listeners
								receive events very close to when they happen, but the durable
								client may receive events that occurred minutes before and are not
								relevant to current cache state. </li>
							<li id="li_83C29334D8924CA4BBE58771075D4CCD">Consider whether to use the
									<codeph>CacheListener</codeph> callback method,
									<codeph>afterRegionLive</codeph>, which is provided specifically
								for the end of durable event replay. You can use it to perform
								application-specific operations before resuming normal event
								handling. If you do not wish to use this callback, and your listener
								is an instance of <codeph>CacheListener</codeph> (instead of a
									<codeph>CacheListenerAdapter</codeph>) implement
									<codeph>afterRegionLive</codeph> as an empty method. </li>
						</ol>
					</li>
				</ol>
		</section>
		<section>
			<title>Initial Operation</title>
			<p>The initial startup of a durable client is similar to the startup of any other
				client, except that it specifically calls the
					<codeph>ClientCache.readyForEvents</codeph> method when all regions and
				listeners on the client are ready to process messages from the server. </p>
		</section>
		<section id="section_9B9A9EE8C7FF47948C8108A0F7F4E32E">
			<title>Disconnection</title>
			<p>While the client and servers are disconnected, their operation varies depending on
				the circumstances. </p>
				<ul id="ul_F057BABA198E43959EF89CEEF241530C">
					<li id="li_C24BD71533434F02841A8C532EEE7E9B"><b>Normal disconnect</b>. When a
						client closes its connection, the servers stop sending messages to the
						client and release its connection. If the client requests it, the servers
						maintain the queues and durable interest list information until the client
						reconnects or times out. The non-durable interest lists are discarded. The
						servers continue to queue up incoming messages for entries on the durable
						interest list. All messages that were in the queue when the client
						disconnected remain in the queue. If the client requests not to have its
						subscriptions maintained, or if there are no durable subscriptions, the
						servers unregister the client and do the same cleanup as for a non-durable
						client. </li>
					<li id="li_A8D8385F9B3A417ABBDCE6EFB94462C9"><b>Abnormal disconnect</b>. If the
						client crashes or loses its connections to all servers, the servers
						automatically maintain its message queue and durable subscriptions until it
						reconnects or times out. </li>
					<li id="li_C9764122A7F140E38E8F64D895D59ADF"><b>Client disconnected but
							operational</b>. If the client operates while it is disconnected, it
						gets what data it can from the local client cache. Since updates are not
						allowed, the data can become stale. An <codeph>UnconnectedException</codeph>
						occurs if an update is attempted. </li>
					<li id="li_F4481091AFF44D919768EDBCC25BA762"><b>Client stays disconnected past
							timeout period</b>. The servers track how long to keep a durable
						subscription queue alive based on the
							<codeph>durable-client-timeout</codeph> setting. If the client remains
						disconnected longer than the timeout, the servers unregister the client and
						do the same cleanup that is performed for a non-durable client. The servers
						also log an alert. When a timed-out client reconnects, the servers treat it
						as a new client making its initial connection. </li>
				</ul>
		</section>
		<section id="section_E3C42A6FDC884FC38ECC121955C06BDC">
			<title>Reconnection</title>
			<p>During initialization, the client cache is not blocked from doing operations, so you
				might be receiving old stored events from the server at the same time that your
				client cache is being updated by much more current events. These are the things that
				can act on the cache concurrently: </p>
				<ul id="ul_543689C87D3140D4A8FE3CDFD1CE80A5">
					<li id="li_B970DE3946E94801BE3F9EF19254BDC5">Results returned by the server in
						response to the client’s interest registrations. </li>
					<li id="li_05D6ED43B2674B7D9167FE5EB5344E47">Client cache operations by the
						application. </li>
					<li id="li_8D7F1862DD4A4F6C837A129BFE9B2138">Callbacks triggered by replaying
						old events from the queue </li>
				</ul>
			<p><keyword keyref="product_name"/> handles the conflicts between the application and
				interest registrations so they do not create cache update conflicts. But you must
				program your event handlers so they don't conflict with current operations. This is
				true for all event handlers, but it is especially important for those used in
				durable clients. Your handlers may receive events well after the fact and you must
				ensure your programming takes that into account. </p>
			<p>This figure shows the three concurrent procedures during the initialization process.
				The application begins operations immediately on the client (step 1), while the
				client’s cache ready message (also step 1) triggers a series of queue operations on
				the servers (starting with step 2 on the primary server). At the same time, the
				client registers interest (step 2 on the client) and receives a response from the
				server. Message B2 applies to an entry in Region A, so the cache listener handles
				B2’s event. Because B2 comes before the marker, the client does not apply the update
				to the cache. </p>
			<p>
				<image href="../../images/ClientServerAdvancedTopics-6.gif"
					alt="Durable client reconnection. " id="image_068A59FA019E46FA9DE0BC7FA60AAADD"
					placement="break"/>
			</p>
		</section>
		<section id="section_C848DF6D649F4DCAA2B895F5439BAA97">
			<title>Durable Event Replay </title>
			<p>When a durable client reconnects before the timeout period, the servers replay the
				events that were stored while the client was gone and then resume normal event
				messaging to the client. To avoid overwriting current entries with old data, the
				stored events are not applied to the client cache. Stored events are distinguished
				from new normal events by a marker that is sent to the client once all old events
				are replayed. </p>
				<ol id="ol_5AB7763AA8454CBE8CE6F92107C55524">
					<li id="li_62290041A988427581155969A5333610">All servers with a queue for this
						client place a marker in their queue when the client reconnects. </li>
					<li id="li_4D90AB38EF504B9B9D3554BBCF95F2D0">The primary server sends the queued
						messages to the client up to the marker. </li>
					<li id="li_52905A28E0F340DCA2939B354964A925">The client receives the messages
						but does not apply the usual automatic updates to its cache. If cache
						listeners are installed, they handle the events. </li>
					<li id="li_2B4A313A8DF343C4BD01A36B74864A07">The client receives the marker
						message indicating that all past events have been played back. </li>
					<li id="li_3AC4007651D945F38055C815F02B5254">The server sends the current list
						of live regions. </li>
					<li id="li_2FF542CFBDE040C9860BD2114E907DD7">For every
							<codeph>CacheListener</codeph> in each live region on the client, the
						marker event triggers the <codeph>afterRegionLive</codeph> callback. After
						the callback, the client begins normal processing of events from the server
						and applies the updates to its cache. </li>
				</ol>
			<p>Even when a new client starts up for the first time, the client cache ready markers
				are inserted in the queues. If messages start coming into the new queues before the
				servers insert the marker, those messages are considered as having happened while
				the client was disconnected, and their events are replayed the same as in the
				reconnect case. </p>
		</section>
		<section id="section_E519D541E2844292ABD2E0BDF5FB5798">
			<title>Application Operations During Interest Registration </title>
			<p>Application operations take precedence over interest registration responses. The
				client can perform operations while it is receiving its interest registration
				responses. When adding register interest responses to the client cache, the
				following rules are applied: </p>
				<ul id="ul_F07A8DC8746F4A19B3BF8CA30B0770C7">
					<li id="li_7E2A957E7CC64BE188C2B59F9CF859D8">If the entry already exists in the
						cache with a valid value, it is not updated. </li>
					<li id="li_B8B5818EF6BC4EE6B3D1BBBE33B62F16">If the entry is invalid, and the
						register interest response is valid, the valid value is put into the cache. </li>
					<li id="li_9591C39D57A94907B043B1042C63D51D">If an entry is marked destroyed, it
						is not updated. Destroyed entries are removed from the system after the
						register interest response is completed. </li>
					<li id="li_690CD196792144C6B1F887E994A2C314">If the interest response does not
						contain any results, because all of those keys are absent from the server’s
						cache, the client’s cache can start out empty. If the queue contains old
						messages related to those keys, the events are still replayed in the
						client’s cache. </li>
				</ul>
		</section>
	</conbody>
</concept>
