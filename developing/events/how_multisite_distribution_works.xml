<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="how_multisite_distribution_works">
	<title> Multi-Site (WAN) Event Distribution</title>
	<shortdesc id="shortdesc_19157B7FD1114A098288108569ED05D5"><keyword keyref="product_name"/>
		distributes a subset of cache events between distributed systems, with a minimum impact on
		each system's performance. Events are distributed only for regions that you configure to use
		a gateway sender for distribution. </shortdesc>
	<conbody>
		<section id="section_A16562611E094C88B12BC149D5EEEEBA">
			<title>Queuing Events for Distribution</title>
			<p>In regions that are configured with one or more gateway senders
					(<codeph>gateway-sender-ids</codeph> attribute), events are automatically added
				to a gateway sender queue for distribution to other sites. Events that are placed in
				a gateway sender queue are distributed asynchronously to remote sites. For serial
				gateway queues, the ordering of events sent between sites can be preserved using the
					<codeph>order-policy</codeph> attribute. </p>
			<p>If a queue becomes too full, it is overflowed to disk to keep the member from running
				out of memory. You can optionally configure the queue to be persisted to disk (with
				the <codeph>enable-persistence</codeph>
				<codeph>gateway-sender</codeph> attribute). With persistence, if the member that
				manages the queue goes down, the member picks up where it left off after it
				restarts. </p>
		</section>
		<section>
			<title>Operation Distribution from a Gateway Sender</title>
			<p>The multi-site installation is designed for minimal impact on distributed system
				performance, so only the farthest-reaching entry operations are distributed between
				sites. </p>
			<p>These operations are distributed: <ul id="ul_DC75782339D3488A9D9FF2B98F174CFC">
					<li id="li_F225A61F17DF400797A11DA88A29D431">entry create </li>
					<li id="li_B32BD108DAD34BC1A30CD569F1B6B4B8">entry put </li>
					<li id="li_3B531CE5372F42018EEB713A763C0A5F">entry distributed destroy,
						providing the operation is not an expiration action </li>
				</ul>
			</p>
			<p>These operations are not distributed: <ul id="ul_FD9333E370844759BA0F4F745886E5E8">
					<li id="li_E54D442DB71646BABC2AA11C3EA52BDF">get </li>
					<li id="li_6010372CF5E64C9C8B0D6D70329D0AEB">invalidate </li>
					<li id="li_6C7FB97083364ED884FE5898A3BFC272">local destroy </li>
					<li id="li_4ABF093BC7EA47BDAD6EA601CF4B0323">expiration actions of any kind </li>
					<li id="li_58882AF2BFDC4221B8D69D6B5C8CFFE8">region operations </li>
				</ul>
			</p>
		</section>
		<section id="section_EE819CBF41274312BD5C3EA4A660475C">
			<title>How a Gateway Sender Processes Its Queue</title>
			<p>Each primary gateway sender contains a processor thread that reads messages from the
				queue, batches them, and distributes the batches to a gateway receiver in a remote
				site. To process the queue, a gateway sender thread takes the following actions: <ol
					id="ol_A2420B733EC64E0399C25D385A6F3D1F">
					<li id="li_F41363F1C67C4A0D8BB34090D8F8A822">Reads messages from the queue </li>
					<li id="li_ECE65DED97974302ABF37792EACD7A03">Creates a batch of the messages </li>
					<li id="li_AE5099244D024B52BA5E9FA5D13A9849">Synchronously distributes the batch
						to the other site and waits for a reply </li>
					<li id="li_2AC1353DD9C649BBA10BD04525F892AD">Removes the batch from the queue
						after the other site has successfully replied </li>
				</ol>
			</p>
			<p>Because the batch is not removed from the queue until after the other site has
				replied, the message cannot get lost. On the other hand, in this mode a message
				could be processed more than once. If a site goes offline in the middle of
				processing a batch of messages, then that same batch will be sent again once the
				site is back online. </p>
			<p>You can configure the batch size for messages as well as the batch time interval
				settings. A gateway sender processes a batch of messages from the queue when either
				the batch size or the time interval is reached. In an active network, it is likely
				that the batch size will be reached before the time interval. In an idle network,
				the time interval will most likely be reached before the batch size. This may result
				in some network latency that corresponds to the time interval. </p>
		</section>
		<section id="section_EF240AB26CF242F99689222E9E1D2512">
			<title>How a Gateway Sender Handles Batch Processing Failure</title>
			<p>Exceptions can occur at different points during batch processing: <ul
					id="ul_1E33D04E7D49455FAADDE01A87614909">
					<li id="li_811EE546C997473793C2592C5BC28D3A">The gateway receiver could fail
						with acknowledgment. If processing fails while the gateway receiver is
						processing a batch, the receiver replies with a failure acknowledgment that
						contains the exception, including the identity of the message that failed,
						and the ID of the last message that it successfully processed. The gateway
						sender then removes the successfully processed messages and the failed
						message from the queue and logs an exception with the failed message
						information. The sender then continues processing the messages remaining in
						the queue. </li>
					<li id="li_180E7F0855CB4C1D97A068A1AD8178EA">The gateway receiver can fail
						without acknowledgment. If the gateway receiver does not acknowledge a sent
						batch, the gateway sender does not know which messages were successfully
						processed. In this case the gateway sender re-sends the entire batch. </li>
					<li id="li_950D2B8680944856BBAF2C2D19EA3971">No gateway receivers may be
						available for processing. If a batch processing exception occurs because
						there are no remote gateway receivers available, then the batch remains in
						the queue. The gateway sender waits for a time, and then attempts to re-send
						the batch. The time period between attempts is five seconds. The existing
						server monitor continuously attempts to connect to the gateway receiver, so
						that a connection can be made and queue processing can continue. Messages
						build up in the queue and possibly overflow to disk while waiting for the
						connection. </li>
				</ul>
			</p>
		</section>
	</conbody>
</concept>
