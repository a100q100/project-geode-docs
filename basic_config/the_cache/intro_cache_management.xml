<?xml version="1.0"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_F8BA7F2D3B5A40D78461E78BC5FB31FA">
	<title>Introduction to Cache Management</title>
	<shortdesc>The cache provides in-memory storage and management for your data. </shortdesc>
	<conbody>
		<section id="section_B364B076EB5843DAAC28EE2805686453">
			<p>You organize your data in the cache into <i>data regions</i>, each with its own
				configurable behavior. You store your data into your regions in key/value pairs
				called <i>data entries</i>. The cache also provides features like transactions, data
				querying, disk storage management, and logging. See the Javadocs for
					<codeph>com.gemstone.gemfire.cache.Cache</codeph>.</p>
			<p>You generally configure caches using the <codeph>gfsh</codeph> command-line utility
				or a combination of XML declarations and API calls. <keyword keyref="product_name"/>
				loads and processes your XML declarations when you first create the cache.</p>
			<p><keyword keyref="product_name"/> has one cache type for managing server and peer
				caches and one for one for managing client caches. The cache server process
				automatically creates its server cache at startup. In your application process, the
				cache creation returns an instance of the server/peer or client cache. From that
				point on, you manage the cache through API calls in your application.</p>
		</section>
		<section id="section_20973C59F1C94E35A02CE6582503205A">
			<title>The Caching APIs</title>
			<p><keyword keyref="product_name"/>'s caching APIs provide specialized behavior for
				different system member types and security settings. </p>
				<ul id="ul_2E1EDB45DE894E249707050FDEE4A580">
					<li id="li_AC706DC3305243A092D2C419562C5CD4"
								><b><codeph>com.gemstone.gemfire.cache.RegionService</codeph></b>.
						Generally, you use the <codeph>RegionService</codeph> functionality through
						instances of <codeph>Cache</codeph> and <codeph>ClientCache</codeph>. You
						only specifically use instances of <codeph>RegionService</codeph> for
						limited-access users in secure client applications that service many users.
						The <codeph>RegionService</codeph> API provides access to existing cache
						data regions and to the standard query service for the cache. For client
						caches, queries are sent to the server tier. For server and peer caches,
						queries are run in the current cache and any available peers.
							<codeph>RegionService</codeph> is implemented by
							<codeph>GemFireCache</codeph>. </li>
					<li id="li_DD034AB2BA6F486592CB7200C3A6A8D9"
								><b><codeph>com.gemstone.gemfire.cache.GemFireCache</codeph></b>.
						You do not specifically use instances of <codeph>GemFireCache</codeph>, but
						you use <codeph>GemFireCache</codeph> functionality in your instances of
							<codeph>Cache</codeph> and <codeph>ClientCache</codeph>.
							<codeph>GemFireCache</codeph> extends <codeph>RegionService</codeph> and
						adds general caching features like region attributes, disk stores for region
						persistence and overflow, and access to the underlying distributed system.
							<codeph>GemFireCache</codeph> is implemented by <codeph>Cache</codeph>
						and <codeph>ClientCache</codeph>. </li>
					<li id="li_ECAD1878A9B740A5981EF765D125A950"
								><b><codeph>com.gemstone.gemfire.cache.Cache</codeph></b>. Use the
							<codeph>Cache</codeph> interface to manage server and peer caches. You
						have one <codeph>Cache</codeph> per server or peer process. The
							<codeph>Cache</codeph> extends <codeph>GemFireCache</codeph> and adds
						server/peer caching features like communication within the distributed
						system, region creation, transactions and querying, and cache server
						functionality. </li>
					<li id="li_0F96DE35855E4CBC99F5E86E55CFD784"
								><b><codeph>com.gemstone.gemfire.cache.ClientCache</codeph></b>. Use
						the <codeph>ClientCache</codeph> interface to manage the cache in your
						clients. You have one <codeph>ClientCache</codeph> per client process. The
							<codeph>ClientCache</codeph> extends <codeph>GemFireCache</codeph> and
						adds client-specific caching features like client region creation,
						subscription keep-alive management for durable clients, querying on server
						and client tiers, and RegionService creation for secure access by multiple
						users within the client. </li>
				</ul>
		</section>
		<section id="section_6486BDAF06EC4B91A548872066F3EC8C">
			<title>The Cache XML</title>
			<p>Your <codeph>cache.xml</codeph> must be formatted according to the product XML schema
				definition <codeph><keyword keyref="xsd_filename"/></codeph>. The schema definition
				file is available in the product distribution at <codeph><keyword
						keyref="xsd_path"/>/<keyword keyref="xsd_filename"/></codeph>.</p>
			<p>You use one format for peer and server caches and another for client caches. </p>
			<p><codeph>cache.xml</codeph> for Peer/Server:</p>
				<codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;cache xmlns="<keyword keyref="xsd_namespace"/>"
    xmlns:xsi="<xref href="http://www.w3.org/2001/XMLSchema-instance" format="html" scope="external">http://www.w3.org/2001/XMLSchema-instance</xref>"
    xsi:schemaLocation="<keyword keyref="xsd_namespace"/> <keyword keyref="xsd_namespace"/>/<keyword keyref="xsd_filename"/>"
    version="<keyword keyref="xsd_version"/>”&gt;
...
&lt;/cache&gt;</codeblock>
			<p><codeph>cache.xml</codeph> for Client:</p>
				<codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;client-cache
    xmlns="<keyword keyref="xsd_namespace"/>"
    xmlns:xsi="<xref href="http://www.w3.org/2001/XMLSchema-instance" format="html" scope="external">http://www.w3.org/2001/XMLSchema-instance</xref>"
    xsi:schemaLocation="<keyword keyref="xsd_namespace"/> <keyword keyref="xsd_namespace"/>/<keyword keyref="xsd_filename"/>"
    version="<keyword keyref="xsd_version"></keyword>”&gt;
...
&lt;/client-cache&gt;</codeblock>
			<p>For more information on the <codeph>cache.xml</codeph> file, see <xref
					href="../../reference/topics/chapter_overview_cache_xml.xml#cache_xml"/>. </p>
		</section>
		<section id="section_B113BC6921DA434C947D4326DDB4526E">
			<title>Create and Close a Cache</title>
			<p>Your system configuration and cache configuration are initialized when you start your
				member processes and create each member’s <keyword keyref="product_name"/> cache. If
				you are using the cluster configuration service, member processes can pick up its
				cache configuration from the cluster or group's current configuration. See <xref
					href="../../configuring/cluster_config/gfsh_persist.xml"
				/>.</p>
			<p>The steps in this section use <codeph>gemfire.properties</codeph> and
					<codeph>cache.xml</codeph> file examples, except where API is required. You can
				configure your distributed system properties and cache through the API as well, and
				you can use a combination of file configuration and API configuration. </p>
			<p>The XML examples may not include the full <codeph>cache.xml</codeph> file listing. All of your
				declarative cache configuration must conform to the cache XSD in the product
				installation <codeph><keyword keyref="xsd_path"/>/<keyword keyref="xsd_filename"
					/></codeph>. </p>
			<p>For all of your <keyword keyref="product_name"/> applications: </p>
				<ol id="ol_BECC562B09A84C3CBABB720C92C00166">
					<li id="li_D3C43DBB6D6544FC96DA319CB858AD9E">Create your <codeph>Cache</codeph>,
						for peer/server applications, or <codeph>ClientCache</codeph>, for client
						applications. This connects to the <keyword keyref="product_name"/> system
						you have configured and initializes any configured data regions. Use your
						cache instance to access your regions and perform your application work. </li>
					<li id="li_49D0AA4ACF5D44DEAF31C74F5F6B5BE9">Close your cache when you are done.
						This frees up resources and disconnects your application from the
						distributed system in an orderly manner. </li>
				</ol>
			<p>Follow the instructions in the subtopics under <xref
					href="chapter_overview.xml#the_cache" type="concept" format="dita" scope="local"
				/> to customize your cache creation and closure for your application needs. You may
				need to combine more than one of the sets of instructions. For example, to create a
				client cache in a system with security, you would follow the instructions for
				creating and closing a client cache and for creating and closing a cache in a secure
				system. </p>
		</section>
		<section id="section_E8781B263D434F6A9104194AE7BE1647">
			<title> Export and Import a Cache Snapshot</title>
			<p> To aid in the administration of cache data and speed the setup of new environments,
				you can export a snapshot of the entire cache (all regions) and then import the
				snapshot into a new cache. For example, you could take a snapshot of the production
				environment cache in order to import the cache's data into a testing environment. </p>
			<p>For more details on exporting and importing snapshots of a cache, see <xref
					href="../../managing/cache_snapshots/chapter_overview.xml#concept_E6AC3E25404D4D7788F2D52D83EE3071"
					type="concept" format="dita" scope="local"/>. </p>
		</section>
		<section>
			<title>Cache Management with gfsh and the Cluster Configuration Service</title>
			<p>You can use gfsh commands to mange a server cache. There are gfsh commands to create
				regions, start servers, and to create queues and other objects. As you issue these
				commands, the Cluster Configuration Service saves cache.xml and gemfire.properties
				files on the locators and distributes those configurations to any new members that
				join the cluster. See <xref
					href="../../configuring/cluster_config/gfsh_persist.xml"
				/>.</p>
		</section>
	</conbody>
</concept>
