<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="managing_a_client_cache">
	<title>Managing a Client Cache</title>
	<shortdesc id="shortdesc_6F37E0D4FDEC4DB2855E0698CE21C93A">You have several options for client
		cache configuration. Start your client cache using a combination of XML declarations and API
		calls. Close the client cache when you are done. </shortdesc>
	<conbody>
		<section id="section_566044C44C434926A7A9FBAB2BF463BF">
			<p><keyword keyref="product_name"/> clients are processes that send most or all of their
				data requests and updates to a <keyword keyref="product_name"/> server system.
				Clients run as standalone processes, without peers of their own. </p>
				<note>
					<p><keyword keyref="product_name"/> automatically configures the distributed
					system for your <codeph>ClientCache</codeph> as standalone, which means the
					client has no peers. Do not try to set the <codeph>gemfire.properties</codeph>
					<codeph>mcast-port</codeph> or <codeph>locators</codeph> for a client
					application or the system will throw an exception.
					</p>
				</note>
			<ol id="ol_2A5E8F0BC4944C5F8A02D410D340E602">
				<li id="li_8918816ED61A4A328EF9AE2B4418ECA8">Create your client cache: <ol
						id="ol_31BABBFDA92140558F264C1F85610BD1">
						<li id="li_9BA8BE63CD0B48FAB69991CDE21ADA4D">In your <codeph>cache.xml</codeph>, use the
								<codeph>client-cache</codeph> DOCTYPE and configure your cache
							inside a <codeph>&lt;client-cache&gt;</codeph> element. Configure your
							server connection pool and your regions as needed. Example: <codeblock>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;client-cache
    xmlns="<keyword keyref="xsd_namespace"/>"
    xmlns:xsi="<xref href="http://www.w3.org/2001/XMLSchema-instance" format="html" scope="external">http://www.w3.org/2001/XMLSchema-instance</xref>"
    xsi:schemaLocation="<keyword keyref="xsd_namespace"/> <keyword keyref="xsd_namespace"/>/<keyword keyref="xsd_filename"/>"
    version="<keyword keyref="xsd_version"/>"&gt;
	&lt;pool name="serverPool"&gt;
		&lt;locator host="host1" port="44444"/&gt;
	&lt;/pool&gt;
	&lt;region name="exampleRegion" refid="PROXY"/&gt;
&lt;/client-cache&gt;</codeblock>
							<note>
								<p>Applications that use a <codeph>client-cache</codeph> may want to
								set <codeph>concurrency-checks-enabled</codeph> to false for a
								region in order to see all events for that region. <keyword
									keyref="product_name"/> server members can continue using
								concurrency checks, but they will pass all events to the client
								cache. This configuration ensures that the client sees all region
								events, but it does not prevent the client cache region from
								becoming out-of-sync with the server cache. See <xref
									href="../../developing/distributed_regions/region_entry_versions.xml#topic_CF2798D3E12647F182C2CEC4A46E2045"
									type="topic" format="dita" scope="local"/>. 
								</p>
							</note>
						</li>
						<li id="li_09CA2B56A1FA4390BC59132EC15438AF">If you use multiple server
							pools, configure the pool name explicitly for each client region.
							Example:
							<codeblock>&lt;pool name="svrPool1"&gt;
	&lt;locator host="host1" port="40404"/&gt;
&lt;/pool&gt;
&lt;pool name="svrPool2"&gt;
	&lt;locator host="host2" port="40404"/&gt;
&lt;/pool&gt;
&lt;region name="clientR1" refid="PROXY" pool-name="svrPool1"/&gt;	
&lt;region name="clientR2" refid="PROXY" pool-name="svrPool2"/&gt;
&lt;region name="clientsPrivateR" refid="LOCAL"/&gt;</codeblock>
						</li>
						<li id="li_5B592DF3C5B446E3943FCCE9E6BE264C">In your Java client
							application, create the cache using the
								<codeph>ClientCacheFactory</codeph>
							<codeph>create</codeph> method. Example:
							<codeblock>ClientCache clientCache = new ClientCacheFactory().create();</codeblock>This
							creates the server connections and initializes the clientâ€™s cache
							according to your <codeph>gemfire.properties</codeph> and
								<codeph>cache.xml</codeph> specifications. </li>
					</ol>
				</li>
				<li id="li_9806F310705F49F697026644F73D336B">Close your cache when you are done
					using the <codeph>close</codeph> method of your <codeph>Cache</codeph> instance:
					<codeblock>cache.close();</codeblock>If your client is durable and you want to
					maintain your durable queues while the client cache is closed, use:
					<codeblock>clientCache.close(true);</codeblock>
				</li>
			</ol>
		</section>
	</conbody>
</concept>
