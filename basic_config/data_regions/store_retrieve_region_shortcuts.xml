<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="region_shortcuts">
	<title>Storing and Retrieving Region Shortcuts and Custom Named Region Attributes</title>
	<shortdesc id="shortdesc_EAD0586AD37C4114B7609F00983E1BB4">Use these examples to get started
		with <keyword keyref="product_name"/> region shortcuts. </shortdesc>
	<conbody>
		<section id="section_D9E58754D2B0435FA2986DBBF3063D4C">
			<p><keyword keyref="product_name"/> region shortcuts, in
					<codeph>com.gemstone.gemfire.cache.RegionShortcut</codeph> for peers and servers
				and <codeph>com.gemstone.gemfire.cache.client.ClientRegionShortcut</codeph> for
				clients, are available wherever you create a region in the
					<codeph>cache.xml</codeph> or through the API. Custom named attributes, stored
				by you, are available from the moment you store them on. </p>
			<p>The region shortcuts are special <keyword keyref="product_name"/> named region
				attributes, with identifying names. Create custom named region attributes by setting
				the attributes and storing them with a unique identifier in the region attribute
					<codeph>id</codeph>. Retrieve named attributes by providing the shortcut enum
				value or the name you assigned in the <codeph>id</codeph> to the region creation:</p>
				<ul id="ul_E67BE1FBAB734DDDA11B4EFEB573632F">
					<li id="li_CD638D0EB9B146908028C747E7017A85">In the API, use the identifier in
						the region factory creation </li>
					<li id="li_AC28CB80FA764A6AB1DCE713811A9AC5">In the <codeph>cache.xml</codeph>,
						use the identifier in the <codeph>&lt;region&gt;</codeph> or
							<codeph>&lt;region-attribute&gt;</codeph>
						<codeph>refid</codeph> setting. The <codeph>refid</codeph> is available in
						both elements for convenience </li>
				</ul>
		</section>
		<section id="section_8FCBCC4BDCDE4A85A27E5B9B70603F63">
			<title>Examples </title>
			<p>
				<b>Example #1</b>
			</p>
			<p>This example shows partitioned region creation in the <codeph>cache.xml</codeph>:</p>
				<ul
					id="ul_633FC86B78F44D27B27EC15504CE9492">
					<li id="li_37B9F8AD3BCF47EC8657342F7EA94E93">The first
							<codeph>region-attributes</codeph> declaration starts with the
						predefined <codeph>PARTITION_REDUNDANT</codeph> attributes, modifies the
							<codeph>local-max-memory</codeph> setting, and stores the resulting
						attributes in the custom-named <codeph>myPartition</codeph> attributes. </li>
					<li id="li_404133B729DC4B4CA7BBDD19E5223B66">The region declarations use the new
						stored attributes, but each has its own interest policy, which is specified
						in the individual region creation.
						<codeblock>&lt;!-- Retrieving and storing attributes --&gt;
&lt;region-attributes id="myPartition" refid="PARTITION_REDUNDANT"&gt;
	&lt;partition-attributes local-max-memory="512"/&gt;
&lt;/region-attributes&gt;

&lt;!-- Two partitioned regions, one colocated with the other --&gt;

&lt;!-- Attributes are retrieved and applied in the first region --&gt;
&lt;region name="PartitionedRegion1" refid="myPartition"/&gt;

&lt;!-- Same stored attributes, modification for this region--&gt;
&lt;region name="PartitionedRegion2" refid="myPartition"&gt;
	&lt;region-attributes&gt;
		&lt;partition-attributes colocated-with="PartitionedRegion1" /&gt;
	&lt;/region-attributes&gt;
&lt;/region&gt;</codeblock>
					</li>
				</ul>
			<p>
				<b>Example #2</b>
			</p>
			<p>This example uses the <codeph>RegionFactory</codeph> API to create a region based on
				the predefined <codeph>PARTITION</codeph> region shortcut: </p>
				<codeblock>final Region diskPortfolios = 
	new RegionFactory("PARTITION").create("Portfolios");</codeblock>
			<p>This example retrieves an attributes template and passes it to the region creation
				with a modified pool specification: </p>
				<codeblock>ClientRegionFactory&lt;String,String&gt; regionFactory = 		
	cache.createClientRegionFactory(PROXY);
Region&lt;String, String&gt; region = regionFactory
	.setPoolName("publisher")
	.create("DATA");</codeblock>
		</section>
	</conbody>
</concept>
