<?xml version="1.0"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="reference_D5CE64F5FD6F4A808AEFB748C867189E">
	<title><keyword keyref="product_name"/> Querying FAQ and Examples</title>
	<shortdesc>This topic answers some frequently asked questions on querying functionality. It
		provides examples to help you get started with <keyword keyref="product_name"/> querying. </shortdesc>
	<refbody>
		<section id="section_AFAD97A4BA2D45CF91ED1525A54DDFD6">
			<p> For additional information on <keyword keyref="product_name"/> querying, see <xref
					href="../developing/querying_basics/chapter_overview.xml"
					type="concept" format="dita" scope="local"/>. </p>
			<ul id="ul_183000E6AAB94F73A2C3B4A12B57DEC5">
				<li id="li_03FB835D6BEE421F8350E7C57FB2353E">
					<xref
						href="querying_quick_reference.xml#reference_D5CE64F5FD6F4A808AEFB748C867189E/section_7A4D2C6A4E2C4F4384C158FFCA9CA1C0"
						type="section" format="dita" scope="local"/>
				</li>
				<li id="li_AB5C7E09DF1C40429D61A7BECE6FCA9F">
					<xref
						href="querying_quick_reference.xml#reference_D5CE64F5FD6F4A808AEFB748C867189E/section_641D97CD874D4182961C85429ACA1B05"
						type="section" format="dita" scope="local"/>
				</li>
				<li id="li_5FF095437A5C467CB73B0E4E8AD54A50">
					<xref
						href="querying_quick_reference.xml#reference_D5CE64F5FD6F4A808AEFB748C867189E/section_5383407F9D004D4EB4E695252EBA1EF0"
						type="section" format="dita" scope="local"/>
				</li>
				<li id="li_CF0CB9D570F54B609DE468A787F50B22">
					<xref
						href="querying_quick_reference.xml#reference_D5CE64F5FD6F4A808AEFB748C867189E/section_3E6E4B33D57846008EF4404D2B687597"
						type="section" format="dita" scope="local"/>
				</li>
				<li id="li_9580D029C1FE4CECB00D4C2274011F11">
					<xref
						href="querying_quick_reference.xml#reference_D5CE64F5FD6F4A808AEFB748C867189E/section_9221C29BC1FD49D7BBD26BB34D5BDEB8"
						type="section" format="dita" scope="local"/>
				</li>
				<li id="li_E820166666BD46F3850E510A9B64D514">
					<xref
						href="querying_quick_reference.xml#reference_D5CE64F5FD6F4A808AEFB748C867189E/section_907DBBBA1AEC4570A15B3491B0A7DF0E"
						type="section" format="dita" scope="local"/>
				</li>
				<li id="li_EFAE769224A04822B960F36ACDF2DC78">
					<xref
						href="querying_quick_reference.xml#reference_D5CE64F5FD6F4A808AEFB748C867189E/section_3A9528E8E43140BAA0D5A1457CCAB2D2"
						type="section" format="dita" scope="local"/>
				</li>
				<li id="li_4F916EB67C3B4D65A85F3DA9C1C8CFA8">
					<xref
						href="querying_quick_reference.xml#reference_D5CE64F5FD6F4A808AEFB748C867189E/section_76CDCCFBDB134A339DBE556C28D48F11"
						type="section" format="dita" scope="local"/>
				</li>
				<li id="li_48DEC65F21A04CBFAD020B00C437B5CC">
					<xref
						href="querying_quick_reference.xml#reference_D5CE64F5FD6F4A808AEFB748C867189E/section_EDD17817450C4FC0B510CD87DB2FCD16"
						type="section" format="dita" scope="local"/>
				</li>
				<li id="li_EA74EE76A7F742179863F2D709D9CCC0">
					<xref
						href="querying_quick_reference.xml#reference_D5CE64F5FD6F4A808AEFB748C867189E/section_5FF905E0D10D4CDF9E6F49A70848AF69"
						type="section" format="dita" scope="local"/>
				</li>
				<li id="li_DB8B7A1E4D8B4C51A5E6FD1CECBB115E">
					<xref
						href="querying_quick_reference.xml#reference_D5CE64F5FD6F4A808AEFB748C867189E/section_FBC59A5420FD40D6907A302A1D50DF7E"
						type="section" format="dita" scope="local"/>
				</li>
				<li id="li_6DBD050958074C9C8A856D421EFDA3DE">
					<xref
						href="querying_quick_reference.xml#reference_D5CE64F5FD6F4A808AEFB748C867189E/section_314B88A55B514B88A12DC36227A2D4EF"
						type="section" format="dita" scope="local"/>
				</li>
				<li>
					<xref href="#reference_D5CE64F5FD6F4A808AEFB748C867189E/implicit_attributes"
						format="dita" type="section" scope="local"/>
				</li>
				<li>
					<xref href="#reference_D5CE64F5FD6F4A808AEFB748C867189E/section_ayq_hqw_1r"
						format="dita"/></li>
			</ul>
		</section>
		<section id="section_7A4D2C6A4E2C4F4384C158FFCA9CA1C0">
			<title>How do I write and execute a query against a <keyword keyref="product_name"/>
				region? </title>
			<p>To write and execute a query in <keyword keyref="product_name"/>, you can use any of
				the following mechanisms. Sample query code follows. </p>
			<ul id="ul_239AC970752D41D686C0B965F72F6FE7">
				<li id="li_A77B8D3B2B5448ECAF1BE6E9BD856F4A"><keyword keyref="product_name"/>
					querying APIs </li>
				<li id="li_2FD8AE2C7AF242D99679891C8BF0FB6D"><xref
						href="../tools_modules/gfsh/chapter_overview.xml"
						>gfsh</xref> command-line interface; in particular the <xref
						href="../tools_modules/gfsh/command-pages/query.xml"
						>query</xref> command </li>
				<li>REST API <xref href="../rest_apps/rest_queries.xml#concept_mmg_d35_m4">query
						endpoints</xref></li>
			</ul>
			<p>
				<b>Sample <keyword keyref="product_name"/> Query Code (Java)</b>
				<codeblock>// Identify your query string.
 String queryString = "SELECT * FROM /exampleRegion";
 
 // Get QueryService from Cache.
 QueryService queryService = cache.getQueryService();
 
 // Create the Query Object.
 Query query = queryService.newQuery(queryString);
 
 // Execute Query locally. Returns results set.
 SelectResults results = (SelectResults)query.execute();
 
 // Find the Size of the ResultSet.
 int size = results.size();
 
 // Iterate through your ResultSet.
 Portfolio p = (Portfolio)results.iterator().next(); /* Region containing Portfolio object. */
</codeblock>
			</p>
		</section>
		<section id="section_641D97CD874D4182961C85429ACA1B05"><title>Can I see query string
				examples, listed by query type? </title><p>The following example query strings use
				the <codeph>/exampleRegion</codeph> whose keys are the portfolio ID and whose values
				correspond to the summarized data shown in the following class definitions:
				<codeblock>
class Portfolio implements DataSerializable {
   int ID;
   String type;
   String status;
   Map positions;
}
class Position implements DataSerializable {
   String secId;
   double mktValue;
   double qty;
}</codeblock>
			</p><p><b>Basic WHERE Clause Examples</b></p><p>In the following examples, the status
				field is type String and the ID field is type int. See <xref
					href="../developing/query_additional/literals.xml#literals" type="concept"
					format="dita" scope="local"/> for a complete list of literals supported in
					<keyword keyref="product_name"/> querying. </p><ol id="ol_gpf_jtn_jq">
				<li>Select all active
					portfolios.<codeblock>SELECT * FROM /exampleRegion WHERE status = 'active'</codeblock></li>
				<li>Select all portfolios whose status begins with 'activ'.
					<codeblock>SELECT * FROM /exampleRegion p <b>WHERE p.status LIKE 'activ%'
</b></codeblock></li>
				<li>Select all portfolios whose ID is greater than
					100.<codeblock>SELECT * from /exampleRegion p <b>WHERE p.ID &gt; 100</b></codeblock>
				</li>
			</ol><p><b>Using DISTINCT</b></p><p>Select distinct Objects from the region that satisfy
				the where clause condition of status = 'active'.
				<codeblock>SELECT <b>DISTINCT</b> * FROM /exampleRegion <b>WHERE status = 'active'</b></codeblock></p><p><b>Aliases
					and Synonyms</b></p><p>In the query string, the path expressions (region and its
				objects) can be defined using an alias. This alias can be used or referred to in
				other places in the query.
				<codeblock>SELECT DISTINCT * FROM /exampleRegion p WHERE <b>p</b>.status = 'active'</codeblock><codeblock>SELECT p.ID, p.status FROM /exampleRegion p WHERE <b>p</b>.ID &gt; 0</codeblock></p><p><b>Using
					the NOT Operator</b>.</p><p> See <xref
					href="../developing/query_additional/operators.xml#operators" type="concept"
					format="dita" scope="local"/> for a complete list of supported operators.
				<codeblock>SELECT DISTINCT * FROM /exampleRegion WHERE <b>NOT</b> (status = 'active') AND ID = 2
</codeblock><codeblock>SELECT * FROM /exampleRegion WHERE <b>NOT</b> (ID IN SET(1,2)</codeblock></p><p><b>Using
					the AND and OR Operators</b></p><p>See <xref
					href="../developing/query_additional/operators.xml#operators" type="concept"
					format="dita" scope="local"/> for a complete list of supported operators.
					</p><codeblock>SELECT * FROM /exampleRegion WHERE ID &gt; 4 <b>AND</b> ID &lt; 9</codeblock><codeblock>SELECT * FROM /exampleRegion WHERE ID = 0 <b>OR</b> ID = 1</codeblock><codeblock>SELECT DISTINCT p.status FROM /exampleRegion p 
WHERE (p.createTime IN SET (10|) <b>OR</b> p.status IN SET ('active')) <b>AND</b> p.ID &gt; 0</codeblock><p><b>Using
					not equal to</b></p><p>
				<codeblock>SELECT * FROM /exampleRegion portfolio WHERE portfolio.ID &lt;&gt; 2</codeblock>
				<codeblock>SELECT * FROM /exampleRegion portfolio WHERE portfolio.ID != 2</codeblock>
			</p><p><b>Projection attribute example</b>
			</p><codeblock>SELECT p.get('account') FROM /exampleRegion p</codeblock><p><b>Querying
					nested collections</b></p><p>The following query uses Positions of type HashMap.
				<codeblock>SELECT p, pos FROM /exampleRegion p, p.positions.values pos WHERE pos.secId = 'VMW'</codeblock></p><p><b>Using
					LIMIT</b></p><codeblock>SELECT * FROM /exampleRegion p WHERE p.ID &gt; 0 LIMIT 2</codeblock><p><b>Using
					COUNT</b></p><p>See <xref
					href="../developing/query_select/the_select_statement.xml#concept_85AE7D6B1E2941ED8BD2A8310A81753E/section_B2CBA00EB83F463DAF4769D7859C64C8"
					type="section" format="dita" scope="local"/> for more information.
				<codeblock>SELECT COUNT(*) FROM /exampleRegion WHERE ID &gt; 0</codeblock><codeblock>SELECT COUNT(*) FROM /exampleRegion WHERE ID &gt; 0 LIMIT 50</codeblock><codeblock>SELECT COUNT(*) FROM /exampleRegion WHERE ID &gt; 0 AND status LIKE 'act%'</codeblock><codeblock>SELECT COUNT(*) FROM /exampleRegion WHERE ID IN SET(1,2,3,4,5)</codeblock><codeblock>SELECT COUNT(*) FROM /exampleRegion p, p.positions.values pos 
WHERE p.ID &gt; 0 AND pos.secId 'IBM'</codeblock><codeblock>SELECT DISTINCT COUNT(*) FROM /exampleRegion p, p.positions.values pos
WHERE p.ID &gt; 0 OR p.status = 'active' OR pos.secId OR pos.secId = 'IBM'</codeblock></p><p><b>Using
					LIKE</b></p><codeblock>SELECT * FROM /exampleRegion ps WHERE ps.pkid LIKE '_bc'</codeblock><codeblock>SELECT * FROM /exampleRegion ps WHERE ps.status LIKE '_b_' OR ps.pkid = '2'</codeblock><codeblock>SELECT * FROM /exampleRegion ps WHERE ps.status LIKE '%b%</codeblock><p><b>Using
					Region Entry Keys and
					Values</b></p><codeblock>SELECT * FROM /exampleRegion.keys k WHERE k.ID = 1</codeblock><codeblock>SELECT entry.value FROM /exampleRegion.entries entry WHERE entry.key = '1'</codeblock><codeblock>SELECT key, positions FROM /exampleRegion.entrySet, value.positions.values positions 
WHERE positions.mktValue &gt;= 25.00</codeblock><codeblock>SELECT DISTINCT entry.value FROM /exampleRegion.entries entry WHERE entry.key = '1'</codeblock><codeblock>SELECT * FROM /exampleRegion.entries entry WHERE entry.value.ID &gt; 1</codeblock><codeblock>SELECT * FROM /exampleRegion.keySet key WHERE key = '1'</codeblock><codeblock>SELECT * FROM /exampleRegion.values portfolio 
WHERE portfolio.status = 'active'</codeblock><p><b>Nested
					Queries</b></p><p>
				<codeblock>IMPORT "query".Portfolio;
SELECT * FROM /exampleRegion, (SELECT DISTINCT * FROM /exampleRegion p TYPE Portfolio, p.positions 
WHERE value!=null)</codeblock>
				<codeblock>SELECT DISTINCT * FROM (SELECT DISTINCT * FROM /exampleRegion portfolios, positions pos) 
WHERE pos.value.secId = 'IBM'</codeblock>
				<codeblock>SELECT * FROM /exampleRegion portfolio 
WHERE portfolio.ID IN (SELECT p2.ID FROM /exampleRegion2 p2 WHERE p2.ID &gt; 1)</codeblock>
				<codeblock>SELECT DISTINCT * FROM /exampleRegion p, (SELECT DISTINCT pos 
FROM /exampleRegion x, x.positions.values pos WHERE x.ID = p.ID ) AS itrX</codeblock>
			</p><p><b>Query the results of a FROM clause
				expression</b></p><codeblock>SELECT DISTINCT * FROM (SELECT DISTINCT * FROM /Portfolios ptf, positions pos) p 
WHERE p.get('pos').value.secId = 'IBM'</codeblock><b>Hash
				Map Query</b>
			<p>Query using a hashmap. In the following examples, 'version' is one of the keys in the
				hashmap.<codeblock>SELECT * FROM /exampleRegion p WHERE p['version'] = '1.0'</codeblock><codeblock>SELECT entry.key, entry.value FROM /exampleRegion.entries entry 
WHERE entry.value['version'] = '100'</codeblock></p><p><b>Map
					example where "map" is a nested HashMap object</b></p><p>
				<codeblock>SELECT DISTINCT * FROM /exampleRegion p WHERE p.portfolios['key2'] &gt;= 3</codeblock>
			</p><p><b>Example Queries that Fetch Array
					Values</b></p><codeblock>SELECT * FROM /exampleRegion p WHERE p.names[0] = 'aaa'</codeblock><codeblock>SELECT * FROM /exampleRegion p WHERE p.collectionHolderMap.get('1').arr[0] = '0'</codeblock><p><b>Using
					ORDER BY (and ORDER BY with LIMIT)</b></p><p>You must use the DISTINCT keyword
				with ORDER BY queries.
					</p><codeblock>SELECT DISTINCT * FROM /exampleRegion WHERE ID &lt; 101 ORDER BY ID</codeblock><codeblock>SELECT DISTINCT * FROM /exampleRegion WHERE ID &lt; 101 ORDER BY ID asc</codeblock><codeblock>SELECT DISTINCT * FROM /exampleRegion WHERE ID &lt; 101 ORDER BY ID desc</codeblock><codeblock>SELECT DISTINCT key.ID, key.status AS st FROM /exampleRegion.keys key 
WHERE key.status = 'inactive' ORDER BY key.status desc, key.ID LIMIT 1</codeblock><codeblock>SELECT DISTINCT * FROM /exampleRegion p ORDER BY p.getP1().secId, p.ID dec, p.ID LIMIT 9</codeblock><codeblock>SELECT DISTINCT * FROM /exampleRegion p ORDER BY p.ID, val.secId LIMIT 1</codeblock><codeblock>SELECT DISTINCT e.key FROM /exampleRegion.entrySet e ORDER BY e.key.ID desc, e.key.pkid desc</codeblock><codeblock>SELECT DISTINCT p.names[1] FROM /exampleRegion p ORDER BY p.names[1]</codeblock><p><b>Join
					Queries</b></p><codeblock>SELECT * FROM /exampleRegion portfolio1, /exampleRegion2 portfolio2 
WHERE portfolio1.status = portfolio2.status</codeblock><codeblock>SELECT portfolio1.ID, portfolio2.status FROM /exampleRegion portfolio1, /exampleRegion2 portfolio2 
WHERE portfolio1.status = portfolio2.status
</codeblock><codeblock>SELECT * FROM /exampleRegion portfolio1, portfolio1.positions.values positions1, 
/exampleRegion2 portfolio2, portfolio2.positions.values positions2 WHERE positions1.secId = positions1.secId
</codeblock><codeblock>SELECT * FROM /exampleRegion portfolio1, portfolio1.positions.values positions1, 
/exampleRegion2 portfolio2, portfolio2.positions.values positions2 WHERE portfolio1.ID = 1 
AND positions1.secId = positions1.secId
</codeblock><codeblock>SELECT DISTINCT a, b.price FROM /exampleRegoin1 a, /exampleRegion2 b WHERE a.price = b.price</codeblock><p><b>Using
					AS</b></p><p>
				<codeblock>SELECT * FROM /exampleRegion p, p.positions.values AS pos WHERE pos.secId != '1'</codeblock>
			</p><p><b>Using
					TRUE</b></p><codeblock>SELECT DISTINCT * FROM /Portfolios WHERE TRUE</codeblock><p><b>Using
					IN and SET</b></p><p>See also <xref
					href="../developing/query_select/the_where_clause.xml#the_where_clause/section_AC12146509F141378E493078540950C7"
					type="section" format="dita" scope="local"
				><?xm-replace_text IN and SET?></xref>.
					</p><codeblock>SELECT * FROM /exampleRegion portfolio WHERE portfolio.ID IN SET(1, 2)</codeblock><codeblock>SELECT * FROM /exampleRegion portfolio, portfolio.positions.values positions 
WHERE portfolio.Pk IN SET ('1', '2') AND positions.secId = '1'
</codeblock><codeblock>SELECT * FROM /exampleRegion portfolio, portfolio.positions.values positions 
WHERE portfolio.Pk IN SET ('1', '2') OR positions.secId IN SET ('1', '2', '3')
</codeblock><codeblock>SELECT * FROM /exampleRegion portfolio, portfolio.positions.values positions 
WHERE portfolio.Pk IN SET ('1', '2') OR positions.secId IN SET ('1', '2', '3') 
AND portfolio.status = 'active'
</codeblock><p><b>Querying
					for Set values</b></p><p>In the following query, sp is of type Set.
				<codeblock>SELECT * FROM /exampleRegion WHERE sp = set('20', '21', '22')</codeblock>If
				the Set (sp) only contains '20' and '21', then the query will evaluate to false. The
				query compares the two sets and looks for the presence of elements in both sets.
			</p>For other collection types like list (sp is of type List), the query can be written
			as follows: <codeblock>SELECT * FROM /exampleRegion WHERE sp.containsAll(set('20', '21', '22'))</codeblock>
			<b>Invoking Methods on Objects</b>
			<p>See <xref
					href="../developing/query_select/the_where_clause.xml#the_where_clause/section_D2F8D17B52B04895B672E2FCD675A676"
					type="section" format="dita" scope="local"
					><?xm-replace_text Method Invocations?></xref> for more information.
				</p><codeblock>SELECT * FROM /exampleRegion p WHERE p.length &gt; 1</codeblock><codeblock>SELECT DISTINCT * FROM /exampleRegion p WHERE p.positions.size &gt;= 2</codeblock><codeblock>SELECT DISTINCT * FROM /exampleRegion p WHERE p.positions.isEmpty</codeblock><codeblock>SELECT DISTINCT * FROM /exampleRegion p WHERE p.name.startsWith('Bo')</codeblock><b>Using
				Query-Level Debugging</b>
			<p>To set debugging on the query level, add the <b>&lt;trace&gt;</b> keyword before the
				query. (If you are using an IMPORT statement, include it before the IMPORT).
					</p><codeblock><b>&lt;trace&gt;</b>
SELECT * from /exampleRegion, positions.values TYPE myclass</codeblock><p><b>Using
					Reserved Words in Queries</b></p><p>To access any method, attribute, or named
				object that has the same name as a query language reserved word, enclose the name
				within double quotation marks.
				<codeblock>SELECT * FROM /exampleRegion WHERE status = 'active' AND "type" = 'XYZ'</codeblock><codeblock>SELECT DISTINCT "type" FROM /exampleRegion WHERE status = 'active'</codeblock></p><p><b>Using
					IMPORT</b></p><p>In the case where the same class name resides in two different
				namescopes (packages), there needs to be a means of referring to different classes
				of the same name. The IMPORT statement is used to establish a namescope for a class
				in a query.
					</p><codeblock>IMPORT package.Position;
SELECT DISTINCT * FROM /exampleRegion, positions.values positions TYPE Position WHERE positions.mktValue &gt;= 25.00</codeblock><p><b>Using
					TYPE</b></p><p>Specifying object type helps the query engine to process the
				query at optimal speed. Apart from specifying the object types during configuration
				(using key-constraint and value-constraint), type can be explicitly specified in the
				query string.
					</p><codeblock>SELECT DISTINCT * FROM /exampleRegion, positions.values positions TYPE Position WHERE positions.mktValue &gt;= 25.00</codeblock><p><b>Using
					ELEMENT</b></p><p>Using ELEMENT(expr) extracts a single element from a
				collection or array. This function throws a <codeph>FunctionDomainException</codeph>
				if the argument is not a collection or array with exactly one
			element.</p><codeblock>ELEMENT(SELECT DISTINCT * FROM /exampleRegion WHERE id = 'XYZ-1').status = 'active'</codeblock></section>
		<section id="section_5383407F9D004D4EB4E695252EBA1EF0">
			<title>Which APIs should I use to write my queries?</title>
			<p> If you are querying a Java application’s local cache or querying other members, use
					<xref
						href="http://geode.incubator.apache.org/releases/latest/javadoc/com/gemstone/gemfire/cache/query/QueryService.html"
					scope="external" format="html"
					>com.gemstone.gemfire.cache.Cache.getQueryService</xref>. </p>
			<p>If you are writing a Java client to server query, use <xref
				href="http://geode.incubator.apache.org/releases/latest/javadoc/com/gemstone/gemfire/cache/client/Pool.html"
					scope="external" format="html"
					>com.gemstone.gemfire.cache.client.Pool.getQueryService</xref>. </p>
			<p>If you are writing a native client to server query, use the <xref
				href="http://geode.incubator.apache.org/releases/latest/net_api/DotNetDocs/Index.html" scope="external"
					format="html">.NET C# API</xref> or the <xref
						href="http://geode.incubator.apache.org/releases/latest/cpp_api/cppdocs/index.html" scope="external"
					format="html">C++ API</xref>. </p>
		</section>
		<section id="section_3E6E4B33D57846008EF4404D2B687597">
			<title>How do I invoke an object's method in a query?</title>
			<p>To use a method in a query, use the attribute name that maps to the public method you
				want to invoke. For example:
				<codeblock>/*valid method invocation*/ 
SELECT DISTINCT * FROM /exampleRegion p WHERE p.positions.size &gt;= 2 - maps to positions.size()
</codeblock>
			</p>
		</section>
		<section id="section_9221C29BC1FD49D7BBD26BB34D5BDEB8">
			<title>Can I invoke a static method on an object in a query?</title>
			<p>No, you cannot invoke a static method on an object. For example, the following query
				is invalid.
				<codeblock>/*invalid method invocation*/
SELECT DISTINCT * FROM /exampleRegion WHERE aDay = Day.Wednesday</codeblock>
			</p>
			<p>To work around this limitation, write a reusable query that uses a query bind
				parameter to invoke the static method. Then at query run time, set the parameter to
				the static method invocation (<codeph>Day.Wednesday</codeph>). For example:
				<codeblock>SELECT DISTINCT * FROM /exampleRegion WHERE aDay = $1</codeblock>
			</p>
		</section>
		<section id="section_907DBBBA1AEC4570A15B3491B0A7DF0E">
			<title>How do I write a reusable query?</title>
			<p>Using query APIs, you can set query bind parameters that are passed values at query run time.
				For example:
				<codeblock>// specify the  query string
 String queryString = "SELECT DISTINCT * FROM /exampleRegion p WHERE p.status = $1";

QueryService queryService = cache.getQueryService();
Query query = queryService.newQuery(queryString);

// set a query bind parameter
Object[] params = new Object[1];
params[0] = "active";

// Execute the query locally. It returns the results set.
SelectResults results = (SelectResults) query.execute(params);

// use the results of the query; this example only looks at the size
 int size = results.size();
</codeblock>
			</p>
			<p>If you use a query bind parameter in place of a region path in your path expression,
				the parameter value must reference a collection (and not a String such as the name
				of the region path.) </p>
			<p>See <xref
					href="../developing/query_additional/using_query_bind_parameters.xml#concept_173E775FE46B47DF9D7D1E40680D34DF"
					type="concept" format="dita" scope="local"/> for more details. </p>
		</section>
		<section id="section_3A9528E8E43140BAA0D5A1457CCAB2D2">
			<title>When should I create indexes to use in my queries?</title>
			<p>Determine whether your query’s performance will benefit from an index. For example,
				in the following query, an index on pkid can speed up the query.
				<codeblock>SELECT DISTINCT * FROM /exampleRegion portfolio WHERE portfolio.pkid = '123'</codeblock>
			</p>
		</section>
		<section id="section_76CDCCFBDB134A339DBE556C28D48F11">
			<title>How do I create an index?</title>
			<p>An index can be created programmatically using APIs or by using xml. Here are two
				examples: </p>
			<p><b>Sample Code</b>
				<codeblock>QueryService qs = cache.getQueryService();
 qs.createIndex("myIndex", "status", "/exampleRegion");
 qs.createKeyIndex("myKeyIndex", "id", "exampleRegion");
</codeblock>For
				more information on using this API, see the <xref
					href="http://geode.incubator.apache.org/releases/latest/javadoc/index.html" scope="external"
					format="html">GemFire JavaDocs</xref>. </p>
			<p><b>Sample XML</b>
				<codeblock>&lt;region name="portfolios"&gt;
 &lt;region-attributes . . . &gt;
 &lt;/region-attributes&gt;
 &lt;index name="myIndex"&gt;
 &lt;functional from-clause="/exampleRegion" 
     expression="status"/&gt;
 &lt;/index&gt;
 &lt;index name="myKeyIndex"&gt;
 &lt;primary-key field="id"/&gt;
 &lt;/index&gt;
 &lt;entry&gt;
</codeblock>
				For more details on indexes, see <xref
					href="../developing/query_index/query_index.xml" type="concept"
					format="dita" scope="local"><?xm-replace_text Working with Indexes?></xref>.
			</p>
		</section>
		<section id="section_30D8C9A5472E4768AB7A0D598C9A496E">
			<title>Can I create indexes on overflow regions?</title>
			<p>You can create indexes on overflow regions, but you are subject to some limitations.
				For example, the data contained in the index itself cannot be overflowed to disk.
				See <xref
					href="../developing/query_index/indexes_with_overflow_regions.xml#concept_87BE7DB32C714EB0BF7532AF93569328"
					type="concept" format="dita" scope="local"/> for more information. </p>
		</section>
		<section id="section_EDD17817450C4FC0B510CD87DB2FCD16">
			<title>Can I query a partitioned region? Can I perform a join query on a partitioned
				region?</title>
			<p>You can query partitioned regions, but there are some limitations. You cannot perform
				join queries on partitioned regions, however you can perform equi-join queries on
				colocated partitioned regions by executing a function on a local data set. </p>
			<p>For a full list of restrictions, see <xref
					href="../developing/query_additional/partitioned_region_query_restrictions.xml#concept_5353476380D44CC1A7F586E5AE1CE7E8"
					type="concept" format="dita" scope="local"/>. </p>
		</section>
		<section id="section_5FF905E0D10D4CDF9E6F49A70848AF69">
			<title>How can I improve the performance of a partitioned region query?</title>
			<p>If you know the data you need to query, you can target particular nodes in your
				queries (thus reducing the number of servers the query needs to access) by executing
				the query with the FunctionService. See <xref
					href="../developing/query_additional/query_on_a_single_node.xml#concept_30B18A6507534993BD55C2C9E0544A97"
					type="concept" format="dita" scope="local"/> for details. If you are querying
				data that has been partitioned by a key or specific field, you should first create a
				key index and then execute the query using the FunctionService with the key or field
				as a filter. See <xref
					href="../developing/query_additional/partitioned_region_key_or_field_value.xml#concept_3010014DFBC9479783B2B45982014454"
					type="concept" format="dita" scope="local"/>. </p>
		</section>
		<section id="section_FBC59A5420FD40D6907A302A1D50DF7E">
			<title>Which query language elements are supported in <keyword keyref="product_name"
				/>?</title>
			<simpletable id="simpletable_F851BD0FB5654EFAA6788F01D4FBBE6B">
				<strow>
					<stentry><p>AND </p><p>AS </p><p>COUNT </p><p>DISTINCT </p><p>ELEMENT
							</p><p>FROM </p>&lt;HINT><p>IMPORT </p><p>IN </p><p>IS_DEFINED
							</p><p>IS_UNDEFINED </p></stentry>
					<stentry>
						<p>LIMIT </p>
						<p>LIKE </p>
						<p>NOT </p>
						<p>NVL </p>
						<p>OR </p>
						<p>ORDER BY </p>
						<p>SELECT </p>
						<p>SET </p>
						<p>&lt;TRACE&gt; </p>
						<p>TRUE </p>
					</stentry>
					<stentry>
						<p>TO_DATE </p>
						<p>TYPE </p>
						<p>WHERE </p>
					</stentry>
				</strow>
			</simpletable>For more information and examples on using each supported keyword, see
				<xref
				href="../developing/query_additional/supported_keywords.xml#reference_07214B0F8DC94659B0F2D68B67195BD8"
				type="reference" format="dita" scope="local"/>. </section>
		<section id="section_314B88A55B514B88A12DC36227A2D4EF">
			<title>How do I debug queries?</title>
			<p>You can debug a specific query at the query level by adding the &lt;trace&gt; keyword
				before the query string that you want to debug. Here is an example:
				<codeblock>&lt;trace&gt; SELECT * FROM /exampleRegion</codeblock> You can also
				write: <codeblock>&lt;TRACE&gt; SELECT * FROM /exampleRegion</codeblock>When the
				query is executed, <keyword keyref="product_name"/> will log a message in
					<codeph>$GEMFIRE_DIR/system.log</codeph> with the following information:
				<msgblock>[info 2011/08/29 11:24:35.472 PDT CqServer &lt;main&gt; tid=0x1] Query Executed in 9.619656 ms; rowCount = 99; 
indexesUsed(0) "select *  from /exampleRegion" </msgblock>
			</p>
			<p>If you want to enable debugging for all queries, you can enable query execution
				logging by setting a System property on the command line during start-up:
				<codeblock>gfsh&gt;start server --name=<varname>server_name</varname> -–J=-Dgemfire.Query.VERBOSE=true</codeblock>Or
				you can set the property programmatically:
				<codeblock>System.setProperty("gemfire.Query.VERBOSE","true");</codeblock>
			</p>
			<p/>
		</section>
		<section id="implicit_attributes">
			<title>Can I use implicit attributes or methods in my query?</title>
			<p>If an implicit attribute or method name can only be associated with one untyped
				iterator, the <keyword keyref="product_name"/> query processor will assume that it
				is associated with that iterator. However, if more than one untyped iterator is in
				scope, then the query will fail with a <codeph>TypeMismatchException</codeph>. The
				following query fails because the query processor does not fully type expressions:
				<codeblock>select distinct value.secId from /pos , getPositions(23)</codeblock></p>
			<p> </p>
			<p>The following query, however, succeeds because the iterator is either explicitly
				named with a variable or it is
				typed:<codeblock>select distinct <b>e.value.secId</b> from /pos , getPositions(23) e
</codeblock></p>
		</section>
		<section>
			<title>Can I instruct the query engine to use specific indexes with my queries?</title>
			<p>Using HINT <i>indexname</i> allows you to instruct the query engine to prefer and
				filter results from the specified indexes. If you provide multiple index names, the
				query engine will use all available indexes but prefer the specified
				indexes.<codeblock><b>&lt;HINT 'IDIndex'></b> SELECT * FROM /Portfolios p WHERE p.ID > 10 AND p.owner = 'XYZ'
</codeblock><codeblock><b>&lt;HINT 'IDIndex', 'OwnerIndex'></b> SELECT * FROM /Portfolios p WHERE p.ID > 10 AND p.owner = 'XYZ' AND p.value &lt; 100</codeblock></p>
		</section>
		<section id="section_ayq_hqw_1r">
			<title>How do I perform a case-insensitive search on a field in OQL?</title>
			<p>You can use the Java String class methods <codeph>toUpperCase</codeph> and
					<codeph>toLowerCase</codeph> to transform fields where you want to perform a
				case-insensitive search. For
				example:<codeblock>SELECT entry.value FROM /exampleRegion.entries entry WHERE entry.value.toUpperCase LIKE '%BAR%'</codeblock>or
				<codeblock>SELECT * FROM /exampleRegion WHERE foo.toLowerCase LIKE '%bar%'</codeblock></p>
		</section>
	</refbody>
</reference>
